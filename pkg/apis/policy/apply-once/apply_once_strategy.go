/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_once

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the ApplyOnceStrategy type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApplyOnceStrategy{}

// ApplyOnceStrategy struct for ApplyOnceStrategy
type ApplyOnceStrategy struct {
	// When the strategy takes effect,e.g. onUpdate、onStateKeep
	Affect *string `json:"affect,omitempty"`
	// Specify the path of the resource that allow configuration drift
	Path []string `json:"path"`
}

// NewApplyOnceStrategyWith instantiates a new ApplyOnceStrategy object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewApplyOnceStrategyWith(path []string) *ApplyOnceStrategy {
	this := ApplyOnceStrategy{}
	this.Path = path
	return &this
}

// NewApplyOnceStrategyWithDefault instantiates a new ApplyOnceStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyOnceStrategyWithDefault() *ApplyOnceStrategy {
	this := ApplyOnceStrategy{}
	return &this
}

// NewApplyOnceStrategy is short for NewApplyOnceStrategyWithDefault which instantiates a new ApplyOnceStrategy object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyOnceStrategy() *ApplyOnceStrategy {
	return NewApplyOnceStrategyWithDefault()
}

// NewApplyOnceStrategyEmpty instantiates a new ApplyOnceStrategy object with no properties set.
// This constructor will not assign any default values to properties.
func NewApplyOnceStrategyEmpty() *ApplyOnceStrategy {
	this := ApplyOnceStrategy{}
	return &this
}

// NewApplyOnceStrategys converts a list ApplyOnceStrategy pointers to objects.
// This is helpful when the SetApplyOnceStrategy requires a list of objects
func NewApplyOnceStrategyList(ps ...*ApplyOnceStrategy) []ApplyOnceStrategy {
	objs := []ApplyOnceStrategy{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this ApplyOnceStrategy
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *ApplyOnceStrategy) Validate() error {
	if o.Path == nil {
		return errors.New("Path in ApplyOnceStrategy must be set")
	}
	// validate all nested properties
	return nil
}

// GetAffect returns the Affect field value if set, zero value otherwise.
func (o *ApplyOnceStrategy) GetAffect() string {
	if o == nil || utils.IsNil(o.Affect) {
		var ret string
		return ret
	}
	return *o.Affect
}

// GetAffectOk returns a tuple with the Affect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyOnceStrategy) GetAffectOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Affect) {
		return nil, false
	}
	return o.Affect, true
}

// HasAffect returns a boolean if a field has been set.
func (o *ApplyOnceStrategy) HasAffect() bool {
	if o != nil && !utils.IsNil(o.Affect) {
		return true
	}

	return false
}

// SetAffect gets a reference to the given string and assigns it to the affect field.
// Affect:  When the strategy takes effect,e.g. onUpdate、onStateKeep
func (o *ApplyOnceStrategy) SetAffect(v string) *ApplyOnceStrategy {
	o.Affect = &v
	return o
}

// GetPath returns the Path field value
func (o *ApplyOnceStrategy) GetPath() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ApplyOnceStrategy) GetPathOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path, true
}

// SetPath sets field value
func (o *ApplyOnceStrategy) SetPath(v []string) *ApplyOnceStrategy {
	o.Path = v
	return o
}

func (o ApplyOnceStrategy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyOnceStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Affect) {
		toSerialize["affect"] = o.Affect
	}
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

type NullableApplyOnceStrategy struct {
	value *ApplyOnceStrategy
	isSet bool
}

func (v *NullableApplyOnceStrategy) Get() *ApplyOnceStrategy {
	return v.value
}

func (v *NullableApplyOnceStrategy) Set(val *ApplyOnceStrategy) {
	v.value = val
	v.isSet = true
}

func (v *NullableApplyOnceStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyOnceStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyOnceStrategy(val *ApplyOnceStrategy) *NullableApplyOnceStrategy {
	return &NullableApplyOnceStrategy{value: val, isSet: true}
}

func (v NullableApplyOnceStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyOnceStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
