/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package override

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Traits type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Traits{}

// Traits struct for Traits
type Traits struct {
	// Specify if the trait should be remove, default false
	Disable *bool `json:"disable"`
	// Specify the properties to override.
	Properties map[string]interface{} `json:"properties,omitempty"`
	// Specify the type of the trait to be patched.
	Type *string `json:"type"`
}

// NewTraitsWith instantiates a new Traits object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewTraitsWith(disable bool, type_ string) *Traits {
	this := Traits{}
	this.Disable = &disable
	this.Type = &type_
	return &this
}

// NewTraitsWithDefault instantiates a new Traits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraitsWithDefault() *Traits {
	this := Traits{}
	var disable bool = false
	this.Disable = &disable
	return &this
}

// NewTraits is short for NewTraitsWithDefault which instantiates a new Traits object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraits() *Traits {
	return NewTraitsWithDefault()
}

// NewTraitsEmpty instantiates a new Traits object with no properties set.
// This constructor will not assign any default values to properties.
func NewTraitsEmpty() *Traits {
	this := Traits{}
	return &this
}

// NewTraitss converts a list Traits pointers to objects.
// This is helpful when the SetTraits requires a list of objects
func NewTraitsList(ps ...*Traits) []Traits {
	objs := []Traits{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Traits
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Traits) Validate() error {
	if o.Disable == nil {
		return errors.New("Disable in Traits must be set")
	}
	if o.Type == nil {
		return errors.New("Type in Traits must be set")
	}
	// validate all nested properties
	return nil
}

// GetDisable returns the Disable field value
func (o *Traits) GetDisable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value
// and a boolean to check if the value has been set.
func (o *Traits) GetDisableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disable, true
}

// SetDisable sets field value
func (o *Traits) SetDisable(v bool) *Traits {
	o.Disable = &v
	return o
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Traits) GetProperties() map[string]interface{} {
	if o == nil || utils.IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Traits) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Traits) HasProperties() bool {
	if o != nil && !utils.IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the properties field.
// Properties:  Specify the properties to override.
func (o *Traits) SetProperties(v map[string]interface{}) *Traits {
	o.Properties = v
	return o
}

// GetType returns the Type field value
func (o *Traits) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Traits) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Traits) SetType(v string) *Traits {
	o.Type = &v
	return o
}

func (o Traits) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Traits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disable"] = o.Disable
	if !utils.IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableTraits struct {
	value *Traits
	isSet bool
}

func (v *NullableTraits) Get() *Traits {
	return v.value
}

func (v *NullableTraits) Set(val *Traits) {
	v.value = val
	v.isSet = true
}

func (v *NullableTraits) IsSet() bool {
	return v.isSet
}

func (v *NullableTraits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraits(val *Traits) *NullableTraits {
	return &NullableTraits{value: val, isSet: true}
}

func (v NullableTraits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
