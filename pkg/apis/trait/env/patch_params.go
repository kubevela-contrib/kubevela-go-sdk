/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package env

import (
	"encoding/json"

	"github.com/kubevela-contrib/vela-go-sdk/pkg/apis/utils"
)

// checks if the PatchParams type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PatchParams{}

// PatchParams struct for PatchParams
type PatchParams struct {
	// Specify the name of the target container, if not set, use the component name
	ContainerName *string `json:"containerName,omitempty"`
	// Specify the  environment variables to merge, if key already existing, override its value
	Env *map[string]string `json:"env,omitempty"`
	// Specify if replacing the whole environment settings for the container
	Replace *bool `json:"replace,omitempty"`
	// Specify which existing environment variables to unset
	Unset []string `json:"unset,omitempty"`
}

// NewPatchParamsWith instantiates a new PatchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchParamsWith() *PatchParams {
	this := PatchParams{}
	var containerName string = ""
	this.ContainerName = &containerName
	var replace bool = false
	this.Replace = &replace
	return &this
}

// NewPatchParams instantiates a new PatchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchParams() *PatchParams {
	this := PatchParams{}
	var containerName string = ""
	this.ContainerName = &containerName
	var replace bool = false
	this.Replace = &replace
	return &this
}

// NewPatchParamss converts a list PatchParams pointers to objects.
// This is helpful when the SetPatchParams requires a list of objects
func NewPatchParamsList(ps ...*PatchParams) []PatchParams {
	objs := []PatchParams{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetContainerName returns the ContainerName field value if set, zero value otherwise.
func (o *PatchParams) GetContainerName() string {
	if o == nil || utils.IsNil(o.ContainerName) {
		var ret string
		return ret
	}
	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetContainerNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ContainerName) {
		return nil, false
	}
	return o.ContainerName, true
}

// HasContainerName returns a boolean if a field has been set.
func (o *PatchParams) HasContainerName() bool {
	if o != nil && !utils.IsNil(o.ContainerName) {
		return true
	}

	return false
}

// SetContainerName gets a reference to the given string and assigns it to the containerName field.
// ContainerName:  Specify the name of the target container, if not set, use the component name
func (o *PatchParams) SetContainerName(v string) *PatchParams {
	o.ContainerName = &v
	return o
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *PatchParams) GetEnv() map[string]string {
	if o == nil || utils.IsNil(o.Env) {
		var ret map[string]string
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetEnvOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *PatchParams) HasEnv() bool {
	if o != nil && !utils.IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]string and assigns it to the env field.
// Env:  Specify the  environment variables to merge, if key already existing, override its value
func (o *PatchParams) SetEnv(v map[string]string) *PatchParams {
	o.Env = &v
	return o
}

// GetReplace returns the Replace field value if set, zero value otherwise.
func (o *PatchParams) GetReplace() bool {
	if o == nil || utils.IsNil(o.Replace) {
		var ret bool
		return ret
	}
	return *o.Replace
}

// GetReplaceOk returns a tuple with the Replace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetReplaceOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Replace) {
		return nil, false
	}
	return o.Replace, true
}

// HasReplace returns a boolean if a field has been set.
func (o *PatchParams) HasReplace() bool {
	if o != nil && !utils.IsNil(o.Replace) {
		return true
	}

	return false
}

// SetReplace gets a reference to the given bool and assigns it to the replace field.
// Replace:  Specify if replacing the whole environment settings for the container
func (o *PatchParams) SetReplace(v bool) *PatchParams {
	o.Replace = &v
	return o
}

// GetUnset returns the Unset field value if set, zero value otherwise.
func (o *PatchParams) GetUnset() []string {
	if o == nil || utils.IsNil(o.Unset) {
		var ret []string
		return ret
	}
	return o.Unset
}

// GetUnsetOk returns a tuple with the Unset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetUnsetOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Unset) {
		return nil, false
	}
	return o.Unset, true
}

// HasUnset returns a boolean if a field has been set.
func (o *PatchParams) HasUnset() bool {
	if o != nil && !utils.IsNil(o.Unset) {
		return true
	}

	return false
}

// SetUnset gets a reference to the given []string and assigns it to the unset field.
// Unset:  Specify which existing environment variables to unset
func (o *PatchParams) SetUnset(v []string) *PatchParams {
	o.Unset = v
	return o
}

func (o PatchParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ContainerName) {
		toSerialize["containerName"] = o.ContainerName
	}
	if !utils.IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !utils.IsNil(o.Replace) {
		toSerialize["replace"] = o.Replace
	}
	if !utils.IsNil(o.Unset) {
		toSerialize["unset"] = o.Unset
	}
	return toSerialize, nil
}

type NullablePatchParams struct {
	value *PatchParams
	isSet bool
}

func (v NullablePatchParams) Get() *PatchParams {
	return v.value
}

func (v *NullablePatchParams) Set(val *PatchParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchParams(val *PatchParams) *NullablePatchParams {
	return &NullablePatchParams{value: val, isSet: true}
}

func (v NullablePatchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
