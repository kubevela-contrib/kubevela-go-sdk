/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package json_patch

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the JsonPatchSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &JsonPatchSpec{}

// JsonPatchSpec struct for JsonPatchSpec
type JsonPatchSpec struct {
	Operations []map[string]interface{} `json:"operations"`
}

// NewJsonPatchSpecWith instantiates a new JsonPatchSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewJsonPatchSpecWith(operations []map[string]interface{}) *JsonPatchSpec {
	this := JsonPatchSpec{}
	this.Operations = operations
	return &this
}

// NewJsonPatchSpecWithDefault instantiates a new JsonPatchSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonPatchSpecWithDefault() *JsonPatchSpec {
	this := JsonPatchSpec{}
	return &this
}

// NewJsonPatchSpec is short for NewJsonPatchSpecWithDefault which instantiates a new JsonPatchSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonPatchSpec() *JsonPatchSpec {
	return NewJsonPatchSpecWithDefault()
}

// NewJsonPatchSpecEmpty instantiates a new JsonPatchSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewJsonPatchSpecEmpty() *JsonPatchSpec {
	this := JsonPatchSpec{}
	return &this
}

// NewJsonPatchSpecs converts a list JsonPatchSpec pointers to objects.
// This is helpful when the SetJsonPatchSpec requires a list of objects
func NewJsonPatchSpecList(ps ...*JsonPatchSpec) []JsonPatchSpec {
	objs := []JsonPatchSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this JsonPatchSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *JSONPatchTrait) Validate() error {
	if o.Properties.Operations == nil {
		return errors.New("Operations in JsonPatchSpec must be set")
	}
	// validate all nested properties
	return nil
}

// GetOperations returns the Operations field value
func (o *JSONPatchTrait) GetOperations() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Properties.Operations
}

// GetOperationsOk returns a tuple with the Operations field value
// and a boolean to check if the value has been set.
func (o *JSONPatchTrait) GetOperationsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Operations, true
}

// SetOperations sets field value
func (o *JSONPatchTrait) SetOperations(v []map[string]interface{}) *JSONPatchTrait {
	o.Properties.Operations = v
	return o
}

func (o JsonPatchSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonPatchSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operations"] = o.Operations
	return toSerialize, nil
}

type NullableJsonPatchSpec struct {
	value *JsonPatchSpec
	isSet bool
}

func (v *NullableJsonPatchSpec) Get() *JsonPatchSpec {
	return v.value
}

func (v *NullableJsonPatchSpec) Set(val *JsonPatchSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableJsonPatchSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonPatchSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonPatchSpec(val *JsonPatchSpec) *NullableJsonPatchSpec {
	return &NullableJsonPatchSpec{value: val, isSet: true}
}

func (v NullableJsonPatchSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonPatchSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const JsonPatchType = "json-patch"

func init() {
	sdkcommon.RegisterTrait(JsonPatchType, FromTrait)
}

type JSONPatchTrait struct {
	Base       apis.TraitBase
	Properties JsonPatchSpec
}

func JsonPatch() *JSONPatchTrait {
	j := &JSONPatchTrait{Base: apis.TraitBase{}}
	return j
}

func (j *JSONPatchTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(j.Properties),
		Type:       JsonPatchType,
	}
	return res
}

func (j *JSONPatchTrait) FromTrait(from common.ApplicationTrait) (*JSONPatchTrait, error) {
	var properties JsonPatchSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	j.Base.Type = JsonPatchType
	j.Properties = properties
	return j, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	j := &JSONPatchTrait{}
	return j.FromTrait(from)
}

func (j *JSONPatchTrait) DefType() string {
	return JsonPatchType
}
