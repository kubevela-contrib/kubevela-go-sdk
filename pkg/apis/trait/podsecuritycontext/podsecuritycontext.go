/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package podsecuritycontext

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the PodsecuritycontextSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PodsecuritycontextSpec{}

// PodsecuritycontextSpec struct for PodsecuritycontextSpec
type PodsecuritycontextSpec struct {
	AppArmorProfile *AppArmorProfile `json:"appArmorProfile,omitempty"`
	FsGroup         *int32           `json:"fsGroup,omitempty"`
	RunAsGroup      *int32           `json:"runAsGroup,omitempty"`
	// Specify if the container runs as a non-root user
	RunAsNonRoot *bool `json:"runAsNonRoot"`
	// Specify the UID to run the entrypoint of the container process
	RunAsUser      *int32          `json:"runAsUser,omitempty"`
	SeccompProfile *SeccompProfile `json:"seccompProfile,omitempty"`
}

// NewPodsecuritycontextSpecWith instantiates a new PodsecuritycontextSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPodsecuritycontextSpecWith(runAsNonRoot bool) *PodsecuritycontextSpec {
	this := PodsecuritycontextSpec{}
	this.RunAsNonRoot = &runAsNonRoot
	return &this
}

// NewPodsecuritycontextSpecWithDefault instantiates a new PodsecuritycontextSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodsecuritycontextSpecWithDefault() *PodsecuritycontextSpec {
	this := PodsecuritycontextSpec{}
	var runAsNonRoot bool = true
	this.RunAsNonRoot = &runAsNonRoot
	return &this
}

// NewPodsecuritycontextSpec is short for NewPodsecuritycontextSpecWithDefault which instantiates a new PodsecuritycontextSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodsecuritycontextSpec() *PodsecuritycontextSpec {
	return NewPodsecuritycontextSpecWithDefault()
}

// NewPodsecuritycontextSpecEmpty instantiates a new PodsecuritycontextSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewPodsecuritycontextSpecEmpty() *PodsecuritycontextSpec {
	this := PodsecuritycontextSpec{}
	return &this
}

// NewPodsecuritycontextSpecs converts a list PodsecuritycontextSpec pointers to objects.
// This is helpful when the SetPodsecuritycontextSpec requires a list of objects
func NewPodsecuritycontextSpecList(ps ...*PodsecuritycontextSpec) []PodsecuritycontextSpec {
	objs := []PodsecuritycontextSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this PodsecuritycontextSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *PodsecuritycontextTrait) Validate() error {
	if o.Properties.RunAsNonRoot == nil {
		return errors.New("RunAsNonRoot in PodsecuritycontextSpec must be set")
	}
	// validate all nested properties
	if o.Properties.AppArmorProfile != nil {
		if err := o.Properties.AppArmorProfile.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.SeccompProfile != nil {
		if err := o.Properties.SeccompProfile.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetAppArmorProfile returns the AppArmorProfile field value if set, zero value otherwise.
func (o *PodsecuritycontextTrait) GetAppArmorProfile() AppArmorProfile {
	if o == nil || utils.IsNil(o.Properties.AppArmorProfile) {
		var ret AppArmorProfile
		return ret
	}
	return *o.Properties.AppArmorProfile
}

// GetAppArmorProfileOk returns a tuple with the AppArmorProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodsecuritycontextTrait) GetAppArmorProfileOk() (*AppArmorProfile, bool) {
	if o == nil || utils.IsNil(o.Properties.AppArmorProfile) {
		return nil, false
	}
	return o.Properties.AppArmorProfile, true
}

// HasAppArmorProfile returns a boolean if a field has been set.
func (o *PodsecuritycontextTrait) HasAppArmorProfile() bool {
	if o != nil && !utils.IsNil(o.Properties.AppArmorProfile) {
		return true
	}

	return false
}

// SetAppArmorProfile gets a reference to the given AppArmorProfile and assigns it to the appArmorProfile field.
// AppArmorProfile:
func (o *PodsecuritycontextTrait) SetAppArmorProfile(v AppArmorProfile) *PodsecuritycontextTrait {
	o.Properties.AppArmorProfile = &v
	return o
}

// GetFsGroup returns the FsGroup field value if set, zero value otherwise.
func (o *PodsecuritycontextTrait) GetFsGroup() int32 {
	if o == nil || utils.IsNil(o.Properties.FsGroup) {
		var ret int32
		return ret
	}
	return *o.Properties.FsGroup
}

// GetFsGroupOk returns a tuple with the FsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodsecuritycontextTrait) GetFsGroupOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.FsGroup) {
		return nil, false
	}
	return o.Properties.FsGroup, true
}

// HasFsGroup returns a boolean if a field has been set.
func (o *PodsecuritycontextTrait) HasFsGroup() bool {
	if o != nil && !utils.IsNil(o.Properties.FsGroup) {
		return true
	}

	return false
}

// SetFsGroup gets a reference to the given int32 and assigns it to the fsGroup field.
// FsGroup:
func (o *PodsecuritycontextTrait) SetFsGroup(v int32) *PodsecuritycontextTrait {
	o.Properties.FsGroup = &v
	return o
}

// GetRunAsGroup returns the RunAsGroup field value if set, zero value otherwise.
func (o *PodsecuritycontextTrait) GetRunAsGroup() int32 {
	if o == nil || utils.IsNil(o.Properties.RunAsGroup) {
		var ret int32
		return ret
	}
	return *o.Properties.RunAsGroup
}

// GetRunAsGroupOk returns a tuple with the RunAsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodsecuritycontextTrait) GetRunAsGroupOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.RunAsGroup) {
		return nil, false
	}
	return o.Properties.RunAsGroup, true
}

// HasRunAsGroup returns a boolean if a field has been set.
func (o *PodsecuritycontextTrait) HasRunAsGroup() bool {
	if o != nil && !utils.IsNil(o.Properties.RunAsGroup) {
		return true
	}

	return false
}

// SetRunAsGroup gets a reference to the given int32 and assigns it to the runAsGroup field.
// RunAsGroup:
func (o *PodsecuritycontextTrait) SetRunAsGroup(v int32) *PodsecuritycontextTrait {
	o.Properties.RunAsGroup = &v
	return o
}

// GetRunAsNonRoot returns the RunAsNonRoot field value
func (o *PodsecuritycontextTrait) GetRunAsNonRoot() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Properties.RunAsNonRoot
}

// GetRunAsNonRootOk returns a tuple with the RunAsNonRoot field value
// and a boolean to check if the value has been set.
func (o *PodsecuritycontextTrait) GetRunAsNonRootOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.RunAsNonRoot, true
}

// SetRunAsNonRoot sets field value
func (o *PodsecuritycontextTrait) SetRunAsNonRoot(v bool) *PodsecuritycontextTrait {
	o.Properties.RunAsNonRoot = &v
	return o
}

// GetRunAsUser returns the RunAsUser field value if set, zero value otherwise.
func (o *PodsecuritycontextTrait) GetRunAsUser() int32 {
	if o == nil || utils.IsNil(o.Properties.RunAsUser) {
		var ret int32
		return ret
	}
	return *o.Properties.RunAsUser
}

// GetRunAsUserOk returns a tuple with the RunAsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodsecuritycontextTrait) GetRunAsUserOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.RunAsUser) {
		return nil, false
	}
	return o.Properties.RunAsUser, true
}

// HasRunAsUser returns a boolean if a field has been set.
func (o *PodsecuritycontextTrait) HasRunAsUser() bool {
	if o != nil && !utils.IsNil(o.Properties.RunAsUser) {
		return true
	}

	return false
}

// SetRunAsUser gets a reference to the given int32 and assigns it to the runAsUser field.
// RunAsUser:  Specify the UID to run the entrypoint of the container process
func (o *PodsecuritycontextTrait) SetRunAsUser(v int32) *PodsecuritycontextTrait {
	o.Properties.RunAsUser = &v
	return o
}

// GetSeccompProfile returns the SeccompProfile field value if set, zero value otherwise.
func (o *PodsecuritycontextTrait) GetSeccompProfile() SeccompProfile {
	if o == nil || utils.IsNil(o.Properties.SeccompProfile) {
		var ret SeccompProfile
		return ret
	}
	return *o.Properties.SeccompProfile
}

// GetSeccompProfileOk returns a tuple with the SeccompProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodsecuritycontextTrait) GetSeccompProfileOk() (*SeccompProfile, bool) {
	if o == nil || utils.IsNil(o.Properties.SeccompProfile) {
		return nil, false
	}
	return o.Properties.SeccompProfile, true
}

// HasSeccompProfile returns a boolean if a field has been set.
func (o *PodsecuritycontextTrait) HasSeccompProfile() bool {
	if o != nil && !utils.IsNil(o.Properties.SeccompProfile) {
		return true
	}

	return false
}

// SetSeccompProfile gets a reference to the given SeccompProfile and assigns it to the seccompProfile field.
// SeccompProfile:
func (o *PodsecuritycontextTrait) SetSeccompProfile(v SeccompProfile) *PodsecuritycontextTrait {
	o.Properties.SeccompProfile = &v
	return o
}

func (o PodsecuritycontextSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PodsecuritycontextSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AppArmorProfile) {
		toSerialize["appArmorProfile"] = o.AppArmorProfile
	}
	if !utils.IsNil(o.FsGroup) {
		toSerialize["fsGroup"] = o.FsGroup
	}
	if !utils.IsNil(o.RunAsGroup) {
		toSerialize["runAsGroup"] = o.RunAsGroup
	}
	toSerialize["runAsNonRoot"] = o.RunAsNonRoot
	if !utils.IsNil(o.RunAsUser) {
		toSerialize["runAsUser"] = o.RunAsUser
	}
	if !utils.IsNil(o.SeccompProfile) {
		toSerialize["seccompProfile"] = o.SeccompProfile
	}
	return toSerialize, nil
}

type NullablePodsecuritycontextSpec struct {
	value *PodsecuritycontextSpec
	isSet bool
}

func (v *NullablePodsecuritycontextSpec) Get() *PodsecuritycontextSpec {
	return v.value
}

func (v *NullablePodsecuritycontextSpec) Set(val *PodsecuritycontextSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullablePodsecuritycontextSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePodsecuritycontextSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePodsecuritycontextSpec(val *PodsecuritycontextSpec) *NullablePodsecuritycontextSpec {
	return &NullablePodsecuritycontextSpec{value: val, isSet: true}
}

func (v NullablePodsecuritycontextSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePodsecuritycontextSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const PodsecuritycontextType = "podsecuritycontext"

func init() {
	sdkcommon.RegisterTrait(PodsecuritycontextType, FromTrait)
}

type PodsecuritycontextTrait struct {
	Base       apis.TraitBase
	Properties PodsecuritycontextSpec
}

func Podsecuritycontext() *PodsecuritycontextTrait {
	p := &PodsecuritycontextTrait{Base: apis.TraitBase{}}
	return p
}

func (p *PodsecuritycontextTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(p.Properties),
		Type:       PodsecuritycontextType,
	}
	return res
}

func (p *PodsecuritycontextTrait) FromTrait(from common.ApplicationTrait) (*PodsecuritycontextTrait, error) {
	var properties PodsecuritycontextSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	p.Base.Type = PodsecuritycontextType
	p.Properties = properties
	return p, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	p := &PodsecuritycontextTrait{}
	return p.FromTrait(from)
}

func (p *PodsecuritycontextTrait) DefType() string {
	return PodsecuritycontextType
}
