/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resource

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Limits type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Limits{}

// Limits Specify the resources in limits
type Limits struct {
	// Specify the amount of cpu for limits
	Cpu *float32 `json:"cpu,omitempty"`
	// Specify the amount of memory for limits
	Memory *string `json:"memory,omitempty"`
}

// NewLimitsWith instantiates a new Limits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimitsWith() *Limits {
	this := Limits{}
	var cpu float32 = 1
	this.Cpu = &cpu
	var memory string = "2048Mi"
	this.Memory = &memory
	return &this
}

// NewLimits instantiates a new Limits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimits() *Limits {
	this := Limits{}
	var cpu float32 = 1
	this.Cpu = &cpu
	var memory string = "2048Mi"
	this.Memory = &memory
	return &this
}

// NewLimitss converts a list Limits pointers to objects.
// This is helpful when the SetLimits requires a list of objects
func NewLimitsList(ps ...*Limits) []Limits {
	objs := []Limits{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *Limits) GetCpu() float32 {
	if o == nil || utils.IsNil(o.Cpu) {
		var ret float32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Limits) GetCpuOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *Limits) HasCpu() bool {
	if o != nil && !utils.IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given float32 and assigns it to the cpu field.
// Cpu:  Specify the amount of cpu for limits
func (o *Limits) SetCpu(v float32) *Limits {
	o.Cpu = &v
	return o
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Limits) GetMemory() string {
	if o == nil || utils.IsNil(o.Memory) {
		var ret string
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Limits) GetMemoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Limits) HasMemory() bool {
	if o != nil && !utils.IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given string and assigns it to the memory field.
// Memory:  Specify the amount of memory for limits
func (o *Limits) SetMemory(v string) *Limits {
	o.Memory = &v
	return o
}

func (o Limits) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Limits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !utils.IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	return toSerialize, nil
}

type NullableLimits struct {
	value *Limits
	isSet bool
}

func (v NullableLimits) Get() *Limits {
	return v.value
}

func (v *NullableLimits) Set(val *Limits) {
	v.value = val
	v.isSet = true
}

func (v NullableLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimits(val *Limits) *NullableLimits {
	return &NullableLimits{value: val, isSet: true}
}

func (v NullableLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
