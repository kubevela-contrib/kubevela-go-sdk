/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expose

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the ExposeSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ExposeSpec{}

// ExposeSpec struct for ExposeSpec
type ExposeSpec struct {
	// Specify the annotaions of the exposed service
	Annotations *map[string]string `json:"annotations,omitempty"`
	// Specify the exposion ports
	Port []int32 `json:"port,omitempty"`
	// Specify what kind of Service you want. options: \"ClusterIP\",\"NodePort\",\"LoadBalancer\",\"ExternalName\"
	Type *string `json:"type,omitempty"`
}

// NewExposeSpecWith instantiates a new ExposeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExposeSpecWith() *ExposeSpec {
	this := ExposeSpec{}
	var type_ string = "ClusterIP"
	this.Type = &type_
	return &this
}

// NewExposeSpec instantiates a new ExposeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExposeSpec() *ExposeSpec {
	this := ExposeSpec{}
	var type_ string = "ClusterIP"
	this.Type = &type_
	return &this
}

// NewExposeSpecs converts a list ExposeSpec pointers to objects.
// This is helpful when the SetExposeSpec requires a list of objects
func NewExposeSpecList(ps ...*ExposeSpec) []ExposeSpec {
	objs := []ExposeSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *ExposeTrait) GetAnnotations() map[string]string {
	if o == nil || utils.IsNil(o.Properties.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Properties.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExposeTrait) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || utils.IsNil(o.Properties.Annotations) {
		return nil, false
	}
	return o.Properties.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *ExposeTrait) HasAnnotations() bool {
	if o != nil && !utils.IsNil(o.Properties.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the annotations field.
// Annotations:  Specify the annotaions of the exposed service
func (o *ExposeTrait) SetAnnotations(v map[string]string) *ExposeTrait {
	o.Properties.Annotations = &v
	return o
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ExposeTrait) GetPort() []int32 {
	if o == nil || utils.IsNil(o.Properties.Port) {
		var ret []int32
		return ret
	}
	return o.Properties.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExposeTrait) GetPortOk() ([]int32, bool) {
	if o == nil || utils.IsNil(o.Properties.Port) {
		return nil, false
	}
	return o.Properties.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ExposeTrait) HasPort() bool {
	if o != nil && !utils.IsNil(o.Properties.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given []int32 and assigns it to the port field.
// Port:  Specify the exposion ports
func (o *ExposeTrait) SetPort(v []int32) *ExposeTrait {
	o.Properties.Port = v
	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExposeTrait) GetType() string {
	if o == nil || utils.IsNil(o.Properties.Type) {
		var ret string
		return ret
	}
	return *o.Properties.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExposeTrait) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Type) {
		return nil, false
	}
	return o.Properties.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExposeTrait) HasType() bool {
	if o != nil && !utils.IsNil(o.Properties.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the type_ field.
// Type:  Specify what kind of Service you want. options: \"ClusterIP\",\"NodePort\",\"LoadBalancer\",\"ExternalName\"
func (o *ExposeTrait) SetType(v string) *ExposeTrait {
	o.Properties.Type = &v
	return o
}

func (o ExposeSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExposeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !utils.IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableExposeSpec struct {
	value *ExposeSpec
	isSet bool
}

func (v NullableExposeSpec) Get() *ExposeSpec {
	return v.value
}

func (v *NullableExposeSpec) Set(val *ExposeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableExposeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableExposeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExposeSpec(val *ExposeSpec) *NullableExposeSpec {
	return &NullableExposeSpec{value: val, isSet: true}
}

func (v NullableExposeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExposeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const ExposeType = "expose"

func init() {
	sdkcommon.RegisterTrait(ExposeType, FromTrait)
}

type ExposeTrait struct {
	Base       apis.TraitBase
	Properties ExposeSpec
}

func Expose() *ExposeTrait {
	e := &ExposeTrait{Base: apis.TraitBase{}}
	return e
}

func (e *ExposeTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(e.Properties),
		Type:       ExposeType,
	}
	return res
}

func (e *ExposeTrait) FromTrait(from common.ApplicationTrait) (*ExposeTrait, error) {
	var properties ExposeSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	e.Base.Type = ExposeType
	e.Properties = properties
	return e, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	e := &ExposeTrait{}
	return e.FromTrait(from)
}

func (e *ExposeTrait) DefType() string {
	return ExposeType
}
