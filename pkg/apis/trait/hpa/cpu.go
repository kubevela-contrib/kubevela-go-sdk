/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hpa

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Cpu type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Cpu{}

// Cpu struct for Cpu
type Cpu struct {
	// Specify resource metrics in terms of percentage(\"Utilization\") or direct value(\"AverageValue\")
	Type *string `json:"type"`
	// Specify the value of CPU utilization or averageValue
	Value *int32 `json:"value"`
}

// NewCpuWith instantiates a new Cpu object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewCpuWith(type_ string, value int32) *Cpu {
	this := Cpu{}
	this.Type = &type_
	this.Value = &value
	return &this
}

// NewCpuWithDefault instantiates a new Cpu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCpuWithDefault() *Cpu {
	this := Cpu{}
	var type_ string = "Utilization"
	this.Type = &type_
	var value int32 = 50
	this.Value = &value
	return &this
}

// NewCpu is short for NewCpuWithDefault which instantiates a new Cpu object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCpu() *Cpu {
	return NewCpuWithDefault()
}

// NewCpuEmpty instantiates a new Cpu object with no properties set.
// This constructor will not assign any default values to properties.
func NewCpuEmpty() *Cpu {
	this := Cpu{}
	return &this
}

// NewCpus converts a list Cpu pointers to objects.
// This is helpful when the SetCpu requires a list of objects
func NewCpuList(ps ...*Cpu) []Cpu {
	objs := []Cpu{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Cpu
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Cpu) Validate() error {
	if o.Type == nil {
		return errors.New("Type in Cpu must be set")
	}
	if o.Value == nil {
		return errors.New("Value in Cpu must be set")
	}
	// validate all nested properties
	return nil
}

// GetType returns the Type field value
func (o *Cpu) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Cpu) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Cpu) SetType(v string) *Cpu {
	o.Type = &v
	return o
}

// GetValue returns the Value field value
func (o *Cpu) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return *o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Cpu) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *Cpu) SetValue(v int32) *Cpu {
	o.Value = &v
	return o
}

func (o Cpu) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cpu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableCpu struct {
	value *Cpu
	isSet bool
}

func (v *NullableCpu) Get() *Cpu {
	return v.value
}

func (v *NullableCpu) Set(val *Cpu) {
	v.value = val
	v.isSet = true
}

func (v *NullableCpu) IsSet() bool {
	return v.isSet
}

func (v *NullableCpu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpu(val *Cpu) *NullableCpu {
	return &NullableCpu{value: val, isSet: true}
}

func (v NullableCpu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
