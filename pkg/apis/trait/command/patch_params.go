/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the PatchParams type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PatchParams{}

// PatchParams struct for PatchParams
type PatchParams struct {
	// Specify the args to add in the target container, existing args will be kept, cannot be used with `args`
	AddArgs []string `json:"addArgs,omitempty"`
	// Specify the args to use in the target container, if set, it will override existing args
	Args []string `json:"args,omitempty"`
	// Specify the command to use in the target container, if not set, it will not be changed
	Command []string `json:"command,omitempty"`
	// Specify the name of the target container, if not set, use the component name
	ContainerName *string `json:"containerName,omitempty"`
	// Specify the existing args to delete in the target container, cannot be used with `args`
	DelArgs []string `json:"delArgs,omitempty"`
}

// NewPatchParamsWith instantiates a new PatchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchParamsWith() *PatchParams {
	this := PatchParams{}
	var containerName string = ""
	this.ContainerName = &containerName
	return &this
}

// NewPatchParams instantiates a new PatchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchParams() *PatchParams {
	this := PatchParams{}
	var containerName string = ""
	this.ContainerName = &containerName
	return &this
}

// NewPatchParamss converts a list PatchParams pointers to objects.
// This is helpful when the SetPatchParams requires a list of objects
func NewPatchParamsList(ps ...*PatchParams) []PatchParams {
	objs := []PatchParams{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetAddArgs returns the AddArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchParams) GetAddArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AddArgs
}

// GetAddArgsOk returns a tuple with the AddArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchParams) GetAddArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AddArgs) {
		return nil, false
	}
	return o.AddArgs, true
}

// HasAddArgs returns a boolean if a field has been set.
func (o *PatchParams) HasAddArgs() bool {
	if o != nil && utils.IsNil(o.AddArgs) {
		return true
	}

	return false
}

// SetAddArgs gets a reference to the given []string and assigns it to the addArgs field.
// AddArgs:  Specify the args to add in the target container, existing args will be kept, cannot be used with `args`
func (o *PatchParams) SetAddArgs(v []string) *PatchParams {
	o.AddArgs = v
	return o
}

// GetArgs returns the Args field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchParams) GetArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchParams) GetArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *PatchParams) HasArgs() bool {
	if o != nil && utils.IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the args field.
// Args:  Specify the args to use in the target container, if set, it will override existing args
func (o *PatchParams) SetArgs(v []string) *PatchParams {
	o.Args = v
	return o
}

// GetCommand returns the Command field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchParams) GetCommand() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchParams) GetCommandOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *PatchParams) HasCommand() bool {
	if o != nil && utils.IsNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given []string and assigns it to the command field.
// Command:  Specify the command to use in the target container, if not set, it will not be changed
func (o *PatchParams) SetCommand(v []string) *PatchParams {
	o.Command = v
	return o
}

// GetContainerName returns the ContainerName field value if set, zero value otherwise.
func (o *PatchParams) GetContainerName() string {
	if o == nil || utils.IsNil(o.ContainerName) {
		var ret string
		return ret
	}
	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetContainerNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ContainerName) {
		return nil, false
	}
	return o.ContainerName, true
}

// HasContainerName returns a boolean if a field has been set.
func (o *PatchParams) HasContainerName() bool {
	if o != nil && !utils.IsNil(o.ContainerName) {
		return true
	}

	return false
}

// SetContainerName gets a reference to the given string and assigns it to the containerName field.
// ContainerName:  Specify the name of the target container, if not set, use the component name
func (o *PatchParams) SetContainerName(v string) *PatchParams {
	o.ContainerName = &v
	return o
}

// GetDelArgs returns the DelArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchParams) GetDelArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DelArgs
}

// GetDelArgsOk returns a tuple with the DelArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchParams) GetDelArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.DelArgs) {
		return nil, false
	}
	return o.DelArgs, true
}

// HasDelArgs returns a boolean if a field has been set.
func (o *PatchParams) HasDelArgs() bool {
	if o != nil && utils.IsNil(o.DelArgs) {
		return true
	}

	return false
}

// SetDelArgs gets a reference to the given []string and assigns it to the delArgs field.
// DelArgs:  Specify the existing args to delete in the target container, cannot be used with `args`
func (o *PatchParams) SetDelArgs(v []string) *PatchParams {
	o.DelArgs = v
	return o
}

func (o PatchParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AddArgs != nil {
		toSerialize["addArgs"] = o.AddArgs
	}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if !utils.IsNil(o.ContainerName) {
		toSerialize["containerName"] = o.ContainerName
	}
	if o.DelArgs != nil {
		toSerialize["delArgs"] = o.DelArgs
	}
	return toSerialize, nil
}

type NullablePatchParams struct {
	value *PatchParams
	isSet bool
}

func (v NullablePatchParams) Get() *PatchParams {
	return v.value
}

func (v *NullablePatchParams) Set(val *PatchParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchParams(val *PatchParams) *NullablePatchParams {
	return &NullablePatchParams{value: val, isSet: true}
}

func (v NullablePatchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
