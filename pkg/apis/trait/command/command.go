/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"fmt"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// CommandSpec - struct for CommandSpec
type CommandSpec struct {
	CommandSpecOneOf *CommandSpecOneOf
	PatchParams      *PatchParams
}

// CommandSpecOneOfAsCommandSpec is a convenience function that returns CommandSpecOneOf wrapped in CommandSpec
func CommandSpecOneOfAsCommandSpec(v *CommandSpecOneOf) CommandSpec {
	return CommandSpec{
		CommandSpecOneOf: v,
	}
}

// PatchParamsAsCommandSpec is a convenience function that returns PatchParams wrapped in CommandSpec
func PatchParamsAsCommandSpec(v *PatchParams) CommandSpec {
	return CommandSpec{
		PatchParams: v,
	}
}

// Validate validates this CommandSpec
func (o *CommandTrait) Validate() error {
	if o.Properties.CommandSpecOneOf != nil {
		return nil
	}

	if o.Properties.PatchParams != nil {
		return nil
	}

	return fmt.Errorf("No oneOf schemas were matched in CommandSpec")
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CommandSpec) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CommandSpecOneOf
	err = utils.NewStrictDecoder(data).Decode(&dst.CommandSpecOneOf)
	if err == nil {
		jsonCommandSpecOneOf, _ := json.Marshal(dst.CommandSpecOneOf)
		if string(jsonCommandSpecOneOf) == "{}" { // empty struct
			dst.CommandSpecOneOf = nil
		} else {
			match++
		}
	} else {
		dst.CommandSpecOneOf = nil
	}

	// try to unmarshal data into PatchParams
	err = utils.NewStrictDecoder(data).Decode(&dst.PatchParams)
	if err == nil {
		jsonPatchParams, _ := json.Marshal(dst.PatchParams)
		if string(jsonPatchParams) == "{}" { // empty struct
			dst.PatchParams = nil
		} else {
			match++
		}
	} else {
		dst.PatchParams = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CommandSpecOneOf = nil
		dst.PatchParams = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CommandSpec)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CommandSpec)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CommandSpec) MarshalJSON() ([]byte, error) {
	if src.CommandSpecOneOf != nil {
		return json.Marshal(&src.CommandSpecOneOf)
	}

	if src.PatchParams != nil {
		return json.Marshal(&src.PatchParams)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CommandSpec) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CommandSpecOneOf != nil {
		return obj.CommandSpecOneOf
	}

	if obj.PatchParams != nil {
		return obj.PatchParams
	}

	// all schemas are nil
	return nil
}

type NullableCommandSpec struct {
	value *CommandSpec
	isSet bool
}

func (v *NullableCommandSpec) Get() *CommandSpec {
	return v.value
}

func (v *NullableCommandSpec) Set(val *CommandSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableCommandSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandSpec(val *CommandSpec) *NullableCommandSpec {
	return &NullableCommandSpec{value: val, isSet: true}
}

func (v NullableCommandSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const CommandType = "command"

func init() {
	sdkcommon.RegisterTrait(CommandType, FromTrait)
}

type CommandTrait struct {
	Base       apis.TraitBase
	Properties CommandSpec
}

func Command() *CommandTrait {
	c := &CommandTrait{Base: apis.TraitBase{}}
	return c
}

func (c *CommandTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(c.Properties),
		Type:       CommandType,
	}
	return res
}

func (c *CommandTrait) FromTrait(from common.ApplicationTrait) (*CommandTrait, error) {
	var properties CommandSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	c.Base.Type = CommandType
	c.Properties = properties
	return c, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	c := &CommandTrait{}
	return c.FromTrait(from)
}

func (c *CommandTrait) DefType() string {
	return CommandType
}
