/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package container_ports

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the PatchParams type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PatchParams{}

// PatchParams struct for PatchParams
type PatchParams struct {
	// Specify the name of the target container, if not set, use the component name
	ContainerName *string `json:"containerName"`
	// Specify ports you want customer traffic sent to
	Ports []Ports `json:"ports"`
}

// NewPatchParamsWith instantiates a new PatchParams object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPatchParamsWith(containerName string, ports []Ports) *PatchParams {
	this := PatchParams{}
	this.ContainerName = &containerName
	this.Ports = ports
	return &this
}

// NewPatchParamsWithDefault instantiates a new PatchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchParamsWithDefault() *PatchParams {
	this := PatchParams{}
	var containerName string = ""
	this.ContainerName = &containerName
	return &this
}

// NewPatchParams is short for NewPatchParamsWithDefault which instantiates a new PatchParams object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchParams() *PatchParams {
	return NewPatchParamsWithDefault()
}

// NewPatchParamsEmpty instantiates a new PatchParams object with no properties set.
// This constructor will not assign any default values to properties.
func NewPatchParamsEmpty() *PatchParams {
	this := PatchParams{}
	return &this
}

// NewPatchParamss converts a list PatchParams pointers to objects.
// This is helpful when the SetPatchParams requires a list of objects
func NewPatchParamsList(ps ...*PatchParams) []PatchParams {
	objs := []PatchParams{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this PatchParams
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *PatchParams) Validate() error {
	if o.ContainerName == nil {
		return errors.New("ContainerName in PatchParams must be set")
	}
	if o.Ports == nil {
		return errors.New("Ports in PatchParams must be set")
	}
	// validate all nested properties
	return nil
}

// GetContainerName returns the ContainerName field value
func (o *PatchParams) GetContainerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContainerName, true
}

// SetContainerName sets field value
func (o *PatchParams) SetContainerName(v string) *PatchParams {
	o.ContainerName = &v
	return o
}

// GetPorts returns the Ports field value
func (o *PatchParams) GetPorts() []Ports {
	if o == nil {
		var ret []Ports
		return ret
	}

	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetPortsOk() ([]Ports, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ports, true
}

// SetPorts sets field value
func (o *PatchParams) SetPorts(v []Ports) *PatchParams {
	o.Ports = v
	return o
}

func (o PatchParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["containerName"] = o.ContainerName
	toSerialize["ports"] = o.Ports
	return toSerialize, nil
}

type NullablePatchParams struct {
	value *PatchParams
	isSet bool
}

func (v *NullablePatchParams) Get() *PatchParams {
	return v.value
}

func (v *NullablePatchParams) Set(val *PatchParams) {
	v.value = val
	v.isSet = true
}

func (v *NullablePatchParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchParams(val *PatchParams) *NullablePatchParams {
	return &NullablePatchParams{value: val, isSet: true}
}

func (v NullablePatchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
