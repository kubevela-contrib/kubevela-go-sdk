/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nocalhost

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Debug type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Debug{}

// Debug struct for Debug
type Debug struct {
	RemoteDebugPort *int32 `json:"remoteDebugPort,omitempty"`
}

// NewDebugWith instantiates a new Debug object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewDebugWith() *Debug {
	this := Debug{}
	return &this
}

// NewDebugWithDefault instantiates a new Debug object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDebugWithDefault() *Debug {
	this := Debug{}
	return &this
}

// NewDebug is short for NewDebugWithDefault which instantiates a new Debug object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDebug() *Debug {
	return NewDebugWithDefault()
}

// NewDebugEmpty instantiates a new Debug object with no properties set.
// This constructor will not assign any default values to properties.
func NewDebugEmpty() *Debug {
	this := Debug{}
	return &this
}

// NewDebugs converts a list Debug pointers to objects.
// This is helpful when the SetDebug requires a list of objects
func NewDebugList(ps ...*Debug) []Debug {
	objs := []Debug{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Debug
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Debug) Validate() error {
	// validate all nested properties
	return nil
}

// GetRemoteDebugPort returns the RemoteDebugPort field value if set, zero value otherwise.
func (o *Debug) GetRemoteDebugPort() int32 {
	if o == nil || utils.IsNil(o.RemoteDebugPort) {
		var ret int32
		return ret
	}
	return *o.RemoteDebugPort
}

// GetRemoteDebugPortOk returns a tuple with the RemoteDebugPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Debug) GetRemoteDebugPortOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RemoteDebugPort) {
		return nil, false
	}
	return o.RemoteDebugPort, true
}

// HasRemoteDebugPort returns a boolean if a field has been set.
func (o *Debug) HasRemoteDebugPort() bool {
	if o != nil && !utils.IsNil(o.RemoteDebugPort) {
		return true
	}

	return false
}

// SetRemoteDebugPort gets a reference to the given int32 and assigns it to the remoteDebugPort field.
// RemoteDebugPort:
func (o *Debug) SetRemoteDebugPort(v int32) *Debug {
	o.RemoteDebugPort = &v
	return o
}

func (o Debug) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Debug) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.RemoteDebugPort) {
		toSerialize["remoteDebugPort"] = o.RemoteDebugPort
	}
	return toSerialize, nil
}

type NullableDebug struct {
	value *Debug
	isSet bool
}

func (v *NullableDebug) Get() *Debug {
	return v.value
}

func (v *NullableDebug) Set(val *Debug) {
	v.value = val
	v.isSet = true
}

func (v *NullableDebug) IsSet() bool {
	return v.isSet
}

func (v *NullableDebug) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDebug(val *Debug) *NullableDebug {
	return &NullableDebug{value: val, isSet: true}
}

func (v NullableDebug) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDebug) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
