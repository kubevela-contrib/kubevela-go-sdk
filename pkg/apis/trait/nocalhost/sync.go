/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nocalhost

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Sync type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Sync{}

// Sync struct for Sync
type Sync struct {
	FilePattern       []string `json:"filePattern"`
	IgnoreFilePattern []string `json:"ignoreFilePattern"`
	Type              *string  `json:"type"`
}

// NewSyncWith instantiates a new Sync object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewSyncWith(filePattern []string, ignoreFilePattern []string, type_ string) *Sync {
	this := Sync{}
	this.FilePattern = filePattern
	this.IgnoreFilePattern = ignoreFilePattern
	this.Type = &type_
	return &this
}

// NewSyncWithDefault instantiates a new Sync object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncWithDefault() *Sync {
	this := Sync{}
	var type_ string = "send"
	this.Type = &type_
	return &this
}

// NewSync is short for NewSyncWithDefault which instantiates a new Sync object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSync() *Sync {
	return NewSyncWithDefault()
}

// NewSyncEmpty instantiates a new Sync object with no properties set.
// This constructor will not assign any default values to properties.
func NewSyncEmpty() *Sync {
	this := Sync{}
	return &this
}

// NewSyncs converts a list Sync pointers to objects.
// This is helpful when the SetSync requires a list of objects
func NewSyncList(ps ...*Sync) []Sync {
	objs := []Sync{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Sync
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Sync) Validate() error {
	if o.FilePattern == nil {
		return errors.New("FilePattern in Sync must be set")
	}
	if o.IgnoreFilePattern == nil {
		return errors.New("IgnoreFilePattern in Sync must be set")
	}
	if o.Type == nil {
		return errors.New("Type in Sync must be set")
	}
	// validate all nested properties
	return nil
}

// GetFilePattern returns the FilePattern field value
func (o *Sync) GetFilePattern() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FilePattern
}

// GetFilePatternOk returns a tuple with the FilePattern field value
// and a boolean to check if the value has been set.
func (o *Sync) GetFilePatternOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilePattern, true
}

// SetFilePattern sets field value
func (o *Sync) SetFilePattern(v []string) *Sync {
	o.FilePattern = v
	return o
}

// GetIgnoreFilePattern returns the IgnoreFilePattern field value
func (o *Sync) GetIgnoreFilePattern() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IgnoreFilePattern
}

// GetIgnoreFilePatternOk returns a tuple with the IgnoreFilePattern field value
// and a boolean to check if the value has been set.
func (o *Sync) GetIgnoreFilePatternOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnoreFilePattern, true
}

// SetIgnoreFilePattern sets field value
func (o *Sync) SetIgnoreFilePattern(v []string) *Sync {
	o.IgnoreFilePattern = v
	return o
}

// GetType returns the Type field value
func (o *Sync) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Sync) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Sync) SetType(v string) *Sync {
	o.Type = &v
	return o
}

func (o Sync) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sync) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filePattern"] = o.FilePattern
	toSerialize["ignoreFilePattern"] = o.IgnoreFilePattern
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableSync struct {
	value *Sync
	isSet bool
}

func (v *NullableSync) Get() *Sync {
	return v.value
}

func (v *NullableSync) Set(val *Sync) {
	v.value = val
	v.isSet = true
}

func (v *NullableSync) IsSet() bool {
	return v.isSet
}

func (v *NullableSync) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSync(val *Sync) *NullableSync {
	return &NullableSync{value: val, isSet: true}
}

func (v NullableSync) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSync) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
