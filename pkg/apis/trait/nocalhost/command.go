/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nocalhost

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Command type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Command{}

// Command struct for Command
type Command struct {
	Debug []string `json:"debug"`
	Run   []string `json:"run"`
}

// NewCommandWith instantiates a new Command object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewCommandWith(debug []string, run []string) *Command {
	this := Command{}
	this.Debug = debug
	this.Run = run
	return &this
}

// NewCommandWithDefault instantiates a new Command object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandWithDefault() *Command {
	this := Command{}
	return &this
}

// NewCommand is short for NewCommandWithDefault which instantiates a new Command object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommand() *Command {
	return NewCommandWithDefault()
}

// NewCommandEmpty instantiates a new Command object with no properties set.
// This constructor will not assign any default values to properties.
func NewCommandEmpty() *Command {
	this := Command{}
	return &this
}

// NewCommands converts a list Command pointers to objects.
// This is helpful when the SetCommand requires a list of objects
func NewCommandList(ps ...*Command) []Command {
	objs := []Command{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Command
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Command) Validate() error {
	if o.Debug == nil {
		return errors.New("Debug in Command must be set")
	}
	if o.Run == nil {
		return errors.New("Run in Command must be set")
	}
	// validate all nested properties
	return nil
}

// GetDebug returns the Debug field value
func (o *Command) GetDebug() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Debug
}

// GetDebugOk returns a tuple with the Debug field value
// and a boolean to check if the value has been set.
func (o *Command) GetDebugOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Debug, true
}

// SetDebug sets field value
func (o *Command) SetDebug(v []string) *Command {
	o.Debug = v
	return o
}

// GetRun returns the Run field value
func (o *Command) GetRun() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Run
}

// GetRunOk returns a tuple with the Run field value
// and a boolean to check if the value has been set.
func (o *Command) GetRunOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Run, true
}

// SetRun sets field value
func (o *Command) SetRun(v []string) *Command {
	o.Run = v
	return o
}

func (o Command) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Command) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["debug"] = o.Debug
	toSerialize["run"] = o.Run
	return toSerialize, nil
}

type NullableCommand struct {
	value *Command
	isSet bool
}

func (v *NullableCommand) Get() *Command {
	return v.value
}

func (v *NullableCommand) Set(val *Command) {
	v.value = val
	v.isSet = true
}

func (v *NullableCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommand(val *Command) *NullableCommand {
	return &NullableCommand{value: val, isSet: true}
}

func (v NullableCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
