/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package labels

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the LabelsSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &LabelsSpec{}

// LabelsSpec struct for LabelsSpec
type LabelsSpec struct {
}

// NewLabelsSpecWith instantiates a new LabelsSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewLabelsSpecWith() *LabelsSpec {
	this := LabelsSpec{}
	return &this
}

// NewLabelsSpecWithDefault instantiates a new LabelsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelsSpecWithDefault() *LabelsSpec {
	this := LabelsSpec{}
	return &this
}

// NewLabelsSpec is short for NewLabelsSpecWithDefault which instantiates a new LabelsSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelsSpec() *LabelsSpec {
	return NewLabelsSpecWithDefault()
}

// NewLabelsSpecEmpty instantiates a new LabelsSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewLabelsSpecEmpty() *LabelsSpec {
	this := LabelsSpec{}
	return &this
}

// NewLabelsSpecs converts a list LabelsSpec pointers to objects.
// This is helpful when the SetLabelsSpec requires a list of objects
func NewLabelsSpecList(ps ...*LabelsSpec) []LabelsSpec {
	objs := []LabelsSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this LabelsSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *LabelsTrait) Validate() error {
	// validate all nested properties
	return nil
}

func (o LabelsSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelsSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableLabelsSpec struct {
	value *LabelsSpec
	isSet bool
}

func (v *NullableLabelsSpec) Get() *LabelsSpec {
	return v.value
}

func (v *NullableLabelsSpec) Set(val *LabelsSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableLabelsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelsSpec(val *LabelsSpec) *NullableLabelsSpec {
	return &NullableLabelsSpec{value: val, isSet: true}
}

func (v NullableLabelsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const LabelsType = "labels"

func init() {
	sdkcommon.RegisterTrait(LabelsType, FromTrait)
}

type LabelsTrait struct {
	Base       apis.TraitBase
	Properties LabelsSpec
}

func Labels() *LabelsTrait {
	l := &LabelsTrait{Base: apis.TraitBase{}}
	return l
}

func (l *LabelsTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(l.Properties),
		Type:       LabelsType,
	}
	return res
}

func (l *LabelsTrait) FromTrait(from common.ApplicationTrait) (*LabelsTrait, error) {
	var properties LabelsSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	l.Base.Type = LabelsType
	l.Properties = properties
	return l, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	l := &LabelsTrait{}
	return l.FromTrait(from)
}

func (l *LabelsTrait) DefType() string {
	return LabelsType
}
