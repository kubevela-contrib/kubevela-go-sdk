/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k8s_update_strategy

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Strategy type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Strategy{}

// Strategy Specify the strategy of update
type Strategy struct {
	RollingStrategy *RollingStrategy `json:"rollingStrategy,omitempty"`
	// Specify the strategy type
	Type *string `json:"type"`
}

// NewStrategyWith instantiates a new Strategy object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewStrategyWith(type_ string) *Strategy {
	this := Strategy{}
	this.Type = &type_
	return &this
}

// NewStrategyWithDefault instantiates a new Strategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrategyWithDefault() *Strategy {
	this := Strategy{}
	var type_ string = "RollingUpdate"
	this.Type = &type_
	return &this
}

// NewStrategy is short for NewStrategyWithDefault which instantiates a new Strategy object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrategy() *Strategy {
	return NewStrategyWithDefault()
}

// NewStrategyEmpty instantiates a new Strategy object with no properties set.
// This constructor will not assign any default values to properties.
func NewStrategyEmpty() *Strategy {
	this := Strategy{}
	return &this
}

// NewStrategys converts a list Strategy pointers to objects.
// This is helpful when the SetStrategy requires a list of objects
func NewStrategyList(ps ...*Strategy) []Strategy {
	objs := []Strategy{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Strategy
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Strategy) Validate() error {
	if o.Type == nil {
		return errors.New("Type in Strategy must be set")
	}
	// validate all nested properties
	if o.RollingStrategy != nil {
		if err := o.RollingStrategy.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetRollingStrategy returns the RollingStrategy field value if set, zero value otherwise.
func (o *Strategy) GetRollingStrategy() RollingStrategy {
	if o == nil || utils.IsNil(o.RollingStrategy) {
		var ret RollingStrategy
		return ret
	}
	return *o.RollingStrategy
}

// GetRollingStrategyOk returns a tuple with the RollingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Strategy) GetRollingStrategyOk() (*RollingStrategy, bool) {
	if o == nil || utils.IsNil(o.RollingStrategy) {
		return nil, false
	}
	return o.RollingStrategy, true
}

// HasRollingStrategy returns a boolean if a field has been set.
func (o *Strategy) HasRollingStrategy() bool {
	if o != nil && !utils.IsNil(o.RollingStrategy) {
		return true
	}

	return false
}

// SetRollingStrategy gets a reference to the given RollingStrategy and assigns it to the rollingStrategy field.
// RollingStrategy:
func (o *Strategy) SetRollingStrategy(v RollingStrategy) *Strategy {
	o.RollingStrategy = &v
	return o
}

// GetType returns the Type field value
func (o *Strategy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Strategy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Strategy) SetType(v string) *Strategy {
	o.Type = &v
	return o
}

func (o Strategy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Strategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.RollingStrategy) {
		toSerialize["rollingStrategy"] = o.RollingStrategy
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableStrategy struct {
	value *Strategy
	isSet bool
}

func (v *NullableStrategy) Get() *Strategy {
	return v.value
}

func (v *NullableStrategy) Set(val *Strategy) {
	v.value = val
	v.isSet = true
}

func (v *NullableStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategy(val *Strategy) *NullableStrategy {
	return &NullableStrategy{value: val, isSet: true}
}

func (v NullableStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
