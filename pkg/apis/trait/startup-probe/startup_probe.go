/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package startup_probe

import (
	"encoding/json"
	"fmt"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// StartupProbeSpec - struct for StartupProbeSpec
type StartupProbeSpec struct {
	StartupProbeParams    *StartupProbeParams
	StartupProbeSpecOneOf *StartupProbeSpecOneOf
}

// StartupProbeParamsAsStartupProbeSpec is a convenience function that returns StartupProbeParams wrapped in StartupProbeSpec
func StartupProbeParamsAsStartupProbeSpec(v *StartupProbeParams) StartupProbeSpec {
	return StartupProbeSpec{
		StartupProbeParams: v,
	}
}

// StartupProbeSpecOneOfAsStartupProbeSpec is a convenience function that returns StartupProbeSpecOneOf wrapped in StartupProbeSpec
func StartupProbeSpecOneOfAsStartupProbeSpec(v *StartupProbeSpecOneOf) StartupProbeSpec {
	return StartupProbeSpec{
		StartupProbeSpecOneOf: v,
	}
}

// Validate validates this StartupProbeSpec
func (o *StartupProbeTrait) Validate() error {
	if o.Properties.StartupProbeParams != nil {
		return nil
	}

	if o.Properties.StartupProbeSpecOneOf != nil {
		return nil
	}

	return fmt.Errorf("No oneOf schemas were matched in StartupProbeSpec")
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *StartupProbeSpec) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into StartupProbeParams
	err = utils.NewStrictDecoder(data).Decode(&dst.StartupProbeParams)
	if err == nil {
		jsonStartupProbeParams, _ := json.Marshal(dst.StartupProbeParams)
		if string(jsonStartupProbeParams) == "{}" { // empty struct
			dst.StartupProbeParams = nil
		} else {
			match++
		}
	} else {
		dst.StartupProbeParams = nil
	}

	// try to unmarshal data into StartupProbeSpecOneOf
	err = utils.NewStrictDecoder(data).Decode(&dst.StartupProbeSpecOneOf)
	if err == nil {
		jsonStartupProbeSpecOneOf, _ := json.Marshal(dst.StartupProbeSpecOneOf)
		if string(jsonStartupProbeSpecOneOf) == "{}" { // empty struct
			dst.StartupProbeSpecOneOf = nil
		} else {
			match++
		}
	} else {
		dst.StartupProbeSpecOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.StartupProbeParams = nil
		dst.StartupProbeSpecOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(StartupProbeSpec)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(StartupProbeSpec)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StartupProbeSpec) MarshalJSON() ([]byte, error) {
	if src.StartupProbeParams != nil {
		return json.Marshal(&src.StartupProbeParams)
	}

	if src.StartupProbeSpecOneOf != nil {
		return json.Marshal(&src.StartupProbeSpecOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StartupProbeSpec) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.StartupProbeParams != nil {
		return obj.StartupProbeParams
	}

	if obj.StartupProbeSpecOneOf != nil {
		return obj.StartupProbeSpecOneOf
	}

	// all schemas are nil
	return nil
}

type NullableStartupProbeSpec struct {
	value *StartupProbeSpec
	isSet bool
}

func (v *NullableStartupProbeSpec) Get() *StartupProbeSpec {
	return v.value
}

func (v *NullableStartupProbeSpec) Set(val *StartupProbeSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableStartupProbeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableStartupProbeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartupProbeSpec(val *StartupProbeSpec) *NullableStartupProbeSpec {
	return &NullableStartupProbeSpec{value: val, isSet: true}
}

func (v NullableStartupProbeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartupProbeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const StartupProbeType = "startup-probe"

func init() {
	sdkcommon.RegisterTrait(StartupProbeType, FromTrait)
}

type StartupProbeTrait struct {
	Base       apis.TraitBase
	Properties StartupProbeSpec
}

func StartupProbe() *StartupProbeTrait {
	s := &StartupProbeTrait{Base: apis.TraitBase{}}
	return s
}

func (s *StartupProbeTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(s.Properties),
		Type:       StartupProbeType,
	}
	return res
}

func (s *StartupProbeTrait) FromTrait(from common.ApplicationTrait) (*StartupProbeTrait, error) {
	var properties StartupProbeSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	s.Base.Type = StartupProbeType
	s.Properties = properties
	return s, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	s := &StartupProbeTrait{}
	return s.FromTrait(from)
}

func (s *StartupProbeTrait) DefType() string {
	return StartupProbeType
}
