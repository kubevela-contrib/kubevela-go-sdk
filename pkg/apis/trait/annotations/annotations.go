/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package annotations

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the AnnotationsSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AnnotationsSpec{}

// AnnotationsSpec struct for AnnotationsSpec
type AnnotationsSpec struct {
}

// NewAnnotationsSpecWith instantiates a new AnnotationsSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewAnnotationsSpecWith() *AnnotationsSpec {
	this := AnnotationsSpec{}
	return &this
}

// NewAnnotationsSpecWithDefault instantiates a new AnnotationsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnotationsSpecWithDefault() *AnnotationsSpec {
	this := AnnotationsSpec{}
	return &this
}

// NewAnnotationsSpec is short for NewAnnotationsSpecWithDefault which instantiates a new AnnotationsSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnotationsSpec() *AnnotationsSpec {
	return NewAnnotationsSpecWithDefault()
}

// NewAnnotationsSpecEmpty instantiates a new AnnotationsSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewAnnotationsSpecEmpty() *AnnotationsSpec {
	this := AnnotationsSpec{}
	return &this
}

// NewAnnotationsSpecs converts a list AnnotationsSpec pointers to objects.
// This is helpful when the SetAnnotationsSpec requires a list of objects
func NewAnnotationsSpecList(ps ...*AnnotationsSpec) []AnnotationsSpec {
	objs := []AnnotationsSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this AnnotationsSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *AnnotationsTrait) Validate() error {
	// validate all nested properties
	return nil
}

func (o AnnotationsSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnotationsSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableAnnotationsSpec struct {
	value *AnnotationsSpec
	isSet bool
}

func (v *NullableAnnotationsSpec) Get() *AnnotationsSpec {
	return v.value
}

func (v *NullableAnnotationsSpec) Set(val *AnnotationsSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableAnnotationsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotationsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotationsSpec(val *AnnotationsSpec) *NullableAnnotationsSpec {
	return &NullableAnnotationsSpec{value: val, isSet: true}
}

func (v NullableAnnotationsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotationsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const AnnotationsType = "annotations"

func init() {
	sdkcommon.RegisterTrait(AnnotationsType, FromTrait)
}

type AnnotationsTrait struct {
	Base       apis.TraitBase
	Properties AnnotationsSpec
}

func Annotations() *AnnotationsTrait {
	a := &AnnotationsTrait{Base: apis.TraitBase{}}
	return a
}

func (a *AnnotationsTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(a.Properties),
		Type:       AnnotationsType,
	}
	return res
}

func (a *AnnotationsTrait) FromTrait(from common.ApplicationTrait) (*AnnotationsTrait, error) {
	var properties AnnotationsSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	a.Base.Type = AnnotationsType
	a.Properties = properties
	return a, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	a := &AnnotationsTrait{}
	return a.FromTrait(from)
}

func (a *AnnotationsTrait) DefType() string {
	return AnnotationsType
}
