/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affinity

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Preferred1 type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Preferred1{}

// Preferred1 struct for Preferred1
type Preferred1 struct {
	PodAffinityTerm *PodAffinityTerm `json:"podAffinityTerm"`
	// Specify weight associated with matching the corresponding podAffinityTerm
	Weight *int32 `json:"weight"`
}

// NewPreferred1With instantiates a new Preferred1 object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPreferred1With(podAffinityTerm PodAffinityTerm, weight int32) *Preferred1 {
	this := Preferred1{}
	this.PodAffinityTerm = &podAffinityTerm
	this.Weight = &weight
	return &this
}

// NewPreferred1WithDefault instantiates a new Preferred1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferred1WithDefault() *Preferred1 {
	this := Preferred1{}
	return &this
}

// NewPreferred1 is short for NewPreferred1WithDefault which instantiates a new Preferred1 object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferred1() *Preferred1 {
	return NewPreferred1WithDefault()
}

// NewPreferred1Empty instantiates a new Preferred1 object with no properties set.
// This constructor will not assign any default values to properties.
func NewPreferred1Empty() *Preferred1 {
	this := Preferred1{}
	return &this
}

// NewPreferred1s converts a list Preferred1 pointers to objects.
// This is helpful when the SetPreferred1 requires a list of objects
func NewPreferred1List(ps ...*Preferred1) []Preferred1 {
	objs := []Preferred1{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Preferred1
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Preferred1) Validate() error {
	if o.PodAffinityTerm == nil {
		return errors.New("PodAffinityTerm in Preferred1 must be set")
	}
	if o.Weight == nil {
		return errors.New("Weight in Preferred1 must be set")
	}
	// validate all nested properties
	if o.PodAffinityTerm != nil {
		if err := o.PodAffinityTerm.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetPodAffinityTerm returns the PodAffinityTerm field value
func (o *Preferred1) GetPodAffinityTerm() PodAffinityTerm {
	if o == nil {
		var ret PodAffinityTerm
		return ret
	}

	return *o.PodAffinityTerm
}

// GetPodAffinityTermOk returns a tuple with the PodAffinityTerm field value
// and a boolean to check if the value has been set.
func (o *Preferred1) GetPodAffinityTermOk() (*PodAffinityTerm, bool) {
	if o == nil {
		return nil, false
	}
	return o.PodAffinityTerm, true
}

// SetPodAffinityTerm sets field value
func (o *Preferred1) SetPodAffinityTerm(v PodAffinityTerm) *Preferred1 {
	o.PodAffinityTerm = &v
	return o
}

// GetWeight returns the Weight field value
func (o *Preferred1) GetWeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *Preferred1) GetWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight, true
}

// SetWeight sets field value
func (o *Preferred1) SetWeight(v int32) *Preferred1 {
	o.Weight = &v
	return o
}

func (o Preferred1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Preferred1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["podAffinityTerm"] = o.PodAffinityTerm
	toSerialize["weight"] = o.Weight
	return toSerialize, nil
}

type NullablePreferred1 struct {
	value *Preferred1
	isSet bool
}

func (v *NullablePreferred1) Get() *Preferred1 {
	return v.value
}

func (v *NullablePreferred1) Set(val *Preferred1) {
	v.value = val
	v.isSet = true
}

func (v *NullablePreferred1) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferred1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferred1(val *Preferred1) *NullablePreferred1 {
	return &NullablePreferred1{value: val, isSet: true}
}

func (v NullablePreferred1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferred1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
