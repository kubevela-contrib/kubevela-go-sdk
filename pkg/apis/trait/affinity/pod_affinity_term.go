/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affinity

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the PodAffinityTerm type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PodAffinityTerm{}

// PodAffinityTerm struct for PodAffinityTerm
type PodAffinityTerm struct {
	LabelSelector     *LabelSelector `json:"labelSelector,omitempty"`
	NamespaceSelector *LabelSelector `json:"namespaceSelector,omitempty"`
	Namespaces        []string       `json:"namespaces,omitempty"`
	TopologyKey       *string        `json:"topologyKey"`
}

// NewPodAffinityTermWith instantiates a new PodAffinityTerm object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPodAffinityTermWith(topologyKey string) *PodAffinityTerm {
	this := PodAffinityTerm{}
	this.TopologyKey = &topologyKey
	return &this
}

// NewPodAffinityTermWithDefault instantiates a new PodAffinityTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodAffinityTermWithDefault() *PodAffinityTerm {
	this := PodAffinityTerm{}
	return &this
}

// NewPodAffinityTerm is short for NewPodAffinityTermWithDefault which instantiates a new PodAffinityTerm object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodAffinityTerm() *PodAffinityTerm {
	return NewPodAffinityTermWithDefault()
}

// NewPodAffinityTermEmpty instantiates a new PodAffinityTerm object with no properties set.
// This constructor will not assign any default values to properties.
func NewPodAffinityTermEmpty() *PodAffinityTerm {
	this := PodAffinityTerm{}
	return &this
}

// NewPodAffinityTerms converts a list PodAffinityTerm pointers to objects.
// This is helpful when the SetPodAffinityTerm requires a list of objects
func NewPodAffinityTermList(ps ...*PodAffinityTerm) []PodAffinityTerm {
	objs := []PodAffinityTerm{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this PodAffinityTerm
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *PodAffinityTerm) Validate() error {
	if o.TopologyKey == nil {
		return errors.New("TopologyKey in PodAffinityTerm must be set")
	}
	// validate all nested properties
	if o.LabelSelector != nil {
		if err := o.LabelSelector.Validate(); err != nil {
			return err
		}
	}
	if o.NamespaceSelector != nil {
		if err := o.NamespaceSelector.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *PodAffinityTerm) GetLabelSelector() LabelSelector {
	if o == nil || utils.IsNil(o.LabelSelector) {
		var ret LabelSelector
		return ret
	}
	return *o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodAffinityTerm) GetLabelSelectorOk() (*LabelSelector, bool) {
	if o == nil || utils.IsNil(o.LabelSelector) {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *PodAffinityTerm) HasLabelSelector() bool {
	if o != nil && !utils.IsNil(o.LabelSelector) {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given LabelSelector and assigns it to the labelSelector field.
// LabelSelector:
func (o *PodAffinityTerm) SetLabelSelector(v LabelSelector) *PodAffinityTerm {
	o.LabelSelector = &v
	return o
}

// GetNamespaceSelector returns the NamespaceSelector field value if set, zero value otherwise.
func (o *PodAffinityTerm) GetNamespaceSelector() LabelSelector {
	if o == nil || utils.IsNil(o.NamespaceSelector) {
		var ret LabelSelector
		return ret
	}
	return *o.NamespaceSelector
}

// GetNamespaceSelectorOk returns a tuple with the NamespaceSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodAffinityTerm) GetNamespaceSelectorOk() (*LabelSelector, bool) {
	if o == nil || utils.IsNil(o.NamespaceSelector) {
		return nil, false
	}
	return o.NamespaceSelector, true
}

// HasNamespaceSelector returns a boolean if a field has been set.
func (o *PodAffinityTerm) HasNamespaceSelector() bool {
	if o != nil && !utils.IsNil(o.NamespaceSelector) {
		return true
	}

	return false
}

// SetNamespaceSelector gets a reference to the given LabelSelector and assigns it to the namespaceSelector field.
// NamespaceSelector:
func (o *PodAffinityTerm) SetNamespaceSelector(v LabelSelector) *PodAffinityTerm {
	o.NamespaceSelector = &v
	return o
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *PodAffinityTerm) GetNamespaces() []string {
	if o == nil || utils.IsNil(o.Namespaces) {
		var ret []string
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodAffinityTerm) GetNamespacesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *PodAffinityTerm) HasNamespaces() bool {
	if o != nil && !utils.IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []string and assigns it to the namespaces field.
// Namespaces:
func (o *PodAffinityTerm) SetNamespaces(v []string) *PodAffinityTerm {
	o.Namespaces = v
	return o
}

// GetTopologyKey returns the TopologyKey field value
func (o *PodAffinityTerm) GetTopologyKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.TopologyKey
}

// GetTopologyKeyOk returns a tuple with the TopologyKey field value
// and a boolean to check if the value has been set.
func (o *PodAffinityTerm) GetTopologyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopologyKey, true
}

// SetTopologyKey sets field value
func (o *PodAffinityTerm) SetTopologyKey(v string) *PodAffinityTerm {
	o.TopologyKey = &v
	return o
}

func (o PodAffinityTerm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PodAffinityTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.LabelSelector) {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	if !utils.IsNil(o.NamespaceSelector) {
		toSerialize["namespaceSelector"] = o.NamespaceSelector
	}
	if !utils.IsNil(o.Namespaces) {
		toSerialize["namespaces"] = o.Namespaces
	}
	toSerialize["topologyKey"] = o.TopologyKey
	return toSerialize, nil
}

type NullablePodAffinityTerm struct {
	value *PodAffinityTerm
	isSet bool
}

func (v *NullablePodAffinityTerm) Get() *PodAffinityTerm {
	return v.value
}

func (v *NullablePodAffinityTerm) Set(val *PodAffinityTerm) {
	v.value = val
	v.isSet = true
}

func (v *NullablePodAffinityTerm) IsSet() bool {
	return v.isSet
}

func (v *NullablePodAffinityTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePodAffinityTerm(val *PodAffinityTerm) *NullablePodAffinityTerm {
	return &NullablePodAffinityTerm{value: val, isSet: true}
}

func (v NullablePodAffinityTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePodAffinityTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
