/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affinity

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the NodeSelecor type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NodeSelecor{}

// NodeSelecor struct for NodeSelecor
type NodeSelecor struct {
	Key      *string  `json:"key"`
	Operator *string  `json:"operator"`
	Values   []string `json:"values,omitempty"`
}

// NewNodeSelecorWith instantiates a new NodeSelecor object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewNodeSelecorWith(key string, operator string) *NodeSelecor {
	this := NodeSelecor{}
	this.Key = &key
	this.Operator = &operator
	return &this
}

// NewNodeSelecorWithDefault instantiates a new NodeSelecor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeSelecorWithDefault() *NodeSelecor {
	this := NodeSelecor{}
	var operator string = "In"
	this.Operator = &operator
	return &this
}

// NewNodeSelecor is short for NewNodeSelecorWithDefault which instantiates a new NodeSelecor object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeSelecor() *NodeSelecor {
	return NewNodeSelecorWithDefault()
}

// NewNodeSelecorEmpty instantiates a new NodeSelecor object with no properties set.
// This constructor will not assign any default values to properties.
func NewNodeSelecorEmpty() *NodeSelecor {
	this := NodeSelecor{}
	return &this
}

// NewNodeSelecors converts a list NodeSelecor pointers to objects.
// This is helpful when the SetNodeSelecor requires a list of objects
func NewNodeSelecorList(ps ...*NodeSelecor) []NodeSelecor {
	objs := []NodeSelecor{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this NodeSelecor
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *NodeSelecor) Validate() error {
	if o.Key == nil {
		return errors.New("Key in NodeSelecor must be set")
	}
	if o.Operator == nil {
		return errors.New("Operator in NodeSelecor must be set")
	}
	// validate all nested properties
	return nil
}

// GetKey returns the Key field value
func (o *NodeSelecor) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *NodeSelecor) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key, true
}

// SetKey sets field value
func (o *NodeSelecor) SetKey(v string) *NodeSelecor {
	o.Key = &v
	return o
}

// GetOperator returns the Operator field value
func (o *NodeSelecor) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *NodeSelecor) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operator, true
}

// SetOperator sets field value
func (o *NodeSelecor) SetOperator(v string) *NodeSelecor {
	o.Operator = &v
	return o
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *NodeSelecor) GetValues() []string {
	if o == nil || utils.IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSelecor) GetValuesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *NodeSelecor) HasValues() bool {
	if o != nil && !utils.IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the values field.
// Values:
func (o *NodeSelecor) SetValues(v []string) *NodeSelecor {
	o.Values = v
	return o
}

func (o NodeSelecor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeSelecor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["operator"] = o.Operator
	if !utils.IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableNodeSelecor struct {
	value *NodeSelecor
	isSet bool
}

func (v *NullableNodeSelecor) Get() *NodeSelecor {
	return v.value
}

func (v *NullableNodeSelecor) Set(val *NodeSelecor) {
	v.value = val
	v.isSet = true
}

func (v *NullableNodeSelecor) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeSelecor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeSelecor(val *NodeSelecor) *NullableNodeSelecor {
	return &NullableNodeSelecor{value: val, isSet: true}
}

func (v NullableNodeSelecor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeSelecor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
