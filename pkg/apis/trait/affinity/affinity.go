/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affinity

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the AffinitySpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AffinitySpec{}

// AffinitySpec struct for AffinitySpec
type AffinitySpec struct {
	NodeAffinity    *NodeAffinity    `json:"nodeAffinity,omitempty"`
	PodAffinity     *PodAffinity     `json:"podAffinity,omitempty"`
	PodAntiAffinity *PodAntiAffinity `json:"podAntiAffinity,omitempty"`
	// Specify tolerant taint
	Tolerations []Tolerations `json:"tolerations,omitempty"`
}

// NewAffinitySpecWith instantiates a new AffinitySpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewAffinitySpecWith() *AffinitySpec {
	this := AffinitySpec{}
	return &this
}

// NewAffinitySpecWithDefault instantiates a new AffinitySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAffinitySpecWithDefault() *AffinitySpec {
	this := AffinitySpec{}
	return &this
}

// NewAffinitySpec is short for NewAffinitySpecWithDefault which instantiates a new AffinitySpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAffinitySpec() *AffinitySpec {
	return NewAffinitySpecWithDefault()
}

// NewAffinitySpecEmpty instantiates a new AffinitySpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewAffinitySpecEmpty() *AffinitySpec {
	this := AffinitySpec{}
	return &this
}

// NewAffinitySpecs converts a list AffinitySpec pointers to objects.
// This is helpful when the SetAffinitySpec requires a list of objects
func NewAffinitySpecList(ps ...*AffinitySpec) []AffinitySpec {
	objs := []AffinitySpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this AffinitySpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *AffinityTrait) Validate() error {
	// validate all nested properties
	if o.Properties.NodeAffinity != nil {
		if err := o.Properties.NodeAffinity.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.PodAffinity != nil {
		if err := o.Properties.PodAffinity.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.PodAntiAffinity != nil {
		if err := o.Properties.PodAntiAffinity.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetNodeAffinity returns the NodeAffinity field value if set, zero value otherwise.
func (o *AffinityTrait) GetNodeAffinity() NodeAffinity {
	if o == nil || utils.IsNil(o.Properties.NodeAffinity) {
		var ret NodeAffinity
		return ret
	}
	return *o.Properties.NodeAffinity
}

// GetNodeAffinityOk returns a tuple with the NodeAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffinityTrait) GetNodeAffinityOk() (*NodeAffinity, bool) {
	if o == nil || utils.IsNil(o.Properties.NodeAffinity) {
		return nil, false
	}
	return o.Properties.NodeAffinity, true
}

// HasNodeAffinity returns a boolean if a field has been set.
func (o *AffinityTrait) HasNodeAffinity() bool {
	if o != nil && !utils.IsNil(o.Properties.NodeAffinity) {
		return true
	}

	return false
}

// SetNodeAffinity gets a reference to the given NodeAffinity and assigns it to the nodeAffinity field.
// NodeAffinity:
func (o *AffinityTrait) SetNodeAffinity(v NodeAffinity) *AffinityTrait {
	o.Properties.NodeAffinity = &v
	return o
}

// GetPodAffinity returns the PodAffinity field value if set, zero value otherwise.
func (o *AffinityTrait) GetPodAffinity() PodAffinity {
	if o == nil || utils.IsNil(o.Properties.PodAffinity) {
		var ret PodAffinity
		return ret
	}
	return *o.Properties.PodAffinity
}

// GetPodAffinityOk returns a tuple with the PodAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffinityTrait) GetPodAffinityOk() (*PodAffinity, bool) {
	if o == nil || utils.IsNil(o.Properties.PodAffinity) {
		return nil, false
	}
	return o.Properties.PodAffinity, true
}

// HasPodAffinity returns a boolean if a field has been set.
func (o *AffinityTrait) HasPodAffinity() bool {
	if o != nil && !utils.IsNil(o.Properties.PodAffinity) {
		return true
	}

	return false
}

// SetPodAffinity gets a reference to the given PodAffinity and assigns it to the podAffinity field.
// PodAffinity:
func (o *AffinityTrait) SetPodAffinity(v PodAffinity) *AffinityTrait {
	o.Properties.PodAffinity = &v
	return o
}

// GetPodAntiAffinity returns the PodAntiAffinity field value if set, zero value otherwise.
func (o *AffinityTrait) GetPodAntiAffinity() PodAntiAffinity {
	if o == nil || utils.IsNil(o.Properties.PodAntiAffinity) {
		var ret PodAntiAffinity
		return ret
	}
	return *o.Properties.PodAntiAffinity
}

// GetPodAntiAffinityOk returns a tuple with the PodAntiAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffinityTrait) GetPodAntiAffinityOk() (*PodAntiAffinity, bool) {
	if o == nil || utils.IsNil(o.Properties.PodAntiAffinity) {
		return nil, false
	}
	return o.Properties.PodAntiAffinity, true
}

// HasPodAntiAffinity returns a boolean if a field has been set.
func (o *AffinityTrait) HasPodAntiAffinity() bool {
	if o != nil && !utils.IsNil(o.Properties.PodAntiAffinity) {
		return true
	}

	return false
}

// SetPodAntiAffinity gets a reference to the given PodAntiAffinity and assigns it to the podAntiAffinity field.
// PodAntiAffinity:
func (o *AffinityTrait) SetPodAntiAffinity(v PodAntiAffinity) *AffinityTrait {
	o.Properties.PodAntiAffinity = &v
	return o
}

// GetTolerations returns the Tolerations field value if set, zero value otherwise.
func (o *AffinityTrait) GetTolerations() []Tolerations {
	if o == nil || utils.IsNil(o.Properties.Tolerations) {
		var ret []Tolerations
		return ret
	}
	return o.Properties.Tolerations
}

// GetTolerationsOk returns a tuple with the Tolerations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AffinityTrait) GetTolerationsOk() ([]Tolerations, bool) {
	if o == nil || utils.IsNil(o.Properties.Tolerations) {
		return nil, false
	}
	return o.Properties.Tolerations, true
}

// HasTolerations returns a boolean if a field has been set.
func (o *AffinityTrait) HasTolerations() bool {
	if o != nil && !utils.IsNil(o.Properties.Tolerations) {
		return true
	}

	return false
}

// SetTolerations gets a reference to the given []Tolerations and assigns it to the tolerations field.
// Tolerations:  Specify tolerant taint
func (o *AffinityTrait) SetTolerations(v []Tolerations) *AffinityTrait {
	o.Properties.Tolerations = v
	return o
}

func (o AffinitySpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AffinitySpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.NodeAffinity) {
		toSerialize["nodeAffinity"] = o.NodeAffinity
	}
	if !utils.IsNil(o.PodAffinity) {
		toSerialize["podAffinity"] = o.PodAffinity
	}
	if !utils.IsNil(o.PodAntiAffinity) {
		toSerialize["podAntiAffinity"] = o.PodAntiAffinity
	}
	if !utils.IsNil(o.Tolerations) {
		toSerialize["tolerations"] = o.Tolerations
	}
	return toSerialize, nil
}

type NullableAffinitySpec struct {
	value *AffinitySpec
	isSet bool
}

func (v *NullableAffinitySpec) Get() *AffinitySpec {
	return v.value
}

func (v *NullableAffinitySpec) Set(val *AffinitySpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableAffinitySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAffinitySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAffinitySpec(val *AffinitySpec) *NullableAffinitySpec {
	return &NullableAffinitySpec{value: val, isSet: true}
}

func (v NullableAffinitySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAffinitySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const AffinityType = "affinity"

func init() {
	sdkcommon.RegisterTrait(AffinityType, FromTrait)
}

type AffinityTrait struct {
	Base       apis.TraitBase
	Properties AffinitySpec
}

func Affinity() *AffinityTrait {
	a := &AffinityTrait{Base: apis.TraitBase{}}
	return a
}

func (a *AffinityTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(a.Properties),
		Type:       AffinityType,
	}
	return res
}

func (a *AffinityTrait) FromTrait(from common.ApplicationTrait) (*AffinityTrait, error) {
	var properties AffinitySpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	a.Base.Type = AffinityType
	a.Properties = properties
	return a, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	a := &AffinityTrait{}
	return a.FromTrait(from)
}

func (a *AffinityTrait) DefType() string {
	return AffinityType
}
