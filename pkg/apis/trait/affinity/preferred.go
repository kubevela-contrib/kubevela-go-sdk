/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affinity

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Preferred type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Preferred{}

// Preferred struct for Preferred
type Preferred struct {
	Preference *NodeSelectorTerm `json:"preference"`
	// Specify weight associated with matching the corresponding nodeSelector
	Weight *int32 `json:"weight"`
}

// NewPreferredWith instantiates a new Preferred object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPreferredWith(preference NodeSelectorTerm, weight int32) *Preferred {
	this := Preferred{}
	this.Preference = &preference
	this.Weight = &weight
	return &this
}

// NewPreferredWithDefault instantiates a new Preferred object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferredWithDefault() *Preferred {
	this := Preferred{}
	return &this
}

// NewPreferred is short for NewPreferredWithDefault which instantiates a new Preferred object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferred() *Preferred {
	return NewPreferredWithDefault()
}

// NewPreferredEmpty instantiates a new Preferred object with no properties set.
// This constructor will not assign any default values to properties.
func NewPreferredEmpty() *Preferred {
	this := Preferred{}
	return &this
}

// NewPreferreds converts a list Preferred pointers to objects.
// This is helpful when the SetPreferred requires a list of objects
func NewPreferredList(ps ...*Preferred) []Preferred {
	objs := []Preferred{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Preferred
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Preferred) Validate() error {
	if o.Preference == nil {
		return errors.New("Preference in Preferred must be set")
	}
	if o.Weight == nil {
		return errors.New("Weight in Preferred must be set")
	}
	// validate all nested properties
	if o.Preference != nil {
		if err := o.Preference.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetPreference returns the Preference field value
func (o *Preferred) GetPreference() NodeSelectorTerm {
	if o == nil {
		var ret NodeSelectorTerm
		return ret
	}

	return *o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value
// and a boolean to check if the value has been set.
func (o *Preferred) GetPreferenceOk() (*NodeSelectorTerm, bool) {
	if o == nil {
		return nil, false
	}
	return o.Preference, true
}

// SetPreference sets field value
func (o *Preferred) SetPreference(v NodeSelectorTerm) *Preferred {
	o.Preference = &v
	return o
}

// GetWeight returns the Weight field value
func (o *Preferred) GetWeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *Preferred) GetWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight, true
}

// SetWeight sets field value
func (o *Preferred) SetWeight(v int32) *Preferred {
	o.Weight = &v
	return o
}

func (o Preferred) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Preferred) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["preference"] = o.Preference
	toSerialize["weight"] = o.Weight
	return toSerialize, nil
}

type NullablePreferred struct {
	value *Preferred
	isSet bool
}

func (v *NullablePreferred) Get() *Preferred {
	return v.value
}

func (v *NullablePreferred) Set(val *Preferred) {
	v.value = val
	v.isSet = true
}

func (v *NullablePreferred) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferred) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferred(val *Preferred) *NullablePreferred {
	return &NullablePreferred{value: val, isSet: true}
}

func (v NullablePreferred) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferred) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
