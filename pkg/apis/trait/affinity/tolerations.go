/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affinity

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Tolerations type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Tolerations{}

// Tolerations struct for Tolerations
type Tolerations struct {
	Effect   *string `json:"effect,omitempty"`
	Key      *string `json:"key,omitempty"`
	Operator *string `json:"operator,omitempty"`
	// Specify the period of time the toleration
	TolerationSeconds *int32  `json:"tolerationSeconds,omitempty"`
	Value             *string `json:"value,omitempty"`
}

// NewTolerationsWith instantiates a new Tolerations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTolerationsWith() *Tolerations {
	this := Tolerations{}
	var operator string = "Equal"
	this.Operator = &operator
	return &this
}

// NewTolerations instantiates a new Tolerations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTolerations() *Tolerations {
	this := Tolerations{}
	var operator string = "Equal"
	this.Operator = &operator
	return &this
}

// NewTolerationss converts a list Tolerations pointers to objects.
// This is helpful when the SetTolerations requires a list of objects
func NewTolerationsList(ps ...*Tolerations) []Tolerations {
	objs := []Tolerations{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *Tolerations) GetEffect() string {
	if o == nil || utils.IsNil(o.Effect) {
		var ret string
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tolerations) GetEffectOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Effect) {
		return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *Tolerations) HasEffect() bool {
	if o != nil && !utils.IsNil(o.Effect) {
		return true
	}

	return false
}

// SetEffect gets a reference to the given string and assigns it to the effect field.
// Effect:
func (o *Tolerations) SetEffect(v string) *Tolerations {
	o.Effect = &v
	return o
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Tolerations) GetKey() string {
	if o == nil || utils.IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tolerations) GetKeyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Tolerations) HasKey() bool {
	if o != nil && !utils.IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the key field.
// Key:
func (o *Tolerations) SetKey(v string) *Tolerations {
	o.Key = &v
	return o
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *Tolerations) GetOperator() string {
	if o == nil || utils.IsNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tolerations) GetOperatorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *Tolerations) HasOperator() bool {
	if o != nil && !utils.IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the operator field.
// Operator:
func (o *Tolerations) SetOperator(v string) *Tolerations {
	o.Operator = &v
	return o
}

// GetTolerationSeconds returns the TolerationSeconds field value if set, zero value otherwise.
func (o *Tolerations) GetTolerationSeconds() int32 {
	if o == nil || utils.IsNil(o.TolerationSeconds) {
		var ret int32
		return ret
	}
	return *o.TolerationSeconds
}

// GetTolerationSecondsOk returns a tuple with the TolerationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tolerations) GetTolerationSecondsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.TolerationSeconds) {
		return nil, false
	}
	return o.TolerationSeconds, true
}

// HasTolerationSeconds returns a boolean if a field has been set.
func (o *Tolerations) HasTolerationSeconds() bool {
	if o != nil && !utils.IsNil(o.TolerationSeconds) {
		return true
	}

	return false
}

// SetTolerationSeconds gets a reference to the given int32 and assigns it to the tolerationSeconds field.
// TolerationSeconds:  Specify the period of time the toleration
func (o *Tolerations) SetTolerationSeconds(v int32) *Tolerations {
	o.TolerationSeconds = &v
	return o
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Tolerations) GetValue() string {
	if o == nil || utils.IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tolerations) GetValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Tolerations) HasValue() bool {
	if o != nil && !utils.IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the value field.
// Value:
func (o *Tolerations) SetValue(v string) *Tolerations {
	o.Value = &v
	return o
}

func (o Tolerations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tolerations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Effect) {
		toSerialize["effect"] = o.Effect
	}
	if !utils.IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !utils.IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !utils.IsNil(o.TolerationSeconds) {
		toSerialize["tolerationSeconds"] = o.TolerationSeconds
	}
	if !utils.IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableTolerations struct {
	value *Tolerations
	isSet bool
}

func (v NullableTolerations) Get() *Tolerations {
	return v.value
}

func (v *NullableTolerations) Set(val *Tolerations) {
	v.value = val
	v.isSet = true
}

func (v NullableTolerations) IsSet() bool {
	return v.isSet
}

func (v *NullableTolerations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTolerations(val *Tolerations) *NullableTolerations {
	return &NullableTolerations{value: val, isSet: true}
}

func (v NullableTolerations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTolerations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
