/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package affinity

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the LabelSelector type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &LabelSelector{}

// LabelSelector struct for LabelSelector
type LabelSelector struct {
	MatchExpressions []MatchExpressions `json:"matchExpressions,omitempty"`
	MatchLabels      map[string]string  `json:"matchLabels,omitempty"`
}

// NewLabelSelectorWith instantiates a new LabelSelector object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewLabelSelectorWith() *LabelSelector {
	this := LabelSelector{}
	return &this
}

// NewLabelSelectorWithDefault instantiates a new LabelSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelSelectorWithDefault() *LabelSelector {
	this := LabelSelector{}
	return &this
}

// NewLabelSelector is short for NewLabelSelectorWithDefault which instantiates a new LabelSelector object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelSelector() *LabelSelector {
	return NewLabelSelectorWithDefault()
}

// NewLabelSelectorEmpty instantiates a new LabelSelector object with no properties set.
// This constructor will not assign any default values to properties.
func NewLabelSelectorEmpty() *LabelSelector {
	this := LabelSelector{}
	return &this
}

// NewLabelSelectors converts a list LabelSelector pointers to objects.
// This is helpful when the SetLabelSelector requires a list of objects
func NewLabelSelectorList(ps ...*LabelSelector) []LabelSelector {
	objs := []LabelSelector{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this LabelSelector
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *LabelSelector) Validate() error {
	// validate all nested properties
	return nil
}

// GetMatchExpressions returns the MatchExpressions field value if set, zero value otherwise.
func (o *LabelSelector) GetMatchExpressions() []MatchExpressions {
	if o == nil || utils.IsNil(o.MatchExpressions) {
		var ret []MatchExpressions
		return ret
	}
	return o.MatchExpressions
}

// GetMatchExpressionsOk returns a tuple with the MatchExpressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelSelector) GetMatchExpressionsOk() ([]MatchExpressions, bool) {
	if o == nil || utils.IsNil(o.MatchExpressions) {
		return nil, false
	}
	return o.MatchExpressions, true
}

// HasMatchExpressions returns a boolean if a field has been set.
func (o *LabelSelector) HasMatchExpressions() bool {
	if o != nil && !utils.IsNil(o.MatchExpressions) {
		return true
	}

	return false
}

// SetMatchExpressions gets a reference to the given []MatchExpressions and assigns it to the matchExpressions field.
// MatchExpressions:
func (o *LabelSelector) SetMatchExpressions(v []MatchExpressions) *LabelSelector {
	o.MatchExpressions = v
	return o
}

// GetMatchLabels returns the MatchLabels field value if set, zero value otherwise.
func (o *LabelSelector) GetMatchLabels() map[string]string {
	if o == nil || utils.IsNil(o.MatchLabels) {
		var ret map[string]string
		return ret
	}
	return o.MatchLabels
}

// GetMatchLabelsOk returns a tuple with the MatchLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelSelector) GetMatchLabelsOk() (map[string]string, bool) {
	if o == nil || utils.IsNil(o.MatchLabels) {
		return nil, false
	}
	return o.MatchLabels, true
}

// HasMatchLabels returns a boolean if a field has been set.
func (o *LabelSelector) HasMatchLabels() bool {
	if o != nil && !utils.IsNil(o.MatchLabels) {
		return true
	}

	return false
}

// SetMatchLabels gets a reference to the given map[string]string and assigns it to the matchLabels field.
// MatchLabels:
func (o *LabelSelector) SetMatchLabels(v map[string]string) *LabelSelector {
	o.MatchLabels = v
	return o
}

func (o LabelSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.MatchExpressions) {
		toSerialize["matchExpressions"] = o.MatchExpressions
	}
	if !utils.IsNil(o.MatchLabels) {
		toSerialize["matchLabels"] = o.MatchLabels
	}
	return toSerialize, nil
}

type NullableLabelSelector struct {
	value *LabelSelector
	isSet bool
}

func (v *NullableLabelSelector) Get() *LabelSelector {
	return v.value
}

func (v *NullableLabelSelector) Set(val *LabelSelector) {
	v.value = val
	v.isSet = true
}

func (v *NullableLabelSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelSelector(val *LabelSelector) *NullableLabelSelector {
	return &NullableLabelSelector{value: val, isSet: true}
}

func (v NullableLabelSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
