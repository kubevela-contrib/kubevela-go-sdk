/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the MountToEnv1 type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MountToEnv1{}

// MountToEnv1 struct for MountToEnv1
type MountToEnv1 struct {
	EnvName   *string `json:"envName"`
	SecretKey *string `json:"secretKey"`
}

// NewMountToEnv1With instantiates a new MountToEnv1 object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewMountToEnv1With(envName string, secretKey string) *MountToEnv1 {
	this := MountToEnv1{}
	this.EnvName = &envName
	this.SecretKey = &secretKey
	return &this
}

// NewMountToEnv1WithDefault instantiates a new MountToEnv1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountToEnv1WithDefault() *MountToEnv1 {
	this := MountToEnv1{}
	return &this
}

// NewMountToEnv1 is short for NewMountToEnv1WithDefault which instantiates a new MountToEnv1 object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountToEnv1() *MountToEnv1 {
	return NewMountToEnv1WithDefault()
}

// NewMountToEnv1Empty instantiates a new MountToEnv1 object with no properties set.
// This constructor will not assign any default values to properties.
func NewMountToEnv1Empty() *MountToEnv1 {
	this := MountToEnv1{}
	return &this
}

// NewMountToEnv1s converts a list MountToEnv1 pointers to objects.
// This is helpful when the SetMountToEnv1 requires a list of objects
func NewMountToEnv1List(ps ...*MountToEnv1) []MountToEnv1 {
	objs := []MountToEnv1{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this MountToEnv1
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *MountToEnv1) Validate() error {
	if o.EnvName == nil {
		return errors.New("EnvName in MountToEnv1 must be set")
	}
	if o.SecretKey == nil {
		return errors.New("SecretKey in MountToEnv1 must be set")
	}
	// validate all nested properties
	return nil
}

// GetEnvName returns the EnvName field value
func (o *MountToEnv1) GetEnvName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.EnvName
}

// GetEnvNameOk returns a tuple with the EnvName field value
// and a boolean to check if the value has been set.
func (o *MountToEnv1) GetEnvNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvName, true
}

// SetEnvName sets field value
func (o *MountToEnv1) SetEnvName(v string) *MountToEnv1 {
	o.EnvName = &v
	return o
}

// GetSecretKey returns the SecretKey field value
func (o *MountToEnv1) GetSecretKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value
// and a boolean to check if the value has been set.
func (o *MountToEnv1) GetSecretKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecretKey, true
}

// SetSecretKey sets field value
func (o *MountToEnv1) SetSecretKey(v string) *MountToEnv1 {
	o.SecretKey = &v
	return o
}

func (o MountToEnv1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MountToEnv1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["envName"] = o.EnvName
	toSerialize["secretKey"] = o.SecretKey
	return toSerialize, nil
}

type NullableMountToEnv1 struct {
	value *MountToEnv1
	isSet bool
}

func (v *NullableMountToEnv1) Get() *MountToEnv1 {
	return v.value
}

func (v *NullableMountToEnv1) Set(val *MountToEnv1) {
	v.value = val
	v.isSet = true
}

func (v *NullableMountToEnv1) IsSet() bool {
	return v.isSet
}

func (v *NullableMountToEnv1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountToEnv1(val *MountToEnv1) *NullableMountToEnv1 {
	return &NullableMountToEnv1{value: val, isSet: true}
}

func (v NullableMountToEnv1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountToEnv1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
