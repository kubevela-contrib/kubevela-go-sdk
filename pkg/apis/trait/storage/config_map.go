/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"

	"github.com/kubevela-contrib/vela-go-sdk/pkg/apis/utils"
)

// checks if the ConfigMap type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ConfigMap{}

// ConfigMap struct for ConfigMap
type ConfigMap struct {
	Data        map[string]interface{} `json:"data,omitempty"`
	DefaultMode *int32                 `json:"defaultMode,omitempty"`
	Items       []Items                `json:"items,omitempty"`
	MountOnly   *bool                  `json:"mountOnly,omitempty"`
	MountPath   *string                `json:"mountPath,omitempty"`
	MountToEnv  *MountToEnv            `json:"mountToEnv,omitempty"`
	MountToEnvs []MountToEnvs          `json:"mountToEnvs,omitempty"`
	Name        *string                `json:"name,omitempty"`
	ReadOnly    *bool                  `json:"readOnly,omitempty"`
	SubPath     *string                `json:"subPath,omitempty"`
}

// NewConfigMapWith instantiates a new ConfigMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigMapWith() *ConfigMap {
	this := ConfigMap{}
	var defaultMode int32 = 420
	this.DefaultMode = &defaultMode
	var mountOnly bool = false
	this.MountOnly = &mountOnly
	var readOnly bool = false
	this.ReadOnly = &readOnly
	return &this
}

// NewConfigMap instantiates a new ConfigMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigMap() *ConfigMap {
	this := ConfigMap{}
	var defaultMode int32 = 420
	this.DefaultMode = &defaultMode
	var mountOnly bool = false
	this.MountOnly = &mountOnly
	var readOnly bool = false
	this.ReadOnly = &readOnly
	return &this
}

// NewConfigMaps converts a list ConfigMap pointers to objects.
// This is helpful when the SetConfigMap requires a list of objects
func NewConfigMapList(ps ...*ConfigMap) []ConfigMap {
	objs := []ConfigMap{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConfigMap) GetData() map[string]interface{} {
	if o == nil || utils.IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConfigMap) HasData() bool {
	if o != nil && !utils.IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the data field.
// Data:
func (o *ConfigMap) SetData(v map[string]interface{}) *ConfigMap {
	o.Data = v
	return o
}

// GetDefaultMode returns the DefaultMode field value if set, zero value otherwise.
func (o *ConfigMap) GetDefaultMode() int32 {
	if o == nil || utils.IsNil(o.DefaultMode) {
		var ret int32
		return ret
	}
	return *o.DefaultMode
}

// GetDefaultModeOk returns a tuple with the DefaultMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetDefaultModeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.DefaultMode) {
		return nil, false
	}
	return o.DefaultMode, true
}

// HasDefaultMode returns a boolean if a field has been set.
func (o *ConfigMap) HasDefaultMode() bool {
	if o != nil && !utils.IsNil(o.DefaultMode) {
		return true
	}

	return false
}

// SetDefaultMode gets a reference to the given int32 and assigns it to the defaultMode field.
// DefaultMode:
func (o *ConfigMap) SetDefaultMode(v int32) *ConfigMap {
	o.DefaultMode = &v
	return o
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ConfigMap) GetItems() []Items {
	if o == nil || utils.IsNil(o.Items) {
		var ret []Items
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetItemsOk() ([]Items, bool) {
	if o == nil || utils.IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ConfigMap) HasItems() bool {
	if o != nil && !utils.IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Items and assigns it to the items field.
// Items:
func (o *ConfigMap) SetItems(v []Items) *ConfigMap {
	o.Items = v
	return o
}

// GetMountOnly returns the MountOnly field value if set, zero value otherwise.
func (o *ConfigMap) GetMountOnly() bool {
	if o == nil || utils.IsNil(o.MountOnly) {
		var ret bool
		return ret
	}
	return *o.MountOnly
}

// GetMountOnlyOk returns a tuple with the MountOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetMountOnlyOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.MountOnly) {
		return nil, false
	}
	return o.MountOnly, true
}

// HasMountOnly returns a boolean if a field has been set.
func (o *ConfigMap) HasMountOnly() bool {
	if o != nil && !utils.IsNil(o.MountOnly) {
		return true
	}

	return false
}

// SetMountOnly gets a reference to the given bool and assigns it to the mountOnly field.
// MountOnly:
func (o *ConfigMap) SetMountOnly(v bool) *ConfigMap {
	o.MountOnly = &v
	return o
}

// GetMountPath returns the MountPath field value if set, zero value otherwise.
func (o *ConfigMap) GetMountPath() string {
	if o == nil || utils.IsNil(o.MountPath) {
		var ret string
		return ret
	}
	return *o.MountPath
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetMountPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MountPath) {
		return nil, false
	}
	return o.MountPath, true
}

// HasMountPath returns a boolean if a field has been set.
func (o *ConfigMap) HasMountPath() bool {
	if o != nil && !utils.IsNil(o.MountPath) {
		return true
	}

	return false
}

// SetMountPath gets a reference to the given string and assigns it to the mountPath field.
// MountPath:
func (o *ConfigMap) SetMountPath(v string) *ConfigMap {
	o.MountPath = &v
	return o
}

// GetMountToEnv returns the MountToEnv field value if set, zero value otherwise.
func (o *ConfigMap) GetMountToEnv() MountToEnv {
	if o == nil || utils.IsNil(o.MountToEnv) {
		var ret MountToEnv
		return ret
	}
	return *o.MountToEnv
}

// GetMountToEnvOk returns a tuple with the MountToEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetMountToEnvOk() (*MountToEnv, bool) {
	if o == nil || utils.IsNil(o.MountToEnv) {
		return nil, false
	}
	return o.MountToEnv, true
}

// HasMountToEnv returns a boolean if a field has been set.
func (o *ConfigMap) HasMountToEnv() bool {
	if o != nil && !utils.IsNil(o.MountToEnv) {
		return true
	}

	return false
}

// SetMountToEnv gets a reference to the given MountToEnv and assigns it to the mountToEnv field.
// MountToEnv:
func (o *ConfigMap) SetMountToEnv(v MountToEnv) *ConfigMap {
	o.MountToEnv = &v
	return o
}

// GetMountToEnvs returns the MountToEnvs field value if set, zero value otherwise.
func (o *ConfigMap) GetMountToEnvs() []MountToEnvs {
	if o == nil || utils.IsNil(o.MountToEnvs) {
		var ret []MountToEnvs
		return ret
	}
	return o.MountToEnvs
}

// GetMountToEnvsOk returns a tuple with the MountToEnvs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetMountToEnvsOk() ([]MountToEnvs, bool) {
	if o == nil || utils.IsNil(o.MountToEnvs) {
		return nil, false
	}
	return o.MountToEnvs, true
}

// HasMountToEnvs returns a boolean if a field has been set.
func (o *ConfigMap) HasMountToEnvs() bool {
	if o != nil && !utils.IsNil(o.MountToEnvs) {
		return true
	}

	return false
}

// SetMountToEnvs gets a reference to the given []MountToEnvs and assigns it to the mountToEnvs field.
// MountToEnvs:
func (o *ConfigMap) SetMountToEnvs(v []MountToEnvs) *ConfigMap {
	o.MountToEnvs = v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigMap) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigMap) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the name field.
// Name:
func (o *ConfigMap) SetName(v string) *ConfigMap {
	o.Name = &v
	return o
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *ConfigMap) GetReadOnly() bool {
	if o == nil || utils.IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetReadOnlyOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *ConfigMap) HasReadOnly() bool {
	if o != nil && !utils.IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the readOnly field.
// ReadOnly:
func (o *ConfigMap) SetReadOnly(v bool) *ConfigMap {
	o.ReadOnly = &v
	return o
}

// GetSubPath returns the SubPath field value if set, zero value otherwise.
func (o *ConfigMap) GetSubPath() string {
	if o == nil || utils.IsNil(o.SubPath) {
		var ret string
		return ret
	}
	return *o.SubPath
}

// GetSubPathOk returns a tuple with the SubPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMap) GetSubPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SubPath) {
		return nil, false
	}
	return o.SubPath, true
}

// HasSubPath returns a boolean if a field has been set.
func (o *ConfigMap) HasSubPath() bool {
	if o != nil && !utils.IsNil(o.SubPath) {
		return true
	}

	return false
}

// SetSubPath gets a reference to the given string and assigns it to the subPath field.
// SubPath:
func (o *ConfigMap) SetSubPath(v string) *ConfigMap {
	o.SubPath = &v
	return o
}

func (o ConfigMap) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !utils.IsNil(o.DefaultMode) {
		toSerialize["defaultMode"] = o.DefaultMode
	}
	if !utils.IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !utils.IsNil(o.MountOnly) {
		toSerialize["mountOnly"] = o.MountOnly
	}
	if !utils.IsNil(o.MountPath) {
		toSerialize["mountPath"] = o.MountPath
	}
	if !utils.IsNil(o.MountToEnv) {
		toSerialize["mountToEnv"] = o.MountToEnv
	}
	if !utils.IsNil(o.MountToEnvs) {
		toSerialize["mountToEnvs"] = o.MountToEnvs
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !utils.IsNil(o.SubPath) {
		toSerialize["subPath"] = o.SubPath
	}
	return toSerialize, nil
}

type NullableConfigMap struct {
	value *ConfigMap
	isSet bool
}

func (v NullableConfigMap) Get() *ConfigMap {
	return v.value
}

func (v *NullableConfigMap) Set(val *ConfigMap) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigMap) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigMap(val *ConfigMap) *NullableConfigMap {
	return &NullableConfigMap{value: val, isSet: true}
}

func (v NullableConfigMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
