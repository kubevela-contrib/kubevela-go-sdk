/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Pvc type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Pvc{}

// Pvc struct for Pvc
type Pvc struct {
	AccessModes      []string       `json:"accessModes"`
	DataSource       *DataSource    `json:"dataSource,omitempty"`
	DataSourceRef    *DataSourceRef `json:"dataSourceRef,omitempty"`
	MountOnly        *bool          `json:"mountOnly"`
	MountPath        *string        `json:"mountPath"`
	Name             *string        `json:"name"`
	Resources        *Resources     `json:"resources,omitempty"`
	Selector         *Selector      `json:"selector,omitempty"`
	StorageClassName *string        `json:"storageClassName,omitempty"`
	SubPath          *string        `json:"subPath,omitempty"`
	VolumeMode       *string        `json:"volumeMode"`
	VolumeName       *string        `json:"volumeName,omitempty"`
}

// NewPvcWith instantiates a new Pvc object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPvcWith(accessModes []string, mountOnly bool, mountPath string, name string, volumeMode string) *Pvc {
	this := Pvc{}
	this.AccessModes = accessModes
	this.MountOnly = &mountOnly
	this.MountPath = &mountPath
	this.Name = &name
	this.VolumeMode = &volumeMode
	return &this
}

// NewPvcWithDefault instantiates a new Pvc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPvcWithDefault() *Pvc {
	this := Pvc{}
	var mountOnly bool = false
	this.MountOnly = &mountOnly
	var volumeMode string = "Filesystem"
	this.VolumeMode = &volumeMode
	return &this
}

// NewPvc is short for NewPvcWithDefault which instantiates a new Pvc object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPvc() *Pvc {
	return NewPvcWithDefault()
}

// NewPvcEmpty instantiates a new Pvc object with no properties set.
// This constructor will not assign any default values to properties.
func NewPvcEmpty() *Pvc {
	this := Pvc{}
	return &this
}

// NewPvcs converts a list Pvc pointers to objects.
// This is helpful when the SetPvc requires a list of objects
func NewPvcList(ps ...*Pvc) []Pvc {
	objs := []Pvc{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Pvc
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Pvc) Validate() error {
	if o.AccessModes == nil {
		return errors.New("AccessModes in Pvc must be set")
	}
	if o.MountOnly == nil {
		return errors.New("MountOnly in Pvc must be set")
	}
	if o.MountPath == nil {
		return errors.New("MountPath in Pvc must be set")
	}
	if o.Name == nil {
		return errors.New("Name in Pvc must be set")
	}
	if o.VolumeMode == nil {
		return errors.New("VolumeMode in Pvc must be set")
	}
	// validate all nested properties
	if o.DataSource != nil {
		if err := o.DataSource.Validate(); err != nil {
			return err
		}
	}
	if o.DataSourceRef != nil {
		if err := o.DataSourceRef.Validate(); err != nil {
			return err
		}
	}
	if o.Resources != nil {
		if err := o.Resources.Validate(); err != nil {
			return err
		}
	}
	if o.Selector != nil {
		if err := o.Selector.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetAccessModes returns the AccessModes field value
func (o *Pvc) GetAccessModes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AccessModes
}

// GetAccessModesOk returns a tuple with the AccessModes field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetAccessModesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessModes, true
}

// SetAccessModes sets field value
func (o *Pvc) SetAccessModes(v []string) *Pvc {
	o.AccessModes = v
	return o
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *Pvc) GetDataSource() DataSource {
	if o == nil || utils.IsNil(o.DataSource) {
		var ret DataSource
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetDataSourceOk() (*DataSource, bool) {
	if o == nil || utils.IsNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *Pvc) HasDataSource() bool {
	if o != nil && !utils.IsNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given DataSource and assigns it to the dataSource field.
// DataSource:
func (o *Pvc) SetDataSource(v DataSource) *Pvc {
	o.DataSource = &v
	return o
}

// GetDataSourceRef returns the DataSourceRef field value if set, zero value otherwise.
func (o *Pvc) GetDataSourceRef() DataSourceRef {
	if o == nil || utils.IsNil(o.DataSourceRef) {
		var ret DataSourceRef
		return ret
	}
	return *o.DataSourceRef
}

// GetDataSourceRefOk returns a tuple with the DataSourceRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetDataSourceRefOk() (*DataSourceRef, bool) {
	if o == nil || utils.IsNil(o.DataSourceRef) {
		return nil, false
	}
	return o.DataSourceRef, true
}

// HasDataSourceRef returns a boolean if a field has been set.
func (o *Pvc) HasDataSourceRef() bool {
	if o != nil && !utils.IsNil(o.DataSourceRef) {
		return true
	}

	return false
}

// SetDataSourceRef gets a reference to the given DataSourceRef and assigns it to the dataSourceRef field.
// DataSourceRef:
func (o *Pvc) SetDataSourceRef(v DataSourceRef) *Pvc {
	o.DataSourceRef = &v
	return o
}

// GetMountOnly returns the MountOnly field value
func (o *Pvc) GetMountOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.MountOnly
}

// GetMountOnlyOk returns a tuple with the MountOnly field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetMountOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountOnly, true
}

// SetMountOnly sets field value
func (o *Pvc) SetMountOnly(v bool) *Pvc {
	o.MountOnly = &v
	return o
}

// GetMountPath returns the MountPath field value
func (o *Pvc) GetMountPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.MountPath
}

// GetMountPathOk returns a tuple with the MountPath field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetMountPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountPath, true
}

// SetMountPath sets field value
func (o *Pvc) SetMountPath(v string) *Pvc {
	o.MountPath = &v
	return o
}

// GetName returns the Name field value
func (o *Pvc) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *Pvc) SetName(v string) *Pvc {
	o.Name = &v
	return o
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *Pvc) GetResources() Resources {
	if o == nil || utils.IsNil(o.Resources) {
		var ret Resources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetResourcesOk() (*Resources, bool) {
	if o == nil || utils.IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *Pvc) HasResources() bool {
	if o != nil && !utils.IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given Resources and assigns it to the resources field.
// Resources:
func (o *Pvc) SetResources(v Resources) *Pvc {
	o.Resources = &v
	return o
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *Pvc) GetSelector() Selector {
	if o == nil || utils.IsNil(o.Selector) {
		var ret Selector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetSelectorOk() (*Selector, bool) {
	if o == nil || utils.IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *Pvc) HasSelector() bool {
	if o != nil && !utils.IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given Selector and assigns it to the selector field.
// Selector:
func (o *Pvc) SetSelector(v Selector) *Pvc {
	o.Selector = &v
	return o
}

// GetStorageClassName returns the StorageClassName field value if set, zero value otherwise.
func (o *Pvc) GetStorageClassName() string {
	if o == nil || utils.IsNil(o.StorageClassName) {
		var ret string
		return ret
	}
	return *o.StorageClassName
}

// GetStorageClassNameOk returns a tuple with the StorageClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetStorageClassNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.StorageClassName) {
		return nil, false
	}
	return o.StorageClassName, true
}

// HasStorageClassName returns a boolean if a field has been set.
func (o *Pvc) HasStorageClassName() bool {
	if o != nil && !utils.IsNil(o.StorageClassName) {
		return true
	}

	return false
}

// SetStorageClassName gets a reference to the given string and assigns it to the storageClassName field.
// StorageClassName:
func (o *Pvc) SetStorageClassName(v string) *Pvc {
	o.StorageClassName = &v
	return o
}

// GetSubPath returns the SubPath field value if set, zero value otherwise.
func (o *Pvc) GetSubPath() string {
	if o == nil || utils.IsNil(o.SubPath) {
		var ret string
		return ret
	}
	return *o.SubPath
}

// GetSubPathOk returns a tuple with the SubPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetSubPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SubPath) {
		return nil, false
	}
	return o.SubPath, true
}

// HasSubPath returns a boolean if a field has been set.
func (o *Pvc) HasSubPath() bool {
	if o != nil && !utils.IsNil(o.SubPath) {
		return true
	}

	return false
}

// SetSubPath gets a reference to the given string and assigns it to the subPath field.
// SubPath:
func (o *Pvc) SetSubPath(v string) *Pvc {
	o.SubPath = &v
	return o
}

// GetVolumeMode returns the VolumeMode field value
func (o *Pvc) GetVolumeMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.VolumeMode
}

// GetVolumeModeOk returns a tuple with the VolumeMode field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetVolumeModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeMode, true
}

// SetVolumeMode sets field value
func (o *Pvc) SetVolumeMode(v string) *Pvc {
	o.VolumeMode = &v
	return o
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *Pvc) GetVolumeName() string {
	if o == nil || utils.IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pvc) GetVolumeNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *Pvc) HasVolumeName() bool {
	if o != nil && !utils.IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the volumeName field.
// VolumeName:
func (o *Pvc) SetVolumeName(v string) *Pvc {
	o.VolumeName = &v
	return o
}

func (o Pvc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pvc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessModes"] = o.AccessModes
	if !utils.IsNil(o.DataSource) {
		toSerialize["dataSource"] = o.DataSource
	}
	if !utils.IsNil(o.DataSourceRef) {
		toSerialize["dataSourceRef"] = o.DataSourceRef
	}
	toSerialize["mountOnly"] = o.MountOnly
	toSerialize["mountPath"] = o.MountPath
	toSerialize["name"] = o.Name
	if !utils.IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !utils.IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !utils.IsNil(o.StorageClassName) {
		toSerialize["storageClassName"] = o.StorageClassName
	}
	if !utils.IsNil(o.SubPath) {
		toSerialize["subPath"] = o.SubPath
	}
	toSerialize["volumeMode"] = o.VolumeMode
	if !utils.IsNil(o.VolumeName) {
		toSerialize["volumeName"] = o.VolumeName
	}
	return toSerialize, nil
}

type NullablePvc struct {
	value *Pvc
	isSet bool
}

func (v *NullablePvc) Get() *Pvc {
	return v.value
}

func (v *NullablePvc) Set(val *Pvc) {
	v.value = val
	v.isSet = true
}

func (v *NullablePvc) IsSet() bool {
	return v.isSet
}

func (v *NullablePvc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePvc(val *Pvc) *NullablePvc {
	return &NullablePvc{value: val, isSet: true}
}

func (v NullablePvc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePvc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
