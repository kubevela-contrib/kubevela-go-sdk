/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the DataSourceRef type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DataSourceRef{}

// DataSourceRef struct for DataSourceRef
type DataSourceRef struct {
	ApiGroup *string `json:"apiGroup"`
	Kind     *string `json:"kind"`
	Name     *string `json:"name"`
}

// NewDataSourceRefWith instantiates a new DataSourceRef object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewDataSourceRefWith(apiGroup string, kind string, name string) *DataSourceRef {
	this := DataSourceRef{}
	this.ApiGroup = &apiGroup
	this.Kind = &kind
	this.Name = &name
	return &this
}

// NewDataSourceRefWithDefault instantiates a new DataSourceRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceRefWithDefault() *DataSourceRef {
	this := DataSourceRef{}
	return &this
}

// NewDataSourceRef is short for NewDataSourceRefWithDefault which instantiates a new DataSourceRef object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceRef() *DataSourceRef {
	return NewDataSourceRefWithDefault()
}

// NewDataSourceRefEmpty instantiates a new DataSourceRef object with no properties set.
// This constructor will not assign any default values to properties.
func NewDataSourceRefEmpty() *DataSourceRef {
	this := DataSourceRef{}
	return &this
}

// NewDataSourceRefs converts a list DataSourceRef pointers to objects.
// This is helpful when the SetDataSourceRef requires a list of objects
func NewDataSourceRefList(ps ...*DataSourceRef) []DataSourceRef {
	objs := []DataSourceRef{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this DataSourceRef
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *DataSourceRef) Validate() error {
	if o.ApiGroup == nil {
		return errors.New("ApiGroup in DataSourceRef must be set")
	}
	if o.Kind == nil {
		return errors.New("Kind in DataSourceRef must be set")
	}
	if o.Name == nil {
		return errors.New("Name in DataSourceRef must be set")
	}
	// validate all nested properties
	return nil
}

// GetApiGroup returns the ApiGroup field value
func (o *DataSourceRef) GetApiGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.ApiGroup
}

// GetApiGroupOk returns a tuple with the ApiGroup field value
// and a boolean to check if the value has been set.
func (o *DataSourceRef) GetApiGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiGroup, true
}

// SetApiGroup sets field value
func (o *DataSourceRef) SetApiGroup(v string) *DataSourceRef {
	o.ApiGroup = &v
	return o
}

// GetKind returns the Kind field value
func (o *DataSourceRef) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *DataSourceRef) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kind, true
}

// SetKind sets field value
func (o *DataSourceRef) SetKind(v string) *DataSourceRef {
	o.Kind = &v
	return o
}

// GetName returns the Name field value
func (o *DataSourceRef) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataSourceRef) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *DataSourceRef) SetName(v string) *DataSourceRef {
	o.Name = &v
	return o
}

func (o DataSourceRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSourceRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiGroup"] = o.ApiGroup
	toSerialize["kind"] = o.Kind
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableDataSourceRef struct {
	value *DataSourceRef
	isSet bool
}

func (v *NullableDataSourceRef) Get() *DataSourceRef {
	return v.value
}

func (v *NullableDataSourceRef) Set(val *DataSourceRef) {
	v.value = val
	v.isSet = true
}

func (v *NullableDataSourceRef) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceRef(val *DataSourceRef) *NullableDataSourceRef {
	return &NullableDataSourceRef{value: val, isSet: true}
}

func (v NullableDataSourceRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
