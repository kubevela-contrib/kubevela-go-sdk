/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Selector type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Selector{}

// Selector struct for Selector
type Selector struct {
	MatchExpressions *MatchExpressions `json:"matchExpressions,omitempty"`
	MatchLabels      map[string]string `json:"matchLabels,omitempty"`
}

// NewSelectorWith instantiates a new Selector object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewSelectorWith() *Selector {
	this := Selector{}
	return &this
}

// NewSelectorWithDefault instantiates a new Selector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorWithDefault() *Selector {
	this := Selector{}
	return &this
}

// NewSelector is short for NewSelectorWithDefault which instantiates a new Selector object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelector() *Selector {
	return NewSelectorWithDefault()
}

// NewSelectorEmpty instantiates a new Selector object with no properties set.
// This constructor will not assign any default values to properties.
func NewSelectorEmpty() *Selector {
	this := Selector{}
	return &this
}

// NewSelectors converts a list Selector pointers to objects.
// This is helpful when the SetSelector requires a list of objects
func NewSelectorList(ps ...*Selector) []Selector {
	objs := []Selector{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Selector
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Selector) Validate() error {
	// validate all nested properties
	if o.MatchExpressions != nil {
		if err := o.MatchExpressions.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetMatchExpressions returns the MatchExpressions field value if set, zero value otherwise.
func (o *Selector) GetMatchExpressions() MatchExpressions {
	if o == nil || utils.IsNil(o.MatchExpressions) {
		var ret MatchExpressions
		return ret
	}
	return *o.MatchExpressions
}

// GetMatchExpressionsOk returns a tuple with the MatchExpressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Selector) GetMatchExpressionsOk() (*MatchExpressions, bool) {
	if o == nil || utils.IsNil(o.MatchExpressions) {
		return nil, false
	}
	return o.MatchExpressions, true
}

// HasMatchExpressions returns a boolean if a field has been set.
func (o *Selector) HasMatchExpressions() bool {
	if o != nil && !utils.IsNil(o.MatchExpressions) {
		return true
	}

	return false
}

// SetMatchExpressions gets a reference to the given MatchExpressions and assigns it to the matchExpressions field.
// MatchExpressions:
func (o *Selector) SetMatchExpressions(v MatchExpressions) *Selector {
	o.MatchExpressions = &v
	return o
}

// GetMatchLabels returns the MatchLabels field value if set, zero value otherwise.
func (o *Selector) GetMatchLabels() map[string]string {
	if o == nil || utils.IsNil(o.MatchLabels) {
		var ret map[string]string
		return ret
	}
	return o.MatchLabels
}

// GetMatchLabelsOk returns a tuple with the MatchLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Selector) GetMatchLabelsOk() (map[string]string, bool) {
	if o == nil || utils.IsNil(o.MatchLabels) {
		return nil, false
	}
	return o.MatchLabels, true
}

// HasMatchLabels returns a boolean if a field has been set.
func (o *Selector) HasMatchLabels() bool {
	if o != nil && !utils.IsNil(o.MatchLabels) {
		return true
	}

	return false
}

// SetMatchLabels gets a reference to the given map[string]string and assigns it to the matchLabels field.
// MatchLabels:
func (o *Selector) SetMatchLabels(v map[string]string) *Selector {
	o.MatchLabels = v
	return o
}

func (o Selector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Selector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.MatchExpressions) {
		toSerialize["matchExpressions"] = o.MatchExpressions
	}
	if !utils.IsNil(o.MatchLabels) {
		toSerialize["matchLabels"] = o.MatchLabels
	}
	return toSerialize, nil
}

type NullableSelector struct {
	value *Selector
	isSet bool
}

func (v *NullableSelector) Get() *Selector {
	return v.value
}

func (v *NullableSelector) Set(val *Selector) {
	v.value = val
	v.isSet = true
}

func (v *NullableSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelector(val *Selector) *NullableSelector {
	return &NullableSelector{value: val, isSet: true}
}

func (v NullableSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
