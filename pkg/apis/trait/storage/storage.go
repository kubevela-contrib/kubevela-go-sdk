/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the StorageSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &StorageSpec{}

// StorageSpec struct for StorageSpec
type StorageSpec struct {
	// Declare config map type storage
	ConfigMap []ConfigMap `json:"configMap,omitempty"`
	// Declare empty dir type storage
	EmptyDir []EmptyDir `json:"emptyDir,omitempty"`
	// Declare host path type storage
	HostPath []HostPath `json:"hostPath,omitempty"`
	// Declare pvc type storage
	Pvc []Pvc `json:"pvc,omitempty"`
	// Declare secret type storage
	Secret []Secret `json:"secret,omitempty"`
}

// NewStorageSpecWith instantiates a new StorageSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewStorageSpecWith() *StorageSpec {
	this := StorageSpec{}
	return &this
}

// NewStorageSpecWithDefault instantiates a new StorageSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSpecWithDefault() *StorageSpec {
	this := StorageSpec{}
	return &this
}

// NewStorageSpec is short for NewStorageSpecWithDefault which instantiates a new StorageSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSpec() *StorageSpec {
	return NewStorageSpecWithDefault()
}

// NewStorageSpecEmpty instantiates a new StorageSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewStorageSpecEmpty() *StorageSpec {
	this := StorageSpec{}
	return &this
}

// NewStorageSpecs converts a list StorageSpec pointers to objects.
// This is helpful when the SetStorageSpec requires a list of objects
func NewStorageSpecList(ps ...*StorageSpec) []StorageSpec {
	objs := []StorageSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this StorageSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *StorageTrait) Validate() error {
	// validate all nested properties
	return nil
}

// GetConfigMap returns the ConfigMap field value if set, zero value otherwise.
func (o *StorageTrait) GetConfigMap() []ConfigMap {
	if o == nil || utils.IsNil(o.Properties.ConfigMap) {
		var ret []ConfigMap
		return ret
	}
	return o.Properties.ConfigMap
}

// GetConfigMapOk returns a tuple with the ConfigMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageTrait) GetConfigMapOk() ([]ConfigMap, bool) {
	if o == nil || utils.IsNil(o.Properties.ConfigMap) {
		return nil, false
	}
	return o.Properties.ConfigMap, true
}

// HasConfigMap returns a boolean if a field has been set.
func (o *StorageTrait) HasConfigMap() bool {
	if o != nil && !utils.IsNil(o.Properties.ConfigMap) {
		return true
	}

	return false
}

// SetConfigMap gets a reference to the given []ConfigMap and assigns it to the configMap field.
// ConfigMap:  Declare config map type storage
func (o *StorageTrait) SetConfigMap(v []ConfigMap) *StorageTrait {
	o.Properties.ConfigMap = v
	return o
}

// GetEmptyDir returns the EmptyDir field value if set, zero value otherwise.
func (o *StorageTrait) GetEmptyDir() []EmptyDir {
	if o == nil || utils.IsNil(o.Properties.EmptyDir) {
		var ret []EmptyDir
		return ret
	}
	return o.Properties.EmptyDir
}

// GetEmptyDirOk returns a tuple with the EmptyDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageTrait) GetEmptyDirOk() ([]EmptyDir, bool) {
	if o == nil || utils.IsNil(o.Properties.EmptyDir) {
		return nil, false
	}
	return o.Properties.EmptyDir, true
}

// HasEmptyDir returns a boolean if a field has been set.
func (o *StorageTrait) HasEmptyDir() bool {
	if o != nil && !utils.IsNil(o.Properties.EmptyDir) {
		return true
	}

	return false
}

// SetEmptyDir gets a reference to the given []EmptyDir and assigns it to the emptyDir field.
// EmptyDir:  Declare empty dir type storage
func (o *StorageTrait) SetEmptyDir(v []EmptyDir) *StorageTrait {
	o.Properties.EmptyDir = v
	return o
}

// GetHostPath returns the HostPath field value if set, zero value otherwise.
func (o *StorageTrait) GetHostPath() []HostPath {
	if o == nil || utils.IsNil(o.Properties.HostPath) {
		var ret []HostPath
		return ret
	}
	return o.Properties.HostPath
}

// GetHostPathOk returns a tuple with the HostPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageTrait) GetHostPathOk() ([]HostPath, bool) {
	if o == nil || utils.IsNil(o.Properties.HostPath) {
		return nil, false
	}
	return o.Properties.HostPath, true
}

// HasHostPath returns a boolean if a field has been set.
func (o *StorageTrait) HasHostPath() bool {
	if o != nil && !utils.IsNil(o.Properties.HostPath) {
		return true
	}

	return false
}

// SetHostPath gets a reference to the given []HostPath and assigns it to the hostPath field.
// HostPath:  Declare host path type storage
func (o *StorageTrait) SetHostPath(v []HostPath) *StorageTrait {
	o.Properties.HostPath = v
	return o
}

// GetPvc returns the Pvc field value if set, zero value otherwise.
func (o *StorageTrait) GetPvc() []Pvc {
	if o == nil || utils.IsNil(o.Properties.Pvc) {
		var ret []Pvc
		return ret
	}
	return o.Properties.Pvc
}

// GetPvcOk returns a tuple with the Pvc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageTrait) GetPvcOk() ([]Pvc, bool) {
	if o == nil || utils.IsNil(o.Properties.Pvc) {
		return nil, false
	}
	return o.Properties.Pvc, true
}

// HasPvc returns a boolean if a field has been set.
func (o *StorageTrait) HasPvc() bool {
	if o != nil && !utils.IsNil(o.Properties.Pvc) {
		return true
	}

	return false
}

// SetPvc gets a reference to the given []Pvc and assigns it to the pvc field.
// Pvc:  Declare pvc type storage
func (o *StorageTrait) SetPvc(v []Pvc) *StorageTrait {
	o.Properties.Pvc = v
	return o
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *StorageTrait) GetSecret() []Secret {
	if o == nil || utils.IsNil(o.Properties.Secret) {
		var ret []Secret
		return ret
	}
	return o.Properties.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageTrait) GetSecretOk() ([]Secret, bool) {
	if o == nil || utils.IsNil(o.Properties.Secret) {
		return nil, false
	}
	return o.Properties.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *StorageTrait) HasSecret() bool {
	if o != nil && !utils.IsNil(o.Properties.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given []Secret and assigns it to the secret field.
// Secret:  Declare secret type storage
func (o *StorageTrait) SetSecret(v []Secret) *StorageTrait {
	o.Properties.Secret = v
	return o
}

func (o StorageSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ConfigMap) {
		toSerialize["configMap"] = o.ConfigMap
	}
	if !utils.IsNil(o.EmptyDir) {
		toSerialize["emptyDir"] = o.EmptyDir
	}
	if !utils.IsNil(o.HostPath) {
		toSerialize["hostPath"] = o.HostPath
	}
	if !utils.IsNil(o.Pvc) {
		toSerialize["pvc"] = o.Pvc
	}
	if !utils.IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableStorageSpec struct {
	value *StorageSpec
	isSet bool
}

func (v *NullableStorageSpec) Get() *StorageSpec {
	return v.value
}

func (v *NullableStorageSpec) Set(val *StorageSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableStorageSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSpec(val *StorageSpec) *NullableStorageSpec {
	return &NullableStorageSpec{value: val, isSet: true}
}

func (v NullableStorageSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const StorageType = "storage"

func init() {
	sdkcommon.RegisterTrait(StorageType, FromTrait)
}

type StorageTrait struct {
	Base       apis.TraitBase
	Properties StorageSpec
}

func Storage() *StorageTrait {
	s := &StorageTrait{Base: apis.TraitBase{}}
	return s
}

func (s *StorageTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(s.Properties),
		Type:       StorageType,
	}
	return res
}

func (s *StorageTrait) FromTrait(from common.ApplicationTrait) (*StorageTrait, error) {
	var properties StorageSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	s.Base.Type = StorageType
	s.Properties = properties
	return s, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	s := &StorageTrait{}
	return s.FromTrait(from)
}

func (s *StorageTrait) DefType() string {
	return StorageType
}
