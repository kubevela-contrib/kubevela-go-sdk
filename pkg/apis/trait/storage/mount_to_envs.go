/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the MountToEnvs type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MountToEnvs{}

// MountToEnvs struct for MountToEnvs
type MountToEnvs struct {
	ConfigMapKey *string `json:"configMapKey"`
	EnvName      *string `json:"envName"`
}

// NewMountToEnvsWith instantiates a new MountToEnvs object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewMountToEnvsWith(configMapKey string, envName string) *MountToEnvs {
	this := MountToEnvs{}
	this.ConfigMapKey = &configMapKey
	this.EnvName = &envName
	return &this
}

// NewMountToEnvsWithDefault instantiates a new MountToEnvs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountToEnvsWithDefault() *MountToEnvs {
	this := MountToEnvs{}
	return &this
}

// NewMountToEnvs is short for NewMountToEnvsWithDefault which instantiates a new MountToEnvs object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountToEnvs() *MountToEnvs {
	return NewMountToEnvsWithDefault()
}

// NewMountToEnvsEmpty instantiates a new MountToEnvs object with no properties set.
// This constructor will not assign any default values to properties.
func NewMountToEnvsEmpty() *MountToEnvs {
	this := MountToEnvs{}
	return &this
}

// NewMountToEnvss converts a list MountToEnvs pointers to objects.
// This is helpful when the SetMountToEnvs requires a list of objects
func NewMountToEnvsList(ps ...*MountToEnvs) []MountToEnvs {
	objs := []MountToEnvs{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this MountToEnvs
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *MountToEnvs) Validate() error {
	if o.ConfigMapKey == nil {
		return errors.New("ConfigMapKey in MountToEnvs must be set")
	}
	if o.EnvName == nil {
		return errors.New("EnvName in MountToEnvs must be set")
	}
	// validate all nested properties
	return nil
}

// GetConfigMapKey returns the ConfigMapKey field value
func (o *MountToEnvs) GetConfigMapKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.ConfigMapKey
}

// GetConfigMapKeyOk returns a tuple with the ConfigMapKey field value
// and a boolean to check if the value has been set.
func (o *MountToEnvs) GetConfigMapKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigMapKey, true
}

// SetConfigMapKey sets field value
func (o *MountToEnvs) SetConfigMapKey(v string) *MountToEnvs {
	o.ConfigMapKey = &v
	return o
}

// GetEnvName returns the EnvName field value
func (o *MountToEnvs) GetEnvName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.EnvName
}

// GetEnvNameOk returns a tuple with the EnvName field value
// and a boolean to check if the value has been set.
func (o *MountToEnvs) GetEnvNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvName, true
}

// SetEnvName sets field value
func (o *MountToEnvs) SetEnvName(v string) *MountToEnvs {
	o.EnvName = &v
	return o
}

func (o MountToEnvs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MountToEnvs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configMapKey"] = o.ConfigMapKey
	toSerialize["envName"] = o.EnvName
	return toSerialize, nil
}

type NullableMountToEnvs struct {
	value *MountToEnvs
	isSet bool
}

func (v *NullableMountToEnvs) Get() *MountToEnvs {
	return v.value
}

func (v *NullableMountToEnvs) Set(val *MountToEnvs) {
	v.value = val
	v.isSet = true
}

func (v *NullableMountToEnvs) IsSet() bool {
	return v.isSet
}

func (v *NullableMountToEnvs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountToEnvs(val *MountToEnvs) *NullableMountToEnvs {
	return &NullableMountToEnvs{value: val, isSet: true}
}

func (v NullableMountToEnvs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountToEnvs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
