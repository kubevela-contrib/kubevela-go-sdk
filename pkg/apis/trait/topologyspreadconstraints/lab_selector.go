/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package topologyspreadconstraints

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the LabSelector type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &LabSelector{}

// LabSelector struct for LabSelector
type LabSelector struct {
	MatchExpressions []MatchExpressions `json:"matchExpressions,omitempty"`
	MatchLabels      map[string]string  `json:"matchLabels,omitempty"`
}

// NewLabSelectorWith instantiates a new LabSelector object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewLabSelectorWith() *LabSelector {
	this := LabSelector{}
	return &this
}

// NewLabSelectorWithDefault instantiates a new LabSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabSelectorWithDefault() *LabSelector {
	this := LabSelector{}
	return &this
}

// NewLabSelector is short for NewLabSelectorWithDefault which instantiates a new LabSelector object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabSelector() *LabSelector {
	return NewLabSelectorWithDefault()
}

// NewLabSelectorEmpty instantiates a new LabSelector object with no properties set.
// This constructor will not assign any default values to properties.
func NewLabSelectorEmpty() *LabSelector {
	this := LabSelector{}
	return &this
}

// NewLabSelectors converts a list LabSelector pointers to objects.
// This is helpful when the SetLabSelector requires a list of objects
func NewLabSelectorList(ps ...*LabSelector) []LabSelector {
	objs := []LabSelector{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this LabSelector
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *LabSelector) Validate() error {
	// validate all nested properties
	return nil
}

// GetMatchExpressions returns the MatchExpressions field value if set, zero value otherwise.
func (o *LabSelector) GetMatchExpressions() []MatchExpressions {
	if o == nil || utils.IsNil(o.MatchExpressions) {
		var ret []MatchExpressions
		return ret
	}
	return o.MatchExpressions
}

// GetMatchExpressionsOk returns a tuple with the MatchExpressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabSelector) GetMatchExpressionsOk() ([]MatchExpressions, bool) {
	if o == nil || utils.IsNil(o.MatchExpressions) {
		return nil, false
	}
	return o.MatchExpressions, true
}

// HasMatchExpressions returns a boolean if a field has been set.
func (o *LabSelector) HasMatchExpressions() bool {
	if o != nil && !utils.IsNil(o.MatchExpressions) {
		return true
	}

	return false
}

// SetMatchExpressions gets a reference to the given []MatchExpressions and assigns it to the matchExpressions field.
// MatchExpressions:
func (o *LabSelector) SetMatchExpressions(v []MatchExpressions) *LabSelector {
	o.MatchExpressions = v
	return o
}

// GetMatchLabels returns the MatchLabels field value if set, zero value otherwise.
func (o *LabSelector) GetMatchLabels() map[string]string {
	if o == nil || utils.IsNil(o.MatchLabels) {
		var ret map[string]string
		return ret
	}
	return o.MatchLabels
}

// GetMatchLabelsOk returns a tuple with the MatchLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabSelector) GetMatchLabelsOk() (map[string]string, bool) {
	if o == nil || utils.IsNil(o.MatchLabels) {
		return nil, false
	}
	return o.MatchLabels, true
}

// HasMatchLabels returns a boolean if a field has been set.
func (o *LabSelector) HasMatchLabels() bool {
	if o != nil && !utils.IsNil(o.MatchLabels) {
		return true
	}

	return false
}

// SetMatchLabels gets a reference to the given map[string]string and assigns it to the matchLabels field.
// MatchLabels:
func (o *LabSelector) SetMatchLabels(v map[string]string) *LabSelector {
	o.MatchLabels = v
	return o
}

func (o LabSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.MatchExpressions) {
		toSerialize["matchExpressions"] = o.MatchExpressions
	}
	if !utils.IsNil(o.MatchLabels) {
		toSerialize["matchLabels"] = o.MatchLabels
	}
	return toSerialize, nil
}

type NullableLabSelector struct {
	value *LabSelector
	isSet bool
}

func (v *NullableLabSelector) Get() *LabSelector {
	return v.value
}

func (v *NullableLabSelector) Set(val *LabSelector) {
	v.value = val
	v.isSet = true
}

func (v *NullableLabSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableLabSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabSelector(val *LabSelector) *NullableLabSelector {
	return &NullableLabSelector{value: val, isSet: true}
}

func (v NullableLabSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
