/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securitycontext

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the PatchParams type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PatchParams{}

// PatchParams struct for PatchParams
type PatchParams struct {
	AddCapabilities          []string `json:"addCapabilities,omitempty"`
	AllowPrivilegeEscalation *bool    `json:"allowPrivilegeEscalation"`
	// Specify the name of the target container, if not set, use the component name
	ContainerName          *string  `json:"containerName"`
	DropCapabilities       []string `json:"dropCapabilities,omitempty"`
	Privileged             *bool    `json:"privileged"`
	ReadOnlyRootFilesystem *bool    `json:"readOnlyRootFilesystem"`
	RunAsGroup             *int32   `json:"runAsGroup,omitempty"`
	RunAsNonRoot           *bool    `json:"runAsNonRoot"`
	RunAsUser              *int32   `json:"runAsUser,omitempty"`
}

// NewPatchParamsWith instantiates a new PatchParams object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPatchParamsWith(allowPrivilegeEscalation bool, containerName string, privileged bool, readOnlyRootFilesystem bool, runAsNonRoot bool) *PatchParams {
	this := PatchParams{}
	this.AllowPrivilegeEscalation = &allowPrivilegeEscalation
	this.ContainerName = &containerName
	this.Privileged = &privileged
	this.ReadOnlyRootFilesystem = &readOnlyRootFilesystem
	this.RunAsNonRoot = &runAsNonRoot
	return &this
}

// NewPatchParamsWithDefault instantiates a new PatchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchParamsWithDefault() *PatchParams {
	this := PatchParams{}
	var allowPrivilegeEscalation bool = false
	this.AllowPrivilegeEscalation = &allowPrivilegeEscalation
	var containerName string = ""
	this.ContainerName = &containerName
	var privileged bool = false
	this.Privileged = &privileged
	var readOnlyRootFilesystem bool = false
	this.ReadOnlyRootFilesystem = &readOnlyRootFilesystem
	var runAsNonRoot bool = true
	this.RunAsNonRoot = &runAsNonRoot
	return &this
}

// NewPatchParams is short for NewPatchParamsWithDefault which instantiates a new PatchParams object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchParams() *PatchParams {
	return NewPatchParamsWithDefault()
}

// NewPatchParamsEmpty instantiates a new PatchParams object with no properties set.
// This constructor will not assign any default values to properties.
func NewPatchParamsEmpty() *PatchParams {
	this := PatchParams{}
	return &this
}

// NewPatchParamss converts a list PatchParams pointers to objects.
// This is helpful when the SetPatchParams requires a list of objects
func NewPatchParamsList(ps ...*PatchParams) []PatchParams {
	objs := []PatchParams{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this PatchParams
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *PatchParams) Validate() error {
	if o.AllowPrivilegeEscalation == nil {
		return errors.New("AllowPrivilegeEscalation in PatchParams must be set")
	}
	if o.ContainerName == nil {
		return errors.New("ContainerName in PatchParams must be set")
	}
	if o.Privileged == nil {
		return errors.New("Privileged in PatchParams must be set")
	}
	if o.ReadOnlyRootFilesystem == nil {
		return errors.New("ReadOnlyRootFilesystem in PatchParams must be set")
	}
	if o.RunAsNonRoot == nil {
		return errors.New("RunAsNonRoot in PatchParams must be set")
	}
	// validate all nested properties
	return nil
}

// GetAddCapabilities returns the AddCapabilities field value if set, zero value otherwise.
func (o *PatchParams) GetAddCapabilities() []string {
	if o == nil || utils.IsNil(o.AddCapabilities) {
		var ret []string
		return ret
	}
	return o.AddCapabilities
}

// GetAddCapabilitiesOk returns a tuple with the AddCapabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetAddCapabilitiesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AddCapabilities) {
		return nil, false
	}
	return o.AddCapabilities, true
}

// HasAddCapabilities returns a boolean if a field has been set.
func (o *PatchParams) HasAddCapabilities() bool {
	if o != nil && !utils.IsNil(o.AddCapabilities) {
		return true
	}

	return false
}

// SetAddCapabilities gets a reference to the given []string and assigns it to the addCapabilities field.
// AddCapabilities:
func (o *PatchParams) SetAddCapabilities(v []string) *PatchParams {
	o.AddCapabilities = v
	return o
}

// GetAllowPrivilegeEscalation returns the AllowPrivilegeEscalation field value
func (o *PatchParams) GetAllowPrivilegeEscalation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.AllowPrivilegeEscalation
}

// GetAllowPrivilegeEscalationOk returns a tuple with the AllowPrivilegeEscalation field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetAllowPrivilegeEscalationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowPrivilegeEscalation, true
}

// SetAllowPrivilegeEscalation sets field value
func (o *PatchParams) SetAllowPrivilegeEscalation(v bool) *PatchParams {
	o.AllowPrivilegeEscalation = &v
	return o
}

// GetContainerName returns the ContainerName field value
func (o *PatchParams) GetContainerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContainerName, true
}

// SetContainerName sets field value
func (o *PatchParams) SetContainerName(v string) *PatchParams {
	o.ContainerName = &v
	return o
}

// GetDropCapabilities returns the DropCapabilities field value if set, zero value otherwise.
func (o *PatchParams) GetDropCapabilities() []string {
	if o == nil || utils.IsNil(o.DropCapabilities) {
		var ret []string
		return ret
	}
	return o.DropCapabilities
}

// GetDropCapabilitiesOk returns a tuple with the DropCapabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetDropCapabilitiesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.DropCapabilities) {
		return nil, false
	}
	return o.DropCapabilities, true
}

// HasDropCapabilities returns a boolean if a field has been set.
func (o *PatchParams) HasDropCapabilities() bool {
	if o != nil && !utils.IsNil(o.DropCapabilities) {
		return true
	}

	return false
}

// SetDropCapabilities gets a reference to the given []string and assigns it to the dropCapabilities field.
// DropCapabilities:
func (o *PatchParams) SetDropCapabilities(v []string) *PatchParams {
	o.DropCapabilities = v
	return o
}

// GetPrivileged returns the Privileged field value
func (o *PatchParams) GetPrivileged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Privileged
}

// GetPrivilegedOk returns a tuple with the Privileged field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetPrivilegedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Privileged, true
}

// SetPrivileged sets field value
func (o *PatchParams) SetPrivileged(v bool) *PatchParams {
	o.Privileged = &v
	return o
}

// GetReadOnlyRootFilesystem returns the ReadOnlyRootFilesystem field value
func (o *PatchParams) GetReadOnlyRootFilesystem() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.ReadOnlyRootFilesystem
}

// GetReadOnlyRootFilesystemOk returns a tuple with the ReadOnlyRootFilesystem field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetReadOnlyRootFilesystemOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReadOnlyRootFilesystem, true
}

// SetReadOnlyRootFilesystem sets field value
func (o *PatchParams) SetReadOnlyRootFilesystem(v bool) *PatchParams {
	o.ReadOnlyRootFilesystem = &v
	return o
}

// GetRunAsGroup returns the RunAsGroup field value if set, zero value otherwise.
func (o *PatchParams) GetRunAsGroup() int32 {
	if o == nil || utils.IsNil(o.RunAsGroup) {
		var ret int32
		return ret
	}
	return *o.RunAsGroup
}

// GetRunAsGroupOk returns a tuple with the RunAsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetRunAsGroupOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RunAsGroup) {
		return nil, false
	}
	return o.RunAsGroup, true
}

// HasRunAsGroup returns a boolean if a field has been set.
func (o *PatchParams) HasRunAsGroup() bool {
	if o != nil && !utils.IsNil(o.RunAsGroup) {
		return true
	}

	return false
}

// SetRunAsGroup gets a reference to the given int32 and assigns it to the runAsGroup field.
// RunAsGroup:
func (o *PatchParams) SetRunAsGroup(v int32) *PatchParams {
	o.RunAsGroup = &v
	return o
}

// GetRunAsNonRoot returns the RunAsNonRoot field value
func (o *PatchParams) GetRunAsNonRoot() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.RunAsNonRoot
}

// GetRunAsNonRootOk returns a tuple with the RunAsNonRoot field value
// and a boolean to check if the value has been set.
func (o *PatchParams) GetRunAsNonRootOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunAsNonRoot, true
}

// SetRunAsNonRoot sets field value
func (o *PatchParams) SetRunAsNonRoot(v bool) *PatchParams {
	o.RunAsNonRoot = &v
	return o
}

// GetRunAsUser returns the RunAsUser field value if set, zero value otherwise.
func (o *PatchParams) GetRunAsUser() int32 {
	if o == nil || utils.IsNil(o.RunAsUser) {
		var ret int32
		return ret
	}
	return *o.RunAsUser
}

// GetRunAsUserOk returns a tuple with the RunAsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetRunAsUserOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RunAsUser) {
		return nil, false
	}
	return o.RunAsUser, true
}

// HasRunAsUser returns a boolean if a field has been set.
func (o *PatchParams) HasRunAsUser() bool {
	if o != nil && !utils.IsNil(o.RunAsUser) {
		return true
	}

	return false
}

// SetRunAsUser gets a reference to the given int32 and assigns it to the runAsUser field.
// RunAsUser:
func (o *PatchParams) SetRunAsUser(v int32) *PatchParams {
	o.RunAsUser = &v
	return o
}

func (o PatchParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AddCapabilities) {
		toSerialize["addCapabilities"] = o.AddCapabilities
	}
	toSerialize["allowPrivilegeEscalation"] = o.AllowPrivilegeEscalation
	toSerialize["containerName"] = o.ContainerName
	if !utils.IsNil(o.DropCapabilities) {
		toSerialize["dropCapabilities"] = o.DropCapabilities
	}
	toSerialize["privileged"] = o.Privileged
	toSerialize["readOnlyRootFilesystem"] = o.ReadOnlyRootFilesystem
	if !utils.IsNil(o.RunAsGroup) {
		toSerialize["runAsGroup"] = o.RunAsGroup
	}
	toSerialize["runAsNonRoot"] = o.RunAsNonRoot
	if !utils.IsNil(o.RunAsUser) {
		toSerialize["runAsUser"] = o.RunAsUser
	}
	return toSerialize, nil
}

type NullablePatchParams struct {
	value *PatchParams
	isSet bool
}

func (v *NullablePatchParams) Get() *PatchParams {
	return v.value
}

func (v *NullablePatchParams) Set(val *PatchParams) {
	v.value = val
	v.isSet = true
}

func (v *NullablePatchParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchParams(val *PatchParams) *NullablePatchParams {
	return &NullablePatchParams{value: val, isSet: true}
}

func (v NullablePatchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
