/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statefulset

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the StatefulsetSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &StatefulsetSpec{}

// StatefulsetSpec struct for StatefulsetSpec
type StatefulsetSpec struct {
	AddRevisionLabel *bool `json:"addRevisionLabel"`
	// Specify the annotations in the workload
	Annotations map[string]string `json:"annotations,omitempty"`
	// Arguments to the entrypoint
	Args []string `json:"args,omitempty"`
	// Commands to run in the container
	Cmd []string `json:"cmd,omitempty"`
	// Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
	Cpu *string `json:"cpu,omitempty"`
	// Define arguments by using environment variables
	Env        []Env   `json:"env,omitempty"`
	ExposeType *string `json:"exposeType"`
	// Specify the hostAliases to add
	HostAliases []HostAliases `json:"hostAliases,omitempty"`
	// Which image would you like to use for your service +short=i
	Image *string `json:"image"`
	// Specify image pull policy for your service
	ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	// Specify image pull secrets for your service
	ImagePullSecrets []string `json:"imagePullSecrets,omitempty"`
	// Specify the labels in the workload
	Labels        map[string]string `json:"labels,omitempty"`
	LivenessProbe *HealthProbe      `json:"livenessProbe,omitempty"`
	// Specifies the attributes of the memory resource required for the container.
	Memory *string `json:"memory,omitempty"`
	Port   *int32  `json:"port,omitempty"`
	// Which ports do you want customer traffic sent to, defaults to 80
	Ports          []Ports       `json:"ports,omitempty"`
	ReadinessProbe *HealthProbe  `json:"readinessProbe,omitempty"`
	VolumeMounts   *VolumeMounts `json:"volumeMounts,omitempty"`
	// Deprecated field, use volumeMounts instead.
	Volumes []Volumes `json:"volumes,omitempty"`
}

// NewStatefulsetSpecWith instantiates a new StatefulsetSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewStatefulsetSpecWith(addRevisionLabel bool, exposeType string, image string) *StatefulsetSpec {
	this := StatefulsetSpec{}
	this.AddRevisionLabel = &addRevisionLabel
	this.ExposeType = &exposeType
	this.Image = &image
	return &this
}

// NewStatefulsetSpecWithDefault instantiates a new StatefulsetSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatefulsetSpecWithDefault() *StatefulsetSpec {
	this := StatefulsetSpec{}
	var addRevisionLabel bool = false
	this.AddRevisionLabel = &addRevisionLabel
	var exposeType string = "ClusterIP"
	this.ExposeType = &exposeType
	return &this
}

// NewStatefulsetSpec is short for NewStatefulsetSpecWithDefault which instantiates a new StatefulsetSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatefulsetSpec() *StatefulsetSpec {
	return NewStatefulsetSpecWithDefault()
}

// NewStatefulsetSpecEmpty instantiates a new StatefulsetSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewStatefulsetSpecEmpty() *StatefulsetSpec {
	this := StatefulsetSpec{}
	return &this
}

// NewStatefulsetSpecs converts a list StatefulsetSpec pointers to objects.
// This is helpful when the SetStatefulsetSpec requires a list of objects
func NewStatefulsetSpecList(ps ...*StatefulsetSpec) []StatefulsetSpec {
	objs := []StatefulsetSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this StatefulsetSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *StatefulsetComponent) Validate() error {
	if o.Properties.AddRevisionLabel == nil {
		return errors.New("AddRevisionLabel in StatefulsetSpec must be set")
	}
	if o.Properties.ExposeType == nil {
		return errors.New("ExposeType in StatefulsetSpec must be set")
	}
	if o.Properties.Image == nil {
		return errors.New("Image in StatefulsetSpec must be set")
	}
	// validate all nested properties
	if o.Properties.LivenessProbe != nil {
		if err := o.Properties.LivenessProbe.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.ReadinessProbe != nil {
		if err := o.Properties.ReadinessProbe.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.VolumeMounts != nil {
		if err := o.Properties.VolumeMounts.Validate(); err != nil {
			return err
		}
	}

	for i, v := range o.Base.Traits {
		if err := v.Validate(); err != nil {
			return fmt.Errorf("traits[%d] %s in %s component is invalid: %w", i, v.DefType(), StatefulsetType, err)
		}
	}
	return nil
}

// GetAddRevisionLabel returns the AddRevisionLabel field value
func (o *StatefulsetComponent) GetAddRevisionLabel() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Properties.AddRevisionLabel
}

// GetAddRevisionLabelOk returns a tuple with the AddRevisionLabel field value
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetAddRevisionLabelOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.AddRevisionLabel, true
}

// SetAddRevisionLabel sets field value
func (o *StatefulsetComponent) SetAddRevisionLabel(v bool) *StatefulsetComponent {
	o.Properties.AddRevisionLabel = &v
	return o
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetAnnotations() map[string]string {
	if o == nil || utils.IsNil(o.Properties.Annotations) {
		var ret map[string]string
		return ret
	}
	return o.Properties.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetAnnotationsOk() (map[string]string, bool) {
	if o == nil || utils.IsNil(o.Properties.Annotations) {
		return nil, false
	}
	return o.Properties.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasAnnotations() bool {
	if o != nil && !utils.IsNil(o.Properties.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the annotations field.
// Annotations:  Specify the annotations in the workload
func (o *StatefulsetComponent) SetAnnotations(v map[string]string) *StatefulsetComponent {
	o.Properties.Annotations = v
	return o
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetArgs() []string {
	if o == nil || utils.IsNil(o.Properties.Args) {
		var ret []string
		return ret
	}
	return o.Properties.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.Args) {
		return nil, false
	}
	return o.Properties.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasArgs() bool {
	if o != nil && !utils.IsNil(o.Properties.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the args field.
// Args:  Arguments to the entrypoint
func (o *StatefulsetComponent) SetArgs(v []string) *StatefulsetComponent {
	o.Properties.Args = v
	return o
}

// GetCmd returns the Cmd field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetCmd() []string {
	if o == nil || utils.IsNil(o.Properties.Cmd) {
		var ret []string
		return ret
	}
	return o.Properties.Cmd
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetCmdOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.Cmd) {
		return nil, false
	}
	return o.Properties.Cmd, true
}

// HasCmd returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasCmd() bool {
	if o != nil && !utils.IsNil(o.Properties.Cmd) {
		return true
	}

	return false
}

// SetCmd gets a reference to the given []string and assigns it to the cmd field.
// Cmd:  Commands to run in the container
func (o *StatefulsetComponent) SetCmd(v []string) *StatefulsetComponent {
	o.Properties.Cmd = v
	return o
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetCpu() string {
	if o == nil || utils.IsNil(o.Properties.Cpu) {
		var ret string
		return ret
	}
	return *o.Properties.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetCpuOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Cpu) {
		return nil, false
	}
	return o.Properties.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasCpu() bool {
	if o != nil && !utils.IsNil(o.Properties.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given string and assigns it to the cpu field.
// Cpu:  Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
func (o *StatefulsetComponent) SetCpu(v string) *StatefulsetComponent {
	o.Properties.Cpu = &v
	return o
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetEnv() []Env {
	if o == nil || utils.IsNil(o.Properties.Env) {
		var ret []Env
		return ret
	}
	return o.Properties.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetEnvOk() ([]Env, bool) {
	if o == nil || utils.IsNil(o.Properties.Env) {
		return nil, false
	}
	return o.Properties.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasEnv() bool {
	if o != nil && !utils.IsNil(o.Properties.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []Env and assigns it to the env field.
// Env:  Define arguments by using environment variables
func (o *StatefulsetComponent) SetEnv(v []Env) *StatefulsetComponent {
	o.Properties.Env = v
	return o
}

// GetExposeType returns the ExposeType field value
func (o *StatefulsetComponent) GetExposeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.ExposeType
}

// GetExposeTypeOk returns a tuple with the ExposeType field value
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetExposeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.ExposeType, true
}

// SetExposeType sets field value
func (o *StatefulsetComponent) SetExposeType(v string) *StatefulsetComponent {
	o.Properties.ExposeType = &v
	return o
}

// GetHostAliases returns the HostAliases field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetHostAliases() []HostAliases {
	if o == nil || utils.IsNil(o.Properties.HostAliases) {
		var ret []HostAliases
		return ret
	}
	return o.Properties.HostAliases
}

// GetHostAliasesOk returns a tuple with the HostAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetHostAliasesOk() ([]HostAliases, bool) {
	if o == nil || utils.IsNil(o.Properties.HostAliases) {
		return nil, false
	}
	return o.Properties.HostAliases, true
}

// HasHostAliases returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasHostAliases() bool {
	if o != nil && !utils.IsNil(o.Properties.HostAliases) {
		return true
	}

	return false
}

// SetHostAliases gets a reference to the given []HostAliases and assigns it to the hostAliases field.
// HostAliases:  Specify the hostAliases to add
func (o *StatefulsetComponent) SetHostAliases(v []HostAliases) *StatefulsetComponent {
	o.Properties.HostAliases = v
	return o
}

// GetImage returns the Image field value
func (o *StatefulsetComponent) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Image, true
}

// SetImage sets field value
func (o *StatefulsetComponent) SetImage(v string) *StatefulsetComponent {
	o.Properties.Image = &v
	return o
}

// GetImagePullPolicy returns the ImagePullPolicy field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetImagePullPolicy() string {
	if o == nil || utils.IsNil(o.Properties.ImagePullPolicy) {
		var ret string
		return ret
	}
	return *o.Properties.ImagePullPolicy
}

// GetImagePullPolicyOk returns a tuple with the ImagePullPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetImagePullPolicyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.ImagePullPolicy) {
		return nil, false
	}
	return o.Properties.ImagePullPolicy, true
}

// HasImagePullPolicy returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasImagePullPolicy() bool {
	if o != nil && !utils.IsNil(o.Properties.ImagePullPolicy) {
		return true
	}

	return false
}

// SetImagePullPolicy gets a reference to the given string and assigns it to the imagePullPolicy field.
// ImagePullPolicy:  Specify image pull policy for your service
func (o *StatefulsetComponent) SetImagePullPolicy(v string) *StatefulsetComponent {
	o.Properties.ImagePullPolicy = &v
	return o
}

// GetImagePullSecrets returns the ImagePullSecrets field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetImagePullSecrets() []string {
	if o == nil || utils.IsNil(o.Properties.ImagePullSecrets) {
		var ret []string
		return ret
	}
	return o.Properties.ImagePullSecrets
}

// GetImagePullSecretsOk returns a tuple with the ImagePullSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetImagePullSecretsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.ImagePullSecrets) {
		return nil, false
	}
	return o.Properties.ImagePullSecrets, true
}

// HasImagePullSecrets returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasImagePullSecrets() bool {
	if o != nil && !utils.IsNil(o.Properties.ImagePullSecrets) {
		return true
	}

	return false
}

// SetImagePullSecrets gets a reference to the given []string and assigns it to the imagePullSecrets field.
// ImagePullSecrets:  Specify image pull secrets for your service
func (o *StatefulsetComponent) SetImagePullSecrets(v []string) *StatefulsetComponent {
	o.Properties.ImagePullSecrets = v
	return o
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetLabels() map[string]string {
	if o == nil || utils.IsNil(o.Properties.Labels) {
		var ret map[string]string
		return ret
	}
	return o.Properties.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetLabelsOk() (map[string]string, bool) {
	if o == nil || utils.IsNil(o.Properties.Labels) {
		return nil, false
	}
	return o.Properties.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Properties.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the labels field.
// Labels:  Specify the labels in the workload
func (o *StatefulsetComponent) SetLabels(v map[string]string) *StatefulsetComponent {
	o.Properties.Labels = v
	return o
}

// GetLivenessProbe returns the LivenessProbe field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetLivenessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.Properties.LivenessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.Properties.LivenessProbe
}

// GetLivenessProbeOk returns a tuple with the LivenessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetLivenessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.Properties.LivenessProbe) {
		return nil, false
	}
	return o.Properties.LivenessProbe, true
}

// HasLivenessProbe returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasLivenessProbe() bool {
	if o != nil && !utils.IsNil(o.Properties.LivenessProbe) {
		return true
	}

	return false
}

// SetLivenessProbe gets a reference to the given HealthProbe and assigns it to the livenessProbe field.
// LivenessProbe:
func (o *StatefulsetComponent) SetLivenessProbe(v HealthProbe) *StatefulsetComponent {
	o.Properties.LivenessProbe = &v
	return o
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetMemory() string {
	if o == nil || utils.IsNil(o.Properties.Memory) {
		var ret string
		return ret
	}
	return *o.Properties.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetMemoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Memory) {
		return nil, false
	}
	return o.Properties.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasMemory() bool {
	if o != nil && !utils.IsNil(o.Properties.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given string and assigns it to the memory field.
// Memory:  Specifies the attributes of the memory resource required for the container.
func (o *StatefulsetComponent) SetMemory(v string) *StatefulsetComponent {
	o.Properties.Memory = &v
	return o
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetPort() int32 {
	if o == nil || utils.IsNil(o.Properties.Port) {
		var ret int32
		return ret
	}
	return *o.Properties.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetPortOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.Port) {
		return nil, false
	}
	return o.Properties.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasPort() bool {
	if o != nil && !utils.IsNil(o.Properties.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the port field.
// Port:
func (o *StatefulsetComponent) SetPort(v int32) *StatefulsetComponent {
	o.Properties.Port = &v
	return o
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetPorts() []Ports {
	if o == nil || utils.IsNil(o.Properties.Ports) {
		var ret []Ports
		return ret
	}
	return o.Properties.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetPortsOk() ([]Ports, bool) {
	if o == nil || utils.IsNil(o.Properties.Ports) {
		return nil, false
	}
	return o.Properties.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasPorts() bool {
	if o != nil && !utils.IsNil(o.Properties.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []Ports and assigns it to the ports field.
// Ports:  Which ports do you want customer traffic sent to, defaults to 80
func (o *StatefulsetComponent) SetPorts(v []Ports) *StatefulsetComponent {
	o.Properties.Ports = v
	return o
}

// GetReadinessProbe returns the ReadinessProbe field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetReadinessProbe() HealthProbe {
	if o == nil || utils.IsNil(o.Properties.ReadinessProbe) {
		var ret HealthProbe
		return ret
	}
	return *o.Properties.ReadinessProbe
}

// GetReadinessProbeOk returns a tuple with the ReadinessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetReadinessProbeOk() (*HealthProbe, bool) {
	if o == nil || utils.IsNil(o.Properties.ReadinessProbe) {
		return nil, false
	}
	return o.Properties.ReadinessProbe, true
}

// HasReadinessProbe returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasReadinessProbe() bool {
	if o != nil && !utils.IsNil(o.Properties.ReadinessProbe) {
		return true
	}

	return false
}

// SetReadinessProbe gets a reference to the given HealthProbe and assigns it to the readinessProbe field.
// ReadinessProbe:
func (o *StatefulsetComponent) SetReadinessProbe(v HealthProbe) *StatefulsetComponent {
	o.Properties.ReadinessProbe = &v
	return o
}

// GetVolumeMounts returns the VolumeMounts field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetVolumeMounts() VolumeMounts {
	if o == nil || utils.IsNil(o.Properties.VolumeMounts) {
		var ret VolumeMounts
		return ret
	}
	return *o.Properties.VolumeMounts
}

// GetVolumeMountsOk returns a tuple with the VolumeMounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetVolumeMountsOk() (*VolumeMounts, bool) {
	if o == nil || utils.IsNil(o.Properties.VolumeMounts) {
		return nil, false
	}
	return o.Properties.VolumeMounts, true
}

// HasVolumeMounts returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasVolumeMounts() bool {
	if o != nil && !utils.IsNil(o.Properties.VolumeMounts) {
		return true
	}

	return false
}

// SetVolumeMounts gets a reference to the given VolumeMounts and assigns it to the volumeMounts field.
// VolumeMounts:
func (o *StatefulsetComponent) SetVolumeMounts(v VolumeMounts) *StatefulsetComponent {
	o.Properties.VolumeMounts = &v
	return o
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *StatefulsetComponent) GetVolumes() []Volumes {
	if o == nil || utils.IsNil(o.Properties.Volumes) {
		var ret []Volumes
		return ret
	}
	return o.Properties.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatefulsetComponent) GetVolumesOk() ([]Volumes, bool) {
	if o == nil || utils.IsNil(o.Properties.Volumes) {
		return nil, false
	}
	return o.Properties.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *StatefulsetComponent) HasVolumes() bool {
	if o != nil && !utils.IsNil(o.Properties.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []Volumes and assigns it to the volumes field.
// Volumes:  Deprecated field, use volumeMounts instead.
func (o *StatefulsetComponent) SetVolumes(v []Volumes) *StatefulsetComponent {
	o.Properties.Volumes = v
	return o
}

func (o StatefulsetSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatefulsetSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addRevisionLabel"] = o.AddRevisionLabel
	if !utils.IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !utils.IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !utils.IsNil(o.Cmd) {
		toSerialize["cmd"] = o.Cmd
	}
	if !utils.IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !utils.IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	toSerialize["exposeType"] = o.ExposeType
	if !utils.IsNil(o.HostAliases) {
		toSerialize["hostAliases"] = o.HostAliases
	}
	toSerialize["image"] = o.Image
	if !utils.IsNil(o.ImagePullPolicy) {
		toSerialize["imagePullPolicy"] = o.ImagePullPolicy
	}
	if !utils.IsNil(o.ImagePullSecrets) {
		toSerialize["imagePullSecrets"] = o.ImagePullSecrets
	}
	if !utils.IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !utils.IsNil(o.LivenessProbe) {
		toSerialize["livenessProbe"] = o.LivenessProbe
	}
	if !utils.IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !utils.IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !utils.IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !utils.IsNil(o.ReadinessProbe) {
		toSerialize["readinessProbe"] = o.ReadinessProbe
	}
	if !utils.IsNil(o.VolumeMounts) {
		toSerialize["volumeMounts"] = o.VolumeMounts
	}
	if !utils.IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	return toSerialize, nil
}

type NullableStatefulsetSpec struct {
	value *StatefulsetSpec
	isSet bool
}

func (v *NullableStatefulsetSpec) Get() *StatefulsetSpec {
	return v.value
}

func (v *NullableStatefulsetSpec) Set(val *StatefulsetSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableStatefulsetSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableStatefulsetSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatefulsetSpec(val *StatefulsetSpec) *NullableStatefulsetSpec {
	return &NullableStatefulsetSpec{value: val, isSet: true}
}

func (v NullableStatefulsetSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatefulsetSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const StatefulsetType = "statefulset"

func init() {
	sdkcommon.RegisterComponent(StatefulsetType, FromComponent)
}

type StatefulsetComponent struct {
	Base       apis.ComponentBase
	Properties StatefulsetSpec
}

func Statefulset(name string) *StatefulsetComponent {
	s := &StatefulsetComponent{Base: apis.ComponentBase{
		Name: name,
		Type: StatefulsetType,
	}}
	return s
}

func (s *StatefulsetComponent) Build() common.ApplicationComponent {
	traits := make([]common.ApplicationTrait, 0)
	for _, trait := range s.Base.Traits {
		traits = append(traits, trait.Build())
	}
	res := common.ApplicationComponent{
		DependsOn:  s.Base.DependsOn,
		Inputs:     s.Base.Inputs,
		Name:       s.Base.Name,
		Outputs:    s.Base.Outputs,
		Properties: util.Object2RawExtension(s.Properties),
		Traits:     traits,
		Type:       StatefulsetType,
	}
	return res
}

func (s *StatefulsetComponent) FromComponent(from common.ApplicationComponent) (*StatefulsetComponent, error) {
	for _, trait := range from.Traits {
		_t, err := sdkcommon.FromTrait(trait)
		if err != nil {
			return nil, err
		}
		s.Base.Traits = append(s.Base.Traits, _t)
	}
	var properties StatefulsetSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	s.Base.Name = from.Name
	s.Base.DependsOn = from.DependsOn
	s.Base.Inputs = from.Inputs
	s.Base.Outputs = from.Outputs
	s.Base.Type = StatefulsetType
	s.Properties = properties
	return s, nil
}

func FromComponent(from common.ApplicationComponent) (apis.Component, error) {
	s := &StatefulsetComponent{}
	return s.FromComponent(from)
}

func (s *StatefulsetComponent) SetTraits(traits ...apis.Trait) *StatefulsetComponent {
	for _, addTrait := range traits {
		found := false
		for i, _t := range s.Base.Traits {
			if _t.DefType() == addTrait.DefType() {
				s.Base.Traits[i] = addTrait
				found = true
				break
			}
		}
		if !found {
			s.Base.Traits = append(s.Base.Traits, addTrait)
		}
	}
	return s
}

func (s *StatefulsetComponent) GetTrait(typ string) apis.Trait {
	for _, _t := range s.Base.Traits {
		if _t.DefType() == typ {
			return _t
		}
	}
	return nil
}

func (s *StatefulsetComponent) GetAllTraits() []apis.Trait {
	return s.Base.Traits
}

func (s *StatefulsetComponent) ComponentName() string {
	return s.Base.Name
}

func (s *StatefulsetComponent) DefType() string {
	return StatefulsetType
}

func (s *StatefulsetComponent) DependsOn(dependsOn []string) *StatefulsetComponent {
	s.Base.DependsOn = dependsOn
	return s
}

func (s *StatefulsetComponent) Inputs(input common.StepInputs) *StatefulsetComponent {
	s.Base.Inputs = input
	return s
}

func (s *StatefulsetComponent) Outputs(output common.StepOutputs) *StatefulsetComponent {
	s.Base.Outputs = output
	return s
}

func (s *StatefulsetComponent) AddDependsOn(dependsOn string) *StatefulsetComponent {
	s.Base.DependsOn = append(s.Base.DependsOn, dependsOn)
	return s
}
