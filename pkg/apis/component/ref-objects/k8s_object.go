/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ref_objects

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the K8sObject type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &K8sObject{}

// K8sObject struct for K8sObject
type K8sObject struct {
	// If specified, fetch the Kubernetes objects from the cluster. Otherwise, fetch from the local cluster.
	Cluster *string `json:"cluster,omitempty"`
	// The group name for the Kubernetes objects
	Group *string `json:"group,omitempty"`
	// If specified, fetch the Kubernetes objects according to the label selector, exclusive to name
	LabelSelector map[string]string `json:"labelSelector,omitempty"`
	// If specified, fetch the Kubernetes objects with the name, exclusive to labelSelector
	Name *string `json:"name,omitempty"`
	// If specified, fetch the Kubernetes objects from the namespace. Otherwise, fetch from the application's namespace.
	Namespace *string `json:"namespace,omitempty"`
	// The resource type for the Kubernetes objects
	Resource *string `json:"resource,omitempty"`
}

// NewK8sObjectWith instantiates a new K8sObject object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewK8sObjectWith() *K8sObject {
	this := K8sObject{}
	return &this
}

// NewK8sObjectWithDefault instantiates a new K8sObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8sObjectWithDefault() *K8sObject {
	this := K8sObject{}
	return &this
}

// NewK8sObject is short for NewK8sObjectWithDefault which instantiates a new K8sObject object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8sObject() *K8sObject {
	return NewK8sObjectWithDefault()
}

// NewK8sObjectEmpty instantiates a new K8sObject object with no properties set.
// This constructor will not assign any default values to properties.
func NewK8sObjectEmpty() *K8sObject {
	this := K8sObject{}
	return &this
}

// NewK8sObjects converts a list K8sObject pointers to objects.
// This is helpful when the SetK8sObject requires a list of objects
func NewK8sObjectList(ps ...*K8sObject) []K8sObject {
	objs := []K8sObject{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this K8sObject
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *K8sObject) Validate() error {
	// validate all nested properties
	return nil
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *K8sObject) GetCluster() string {
	if o == nil || utils.IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sObject) GetClusterOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *K8sObject) HasCluster() bool {
	if o != nil && !utils.IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the cluster field.
// Cluster:  If specified, fetch the Kubernetes objects from the cluster. Otherwise, fetch from the local cluster.
func (o *K8sObject) SetCluster(v string) *K8sObject {
	o.Cluster = &v
	return o
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *K8sObject) GetGroup() string {
	if o == nil || utils.IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sObject) GetGroupOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *K8sObject) HasGroup() bool {
	if o != nil && !utils.IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the group field.
// Group:  The group name for the Kubernetes objects
func (o *K8sObject) SetGroup(v string) *K8sObject {
	o.Group = &v
	return o
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *K8sObject) GetLabelSelector() map[string]string {
	if o == nil || utils.IsNil(o.LabelSelector) {
		var ret map[string]string
		return ret
	}
	return o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sObject) GetLabelSelectorOk() (map[string]string, bool) {
	if o == nil || utils.IsNil(o.LabelSelector) {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *K8sObject) HasLabelSelector() bool {
	if o != nil && !utils.IsNil(o.LabelSelector) {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given map[string]string and assigns it to the labelSelector field.
// LabelSelector:  If specified, fetch the Kubernetes objects according to the label selector, exclusive to name
func (o *K8sObject) SetLabelSelector(v map[string]string) *K8sObject {
	o.LabelSelector = v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *K8sObject) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sObject) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *K8sObject) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the name field.
// Name:  If specified, fetch the Kubernetes objects with the name, exclusive to labelSelector
func (o *K8sObject) SetName(v string) *K8sObject {
	o.Name = &v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *K8sObject) GetNamespace() string {
	if o == nil || utils.IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sObject) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *K8sObject) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// Namespace:  If specified, fetch the Kubernetes objects from the namespace. Otherwise, fetch from the application's namespace.
func (o *K8sObject) SetNamespace(v string) *K8sObject {
	o.Namespace = &v
	return o
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *K8sObject) GetResource() string {
	if o == nil || utils.IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sObject) GetResourceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *K8sObject) HasResource() bool {
	if o != nil && !utils.IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the resource field.
// Resource:  The resource type for the Kubernetes objects
func (o *K8sObject) SetResource(v string) *K8sObject {
	o.Resource = &v
	return o
}

func (o K8sObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o K8sObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !utils.IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !utils.IsNil(o.LabelSelector) {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !utils.IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	return toSerialize, nil
}

type NullableK8sObject struct {
	value *K8sObject
	isSet bool
}

func (v *NullableK8sObject) Get() *K8sObject {
	return v.value
}

func (v *NullableK8sObject) Set(val *K8sObject) {
	v.value = val
	v.isSet = true
}

func (v *NullableK8sObject) IsSet() bool {
	return v.isSet
}

func (v *NullableK8sObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8sObject(val *K8sObject) *NullableK8sObject {
	return &NullableK8sObject{value: val, isSet: true}
}

func (v NullableK8sObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8sObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
