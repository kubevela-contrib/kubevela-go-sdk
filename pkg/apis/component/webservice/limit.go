/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webservice

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Limit type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Limit{}

// Limit struct for Limit
type Limit struct {
	Cpu    *string `json:"cpu,omitempty"`
	Memory *string `json:"memory,omitempty"`
}

// NewLimitWith instantiates a new Limit object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewLimitWith() *Limit {
	this := Limit{}
	return &this
}

// NewLimitWithDefault instantiates a new Limit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitWithDefault() *Limit {
	this := Limit{}
	return &this
}

// NewLimit is short for NewLimitWithDefault which instantiates a new Limit object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimit() *Limit {
	return NewLimitWithDefault()
}

// NewLimitEmpty instantiates a new Limit object with no properties set.
// This constructor will not assign any default values to properties.
func NewLimitEmpty() *Limit {
	this := Limit{}
	return &this
}

// NewLimits converts a list Limit pointers to objects.
// This is helpful when the SetLimit requires a list of objects
func NewLimitList(ps ...*Limit) []Limit {
	objs := []Limit{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Limit
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Limit) Validate() error {
	// validate all nested properties
	return nil
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *Limit) GetCpu() string {
	if o == nil || utils.IsNil(o.Cpu) {
		var ret string
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Limit) GetCpuOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *Limit) HasCpu() bool {
	if o != nil && !utils.IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given string and assigns it to the cpu field.
// Cpu:
func (o *Limit) SetCpu(v string) *Limit {
	o.Cpu = &v
	return o
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Limit) GetMemory() string {
	if o == nil || utils.IsNil(o.Memory) {
		var ret string
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Limit) GetMemoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Limit) HasMemory() bool {
	if o != nil && !utils.IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given string and assigns it to the memory field.
// Memory:
func (o *Limit) SetMemory(v string) *Limit {
	o.Memory = &v
	return o
}

func (o Limit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Limit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !utils.IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	return toSerialize, nil
}

type NullableLimit struct {
	value *Limit
	isSet bool
}

func (v *NullableLimit) Get() *Limit {
	return v.value
}

func (v *NullableLimit) Set(val *Limit) {
	v.value = val
	v.isSet = true
}

func (v *NullableLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimit(val *Limit) *NullableLimit {
	return &NullableLimit{value: val, isSet: true}
}

func (v NullableLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
