/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webservice

import (
	"encoding/json"

	"github.com/kubevela-contrib/vela-go-sdk/pkg/apis/utils"
)

// checks if the Volumes type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Volumes{}

// Volumes struct for Volumes
type Volumes struct {
	Medium    *string `json:"medium,omitempty"`
	MountPath *string `json:"mountPath,omitempty"`
	Name      *string `json:"name,omitempty"`
	// Specify volume type, options: \"pvc\",\"configMap\",\"secret\",\"emptyDir\", default to emptyDir
	Type *string `json:"type,omitempty"`
}

// NewVolumesWith instantiates a new Volumes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumesWith() *Volumes {
	this := Volumes{}
	var medium string = ""
	this.Medium = &medium
	var type_ string = "emptyDir"
	this.Type = &type_
	return &this
}

// NewVolumes instantiates a new Volumes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumes() *Volumes {
	this := Volumes{}
	var medium string = ""
	this.Medium = &medium
	var type_ string = "emptyDir"
	this.Type = &type_
	return &this
}

// NewVolumess converts a list Volumes pointers to objects.
// This is helpful when the SetVolumes requires a list of objects
func NewVolumesList(ps ...*Volumes) []Volumes {
	objs := []Volumes{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *Volumes) GetMedium() string {
	if o == nil || utils.IsNil(o.Medium) {
		var ret string
		return ret
	}
	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volumes) GetMediumOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Medium) {
		return nil, false
	}
	return o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *Volumes) HasMedium() bool {
	if o != nil && !utils.IsNil(o.Medium) {
		return true
	}

	return false
}

// SetMedium gets a reference to the given string and assigns it to the medium field.
// Medium:
func (o *Volumes) SetMedium(v string) *Volumes {
	o.Medium = &v
	return o
}

// GetMountPath returns the MountPath field value if set, zero value otherwise.
func (o *Volumes) GetMountPath() string {
	if o == nil || utils.IsNil(o.MountPath) {
		var ret string
		return ret
	}
	return *o.MountPath
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volumes) GetMountPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MountPath) {
		return nil, false
	}
	return o.MountPath, true
}

// HasMountPath returns a boolean if a field has been set.
func (o *Volumes) HasMountPath() bool {
	if o != nil && !utils.IsNil(o.MountPath) {
		return true
	}

	return false
}

// SetMountPath gets a reference to the given string and assigns it to the mountPath field.
// MountPath:
func (o *Volumes) SetMountPath(v string) *Volumes {
	o.MountPath = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Volumes) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volumes) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Volumes) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the name field.
// Name:
func (o *Volumes) SetName(v string) *Volumes {
	o.Name = &v
	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Volumes) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Volumes) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Volumes) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the type_ field.
// Type:  Specify volume type, options: \"pvc\",\"configMap\",\"secret\",\"emptyDir\", default to emptyDir
func (o *Volumes) SetType(v string) *Volumes {
	o.Type = &v
	return o
}

func (o Volumes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Volumes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Medium) {
		toSerialize["medium"] = o.Medium
	}
	if !utils.IsNil(o.MountPath) {
		toSerialize["mountPath"] = o.MountPath
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableVolumes struct {
	value *Volumes
	isSet bool
}

func (v NullableVolumes) Get() *Volumes {
	return v.value
}

func (v *NullableVolumes) Set(val *Volumes) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumes) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumes(val *Volumes) *NullableVolumes {
	return &NullableVolumes{value: val, isSet: true}
}

func (v NullableVolumes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
