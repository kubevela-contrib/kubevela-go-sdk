/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cron_task

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Volumes type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Volumes{}

// Volumes struct for Volumes
type Volumes struct {
	Medium    *string `json:"medium"`
	MountPath *string `json:"mountPath"`
	Name      *string `json:"name"`
	// Specify volume type, options: \"pvc\",\"configMap\",\"secret\",\"emptyDir\", default to emptyDir
	Type *string `json:"type"`
}

// NewVolumesWith instantiates a new Volumes object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewVolumesWith(medium string, mountPath string, name string, type_ string) *Volumes {
	this := Volumes{}
	this.Medium = &medium
	this.MountPath = &mountPath
	this.Name = &name
	this.Type = &type_
	return &this
}

// NewVolumesWithDefault instantiates a new Volumes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumesWithDefault() *Volumes {
	this := Volumes{}
	var medium string = ""
	this.Medium = &medium
	var type_ string = "emptyDir"
	this.Type = &type_
	return &this
}

// NewVolumes is short for NewVolumesWithDefault which instantiates a new Volumes object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumes() *Volumes {
	return NewVolumesWithDefault()
}

// NewVolumesEmpty instantiates a new Volumes object with no properties set.
// This constructor will not assign any default values to properties.
func NewVolumesEmpty() *Volumes {
	this := Volumes{}
	return &this
}

// NewVolumess converts a list Volumes pointers to objects.
// This is helpful when the SetVolumes requires a list of objects
func NewVolumesList(ps ...*Volumes) []Volumes {
	objs := []Volumes{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Volumes
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Volumes) Validate() error {
	if o.Medium == nil {
		return errors.New("Medium in Volumes must be set")
	}
	if o.MountPath == nil {
		return errors.New("MountPath in Volumes must be set")
	}
	if o.Name == nil {
		return errors.New("Name in Volumes must be set")
	}
	if o.Type == nil {
		return errors.New("Type in Volumes must be set")
	}
	// validate all nested properties
	return nil
}

// GetMedium returns the Medium field value
func (o *Volumes) GetMedium() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value
// and a boolean to check if the value has been set.
func (o *Volumes) GetMediumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Medium, true
}

// SetMedium sets field value
func (o *Volumes) SetMedium(v string) *Volumes {
	o.Medium = &v
	return o
}

// GetMountPath returns the MountPath field value
func (o *Volumes) GetMountPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.MountPath
}

// GetMountPathOk returns a tuple with the MountPath field value
// and a boolean to check if the value has been set.
func (o *Volumes) GetMountPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountPath, true
}

// SetMountPath sets field value
func (o *Volumes) SetMountPath(v string) *Volumes {
	o.MountPath = &v
	return o
}

// GetName returns the Name field value
func (o *Volumes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Volumes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *Volumes) SetName(v string) *Volumes {
	o.Name = &v
	return o
}

// GetType returns the Type field value
func (o *Volumes) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Volumes) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Volumes) SetType(v string) *Volumes {
	o.Type = &v
	return o
}

func (o Volumes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Volumes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["medium"] = o.Medium
	toSerialize["mountPath"] = o.MountPath
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableVolumes struct {
	value *Volumes
	isSet bool
}

func (v *NullableVolumes) Get() *Volumes {
	return v.value
}

func (v *NullableVolumes) Set(val *Volumes) {
	v.value = val
	v.isSet = true
}

func (v *NullableVolumes) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumes(val *Volumes) *NullableVolumes {
	return &NullableVolumes{value: val, isSet: true}
}

func (v NullableVolumes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
