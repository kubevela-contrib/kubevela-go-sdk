/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package check_metrics

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the CheckMetricsSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CheckMetricsSpec{}

// CheckMetricsSpec struct for CheckMetricsSpec
type CheckMetricsSpec struct {
	// Condition is an expression which determines if a measurement is considered successful. eg: >=0.95
	Condition *string `json:"condition"`
	// Duration defines the duration of time required for this step to be considered successful.
	Duration *string `json:"duration,omitempty"`
	// FailDuration is the duration of time that, if the check fails, will result in the step being marked as failed.
	FailDuration   *string         `json:"failDuration,omitempty"`
	MetricEndpoint *MetricEndpoint `json:"metricEndpoint,omitempty"`
	// Query is a raw prometheus query to perform
	Query *string `json:"query"`
}

// NewCheckMetricsSpecWith instantiates a new CheckMetricsSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewCheckMetricsSpecWith(condition string, query string) *CheckMetricsSpec {
	this := CheckMetricsSpec{}
	this.Condition = &condition
	var duration string = "5m"
	this.Duration = &duration
	var failDuration string = "2m"
	this.FailDuration = &failDuration
	this.Query = &query
	return &this
}

// NewCheckMetricsSpecWithDefault instantiates a new CheckMetricsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckMetricsSpecWithDefault() *CheckMetricsSpec {
	this := CheckMetricsSpec{}
	var duration string = "5m"
	this.Duration = &duration
	var failDuration string = "2m"
	this.FailDuration = &failDuration
	return &this
}

// NewCheckMetricsSpec is short for NewCheckMetricsSpecWithDefault which instantiates a new CheckMetricsSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckMetricsSpec() *CheckMetricsSpec {
	return NewCheckMetricsSpecWithDefault()
}

// NewCheckMetricsSpecEmpty instantiates a new CheckMetricsSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewCheckMetricsSpecEmpty() *CheckMetricsSpec {
	this := CheckMetricsSpec{}
	return &this
}

// NewCheckMetricsSpecs converts a list CheckMetricsSpec pointers to objects.
// This is helpful when the SetCheckMetricsSpec requires a list of objects
func NewCheckMetricsSpecList(ps ...*CheckMetricsSpec) []CheckMetricsSpec {
	objs := []CheckMetricsSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this CheckMetricsSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *CheckMetricsWorkflowStep) Validate() error {
	if o.Properties.Condition == nil {
		return errors.New("Condition in CheckMetricsSpec must be set")
	}
	if o.Properties.Query == nil {
		return errors.New("Query in CheckMetricsSpec must be set")
	}
	// validate all nested properties
	if o.Properties.MetricEndpoint != nil {
		if err := o.Properties.MetricEndpoint.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetCondition returns the Condition field value
func (o *CheckMetricsWorkflowStep) GetCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *CheckMetricsWorkflowStep) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Condition, true
}

// SetCondition sets field value
func (o *CheckMetricsWorkflowStep) SetCondition(v string) *CheckMetricsWorkflowStep {
	o.Properties.Condition = &v
	return o
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *CheckMetricsWorkflowStep) GetDuration() string {
	if o == nil || utils.IsNil(o.Properties.Duration) {
		var ret string
		return ret
	}
	return *o.Properties.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckMetricsWorkflowStep) GetDurationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Duration) {
		return nil, false
	}
	return o.Properties.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *CheckMetricsWorkflowStep) HasDuration() bool {
	if o != nil && !utils.IsNil(o.Properties.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the duration field.
// Duration:  Duration defines the duration of time required for this step to be considered successful.
func (o *CheckMetricsWorkflowStep) SetDuration(v string) *CheckMetricsWorkflowStep {
	o.Properties.Duration = &v
	return o
}

// GetFailDuration returns the FailDuration field value if set, zero value otherwise.
func (o *CheckMetricsWorkflowStep) GetFailDuration() string {
	if o == nil || utils.IsNil(o.Properties.FailDuration) {
		var ret string
		return ret
	}
	return *o.Properties.FailDuration
}

// GetFailDurationOk returns a tuple with the FailDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckMetricsWorkflowStep) GetFailDurationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.FailDuration) {
		return nil, false
	}
	return o.Properties.FailDuration, true
}

// HasFailDuration returns a boolean if a field has been set.
func (o *CheckMetricsWorkflowStep) HasFailDuration() bool {
	if o != nil && !utils.IsNil(o.Properties.FailDuration) {
		return true
	}

	return false
}

// SetFailDuration gets a reference to the given string and assigns it to the failDuration field.
// FailDuration:  FailDuration is the duration of time that, if the check fails, will result in the step being marked as failed.
func (o *CheckMetricsWorkflowStep) SetFailDuration(v string) *CheckMetricsWorkflowStep {
	o.Properties.FailDuration = &v
	return o
}

// GetMetricEndpoint returns the MetricEndpoint field value if set, zero value otherwise.
func (o *CheckMetricsWorkflowStep) GetMetricEndpoint() MetricEndpoint {
	if o == nil || utils.IsNil(o.Properties.MetricEndpoint) {
		var ret MetricEndpoint
		return ret
	}
	return *o.Properties.MetricEndpoint
}

// GetMetricEndpointOk returns a tuple with the MetricEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckMetricsWorkflowStep) GetMetricEndpointOk() (*MetricEndpoint, bool) {
	if o == nil || utils.IsNil(o.Properties.MetricEndpoint) {
		return nil, false
	}
	return o.Properties.MetricEndpoint, true
}

// HasMetricEndpoint returns a boolean if a field has been set.
func (o *CheckMetricsWorkflowStep) HasMetricEndpoint() bool {
	if o != nil && !utils.IsNil(o.Properties.MetricEndpoint) {
		return true
	}

	return false
}

// SetMetricEndpoint gets a reference to the given MetricEndpoint and assigns it to the metricEndpoint field.
// MetricEndpoint:
func (o *CheckMetricsWorkflowStep) SetMetricEndpoint(v MetricEndpoint) *CheckMetricsWorkflowStep {
	o.Properties.MetricEndpoint = &v
	return o
}

// GetQuery returns the Query field value
func (o *CheckMetricsWorkflowStep) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *CheckMetricsWorkflowStep) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Query, true
}

// SetQuery sets field value
func (o *CheckMetricsWorkflowStep) SetQuery(v string) *CheckMetricsWorkflowStep {
	o.Properties.Query = &v
	return o
}

func (o CheckMetricsSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckMetricsSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["condition"] = o.Condition
	if !utils.IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !utils.IsNil(o.FailDuration) {
		toSerialize["failDuration"] = o.FailDuration
	}
	if !utils.IsNil(o.MetricEndpoint) {
		toSerialize["metricEndpoint"] = o.MetricEndpoint
	}
	toSerialize["query"] = o.Query
	return toSerialize, nil
}

type NullableCheckMetricsSpec struct {
	value *CheckMetricsSpec
	isSet bool
}

func (v *NullableCheckMetricsSpec) Get() *CheckMetricsSpec {
	return v.value
}

func (v *NullableCheckMetricsSpec) Set(val *CheckMetricsSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableCheckMetricsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckMetricsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckMetricsSpec(val *CheckMetricsSpec) *NullableCheckMetricsSpec {
	return &NullableCheckMetricsSpec{value: val, isSet: true}
}

func (v NullableCheckMetricsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckMetricsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const CheckMetricsType = "check-metrics"

func init() {
	sdkcommon.RegisterWorkflowStep(CheckMetricsType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(CheckMetricsType, FromWorkflowSubStep)
}

type CheckMetricsWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties CheckMetricsSpec
}

func CheckMetrics(name string) *CheckMetricsWorkflowStep {
	c := &CheckMetricsWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: CheckMetricsType,
	}}
	return c
}

func (c *CheckMetricsWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range c.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  c.Base.DependsOn,
		If:         c.Base.If,
		Inputs:     c.Base.Inputs,
		Meta:       c.Base.Meta,
		Name:       c.Base.Name,
		Outputs:    c.Base.Outputs,
		Properties: util.Object2RawExtension(c.Properties),
		SubSteps:   subSteps,
		Timeout:    c.Base.Timeout,
		Type:       CheckMetricsType,
	}
	return res
}

func (c *CheckMetricsWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*CheckMetricsWorkflowStep, error) {
	var properties CheckMetricsSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := c.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	c.Base.Name = from.Name
	c.Base.DependsOn = from.DependsOn
	c.Base.Inputs = from.Inputs
	c.Base.Outputs = from.Outputs
	c.Base.If = from.If
	c.Base.Timeout = from.Timeout
	c.Base.Meta = from.Meta
	c.Base.Type = CheckMetricsType
	c.Properties = properties
	c.Base.SubSteps = subSteps
	return c, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	c := &CheckMetricsWorkflowStep{}
	return c.FromWorkflowStep(from)
}

func (c *CheckMetricsWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*CheckMetricsWorkflowStep, error) {
	var properties CheckMetricsSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	c.Base.Name = from.Name
	c.Base.DependsOn = from.DependsOn
	c.Base.Inputs = from.Inputs
	c.Base.Outputs = from.Outputs
	c.Base.If = from.If
	c.Base.Timeout = from.Timeout
	c.Base.Meta = from.Meta
	c.Base.Type = CheckMetricsType
	c.Properties = properties
	return c, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	c := &CheckMetricsWorkflowStep{}
	return c.FromWorkflowSubStep(from)
}

func (c *CheckMetricsWorkflowStep) WorkflowStepName() string {
	return c.Base.Name
}

func (c *CheckMetricsWorkflowStep) DefType() string {
	return CheckMetricsType
}

func (c *CheckMetricsWorkflowStep) If(_if string) *CheckMetricsWorkflowStep {
	c.Base.If = _if
	return c
}

func (c *CheckMetricsWorkflowStep) Alias(alias string) *CheckMetricsWorkflowStep {
	c.Base.Meta.Alias = alias
	return c
}

func (c *CheckMetricsWorkflowStep) Timeout(timeout string) *CheckMetricsWorkflowStep {
	c.Base.Timeout = timeout
	return c
}

func (c *CheckMetricsWorkflowStep) DependsOn(dependsOn []string) *CheckMetricsWorkflowStep {
	c.Base.DependsOn = dependsOn
	return c
}

func (c *CheckMetricsWorkflowStep) Inputs(input common.StepInputs) *CheckMetricsWorkflowStep {
	c.Base.Inputs = input
	return c
}

func (c *CheckMetricsWorkflowStep) Outputs(output common.StepOutputs) *CheckMetricsWorkflowStep {
	c.Base.Outputs = output
	return c
}
