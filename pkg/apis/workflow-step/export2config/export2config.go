/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export2config

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/vela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/vela-go-sdk/pkg/apis/utils"
)

// checks if the Export2configSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Export2configSpec{}

// Export2configSpec struct for Export2configSpec
type Export2configSpec struct {
	// Specify the cluster of the config map
	Cluster *string `json:"cluster,omitempty"`
	// Specify the name of the config map
	ConfigName *string `json:"configName,omitempty"`
	// Specify the data of config map
	Data map[string]interface{} `json:"data,omitempty"`
	// Specify the namespace of the config map
	Namespace *string `json:"namespace,omitempty"`
}

// NewExport2configSpecWith instantiates a new Export2configSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExport2configSpecWith() *Export2configSpec {
	this := Export2configSpec{}
	var cluster string = ""
	this.Cluster = &cluster
	return &this
}

// NewExport2configSpec instantiates a new Export2configSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExport2configSpec() *Export2configSpec {
	this := Export2configSpec{}
	var cluster string = ""
	this.Cluster = &cluster
	return &this
}

// NewExport2configSpecs converts a list Export2configSpec pointers to objects.
// This is helpful when the SetExport2configSpec requires a list of objects
func NewExport2configSpecList(ps ...*Export2configSpec) []Export2configSpec {
	objs := []Export2configSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *Export2configWorkflowStep) GetCluster() string {
	if o == nil || utils.IsNil(o.Properties.Cluster) {
		var ret string
		return ret
	}
	return *o.Properties.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Export2configWorkflowStep) GetClusterOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Cluster) {
		return nil, false
	}
	return o.Properties.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *Export2configWorkflowStep) HasCluster() bool {
	if o != nil && !utils.IsNil(o.Properties.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the cluster field.
// Cluster:  Specify the cluster of the config map
func (o *Export2configWorkflowStep) SetCluster(v string) *Export2configWorkflowStep {
	o.Properties.Cluster = &v
	return o
}

// GetConfigName returns the ConfigName field value if set, zero value otherwise.
func (o *Export2configWorkflowStep) GetConfigName() string {
	if o == nil || utils.IsNil(o.Properties.ConfigName) {
		var ret string
		return ret
	}
	return *o.Properties.ConfigName
}

// GetConfigNameOk returns a tuple with the ConfigName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Export2configWorkflowStep) GetConfigNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.ConfigName) {
		return nil, false
	}
	return o.Properties.ConfigName, true
}

// HasConfigName returns a boolean if a field has been set.
func (o *Export2configWorkflowStep) HasConfigName() bool {
	if o != nil && !utils.IsNil(o.Properties.ConfigName) {
		return true
	}

	return false
}

// SetConfigName gets a reference to the given string and assigns it to the configName field.
// ConfigName:  Specify the name of the config map
func (o *Export2configWorkflowStep) SetConfigName(v string) *Export2configWorkflowStep {
	o.Properties.ConfigName = &v
	return o
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Export2configWorkflowStep) GetData() map[string]interface{} {
	if o == nil || utils.IsNil(o.Properties.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Export2configWorkflowStep) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Properties.Data) {
		return map[string]interface{}{}, false
	}
	return o.Properties.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Export2configWorkflowStep) HasData() bool {
	if o != nil && !utils.IsNil(o.Properties.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the data field.
// Data:  Specify the data of config map
func (o *Export2configWorkflowStep) SetData(v map[string]interface{}) *Export2configWorkflowStep {
	o.Properties.Data = v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Export2configWorkflowStep) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.Namespace) {
		var ret string
		return ret
	}
	return *o.Properties.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Export2configWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Namespace) {
		return nil, false
	}
	return o.Properties.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Export2configWorkflowStep) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// Namespace:  Specify the namespace of the config map
func (o *Export2configWorkflowStep) SetNamespace(v string) *Export2configWorkflowStep {
	o.Properties.Namespace = &v
	return o
}

func (o Export2configSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Export2configSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !utils.IsNil(o.ConfigName) {
		toSerialize["configName"] = o.ConfigName
	}
	if !utils.IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !utils.IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullableExport2configSpec struct {
	value *Export2configSpec
	isSet bool
}

func (v NullableExport2configSpec) Get() *Export2configSpec {
	return v.value
}

func (v *NullableExport2configSpec) Set(val *Export2configSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableExport2configSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableExport2configSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExport2configSpec(val *Export2configSpec) *NullableExport2configSpec {
	return &NullableExport2configSpec{value: val, isSet: true}
}

func (v NullableExport2configSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExport2configSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const Export2configType = "export2config"

func init() {
	sdkcommon.RegisterWorkflowStep(Export2configType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(Export2configType, FromWorkflowSubStep)
}

type Export2configWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties Export2configSpec
}

func Export2config(name string) *Export2configWorkflowStep {
	e := &Export2configWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: Export2configType,
	}}
	return e
}

func (e *Export2configWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range e.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  e.Base.DependsOn,
		If:         e.Base.If,
		Inputs:     e.Base.Inputs,
		Meta:       e.Base.Meta,
		Name:       e.Base.Name,
		Outputs:    e.Base.Outputs,
		Properties: util.Object2RawExtension(e.Properties),
		SubSteps:   subSteps,
		Timeout:    e.Base.Timeout,
		Type:       Export2configType,
	}
	return res
}

func (e *Export2configWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*Export2configWorkflowStep, error) {
	var properties Export2configSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := e.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	e.Base.Name = from.Name
	e.Base.DependsOn = from.DependsOn
	e.Base.Inputs = from.Inputs
	e.Base.Outputs = from.Outputs
	e.Base.If = from.If
	e.Base.Timeout = from.Timeout
	e.Base.Meta = from.Meta
	e.Base.Type = Export2configType
	e.Properties = properties
	e.Base.SubSteps = subSteps
	return e, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	e := &Export2configWorkflowStep{}
	return e.FromWorkflowStep(from)
}

func (e *Export2configWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*Export2configWorkflowStep, error) {
	var properties Export2configSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	e.Base.Name = from.Name
	e.Base.DependsOn = from.DependsOn
	e.Base.Inputs = from.Inputs
	e.Base.Outputs = from.Outputs
	e.Base.If = from.If
	e.Base.Timeout = from.Timeout
	e.Base.Meta = from.Meta
	e.Base.Type = Export2configType
	e.Properties = properties
	return e, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	e := &Export2configWorkflowStep{}
	return e.FromWorkflowSubStep(from)
}

func (e *Export2configWorkflowStep) WorkflowStepName() string {
	return e.Base.Name
}

func (e *Export2configWorkflowStep) DefType() string {
	return Export2configType
}

func (e *Export2configWorkflowStep) If(_if string) *Export2configWorkflowStep {
	e.Base.If = _if
	return e
}

func (e *Export2configWorkflowStep) Alias(alias string) *Export2configWorkflowStep {
	e.Base.Meta.Alias = alias
	return e
}

func (e *Export2configWorkflowStep) Timeout(timeout string) *Export2configWorkflowStep {
	e.Base.Timeout = timeout
	return e
}

func (e *Export2configWorkflowStep) DependsOn(dependsOn []string) *Export2configWorkflowStep {
	e.Base.DependsOn = dependsOn
	return e
}

func (e *Export2configWorkflowStep) Inputs(input common.StepInputs) *Export2configWorkflowStep {
	e.Base.Inputs = input
	return e
}

func (e *Export2configWorkflowStep) Outputs(output common.StepOutputs) *Export2configWorkflowStep {
	e.Base.Outputs = output
	return e
}
