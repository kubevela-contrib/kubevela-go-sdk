/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generate_jdbc_connection

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the GenerateJdbcConnectionSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GenerateJdbcConnectionSpec{}

// GenerateJdbcConnectionSpec struct for GenerateJdbcConnectionSpec
type GenerateJdbcConnectionSpec struct {
	// Specify the name of the secret generated by database component
	Name *string `json:"name"`
	// Specify the namespace of the secret generated by database component
	Namespace *string `json:"namespace,omitempty"`
}

// NewGenerateJdbcConnectionSpecWith instantiates a new GenerateJdbcConnectionSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewGenerateJdbcConnectionSpecWith(name string) *GenerateJdbcConnectionSpec {
	this := GenerateJdbcConnectionSpec{}
	this.Name = &name
	return &this
}

// NewGenerateJdbcConnectionSpecWithDefault instantiates a new GenerateJdbcConnectionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateJdbcConnectionSpecWithDefault() *GenerateJdbcConnectionSpec {
	this := GenerateJdbcConnectionSpec{}
	return &this
}

// NewGenerateJdbcConnectionSpec is short for NewGenerateJdbcConnectionSpecWithDefault which instantiates a new GenerateJdbcConnectionSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateJdbcConnectionSpec() *GenerateJdbcConnectionSpec {
	return NewGenerateJdbcConnectionSpecWithDefault()
}

// NewGenerateJdbcConnectionSpecEmpty instantiates a new GenerateJdbcConnectionSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewGenerateJdbcConnectionSpecEmpty() *GenerateJdbcConnectionSpec {
	this := GenerateJdbcConnectionSpec{}
	return &this
}

// NewGenerateJdbcConnectionSpecs converts a list GenerateJdbcConnectionSpec pointers to objects.
// This is helpful when the SetGenerateJdbcConnectionSpec requires a list of objects
func NewGenerateJdbcConnectionSpecList(ps ...*GenerateJdbcConnectionSpec) []GenerateJdbcConnectionSpec {
	objs := []GenerateJdbcConnectionSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this GenerateJdbcConnectionSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *GenerateJdbcConnectionWorkflowStep) Validate() error {
	if o.Properties.Name == nil {
		return errors.New("Name in GenerateJdbcConnectionSpec must be set")
	}
	// validate all nested properties
	return nil
}

// GetName returns the Name field value
func (o *GenerateJdbcConnectionWorkflowStep) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GenerateJdbcConnectionWorkflowStep) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Name, true
}

// SetName sets field value
func (o *GenerateJdbcConnectionWorkflowStep) SetName(v string) *GenerateJdbcConnectionWorkflowStep {
	o.Properties.Name = &v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *GenerateJdbcConnectionWorkflowStep) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.Namespace) {
		var ret string
		return ret
	}
	return *o.Properties.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateJdbcConnectionWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Namespace) {
		return nil, false
	}
	return o.Properties.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *GenerateJdbcConnectionWorkflowStep) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// Namespace:  Specify the namespace of the secret generated by database component
func (o *GenerateJdbcConnectionWorkflowStep) SetNamespace(v string) *GenerateJdbcConnectionWorkflowStep {
	o.Properties.Namespace = &v
	return o
}

func (o GenerateJdbcConnectionSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateJdbcConnectionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !utils.IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullableGenerateJdbcConnectionSpec struct {
	value *GenerateJdbcConnectionSpec
	isSet bool
}

func (v *NullableGenerateJdbcConnectionSpec) Get() *GenerateJdbcConnectionSpec {
	return v.value
}

func (v *NullableGenerateJdbcConnectionSpec) Set(val *GenerateJdbcConnectionSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableGenerateJdbcConnectionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateJdbcConnectionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateJdbcConnectionSpec(val *GenerateJdbcConnectionSpec) *NullableGenerateJdbcConnectionSpec {
	return &NullableGenerateJdbcConnectionSpec{value: val, isSet: true}
}

func (v NullableGenerateJdbcConnectionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateJdbcConnectionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const GenerateJdbcConnectionType = "generate-jdbc-connection"

func init() {
	sdkcommon.RegisterWorkflowStep(GenerateJdbcConnectionType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(GenerateJdbcConnectionType, FromWorkflowSubStep)
}

type GenerateJdbcConnectionWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties GenerateJdbcConnectionSpec
}

func GenerateJdbcConnection(name string) *GenerateJdbcConnectionWorkflowStep {
	g := &GenerateJdbcConnectionWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: GenerateJdbcConnectionType,
	}}
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range g.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  g.Base.DependsOn,
		If:         g.Base.If,
		Inputs:     g.Base.Inputs,
		Meta:       g.Base.Meta,
		Name:       g.Base.Name,
		Outputs:    g.Base.Outputs,
		Properties: util.Object2RawExtension(g.Properties),
		SubSteps:   subSteps,
		Timeout:    g.Base.Timeout,
		Type:       GenerateJdbcConnectionType,
	}
	return res
}

func (g *GenerateJdbcConnectionWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*GenerateJdbcConnectionWorkflowStep, error) {
	var properties GenerateJdbcConnectionSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := g.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	g.Base.Name = from.Name
	g.Base.DependsOn = from.DependsOn
	g.Base.Inputs = from.Inputs
	g.Base.Outputs = from.Outputs
	g.Base.If = from.If
	g.Base.Timeout = from.Timeout
	g.Base.Meta = from.Meta
	g.Base.Type = GenerateJdbcConnectionType
	g.Properties = properties
	g.Base.SubSteps = subSteps
	return g, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	g := &GenerateJdbcConnectionWorkflowStep{}
	return g.FromWorkflowStep(from)
}

func (g *GenerateJdbcConnectionWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*GenerateJdbcConnectionWorkflowStep, error) {
	var properties GenerateJdbcConnectionSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	g.Base.Name = from.Name
	g.Base.DependsOn = from.DependsOn
	g.Base.Inputs = from.Inputs
	g.Base.Outputs = from.Outputs
	g.Base.If = from.If
	g.Base.Timeout = from.Timeout
	g.Base.Meta = from.Meta
	g.Base.Type = GenerateJdbcConnectionType
	g.Properties = properties
	return g, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	g := &GenerateJdbcConnectionWorkflowStep{}
	return g.FromWorkflowSubStep(from)
}

func (g *GenerateJdbcConnectionWorkflowStep) WorkflowStepName() string {
	return g.Base.Name
}

func (g *GenerateJdbcConnectionWorkflowStep) DefType() string {
	return GenerateJdbcConnectionType
}

func (g *GenerateJdbcConnectionWorkflowStep) If(_if string) *GenerateJdbcConnectionWorkflowStep {
	g.Base.If = _if
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) Alias(alias string) *GenerateJdbcConnectionWorkflowStep {
	g.Base.Meta.Alias = alias
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) Timeout(timeout string) *GenerateJdbcConnectionWorkflowStep {
	g.Base.Timeout = timeout
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) DependsOn(dependsOn []string) *GenerateJdbcConnectionWorkflowStep {
	g.Base.DependsOn = dependsOn
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) Inputs(input common.StepInputs) *GenerateJdbcConnectionWorkflowStep {
	g.Base.Inputs = input
	return g
}

func (g *GenerateJdbcConnectionWorkflowStep) Outputs(output common.StepOutputs) *GenerateJdbcConnectionWorkflowStep {
	g.Base.Outputs = output
	return g
}
