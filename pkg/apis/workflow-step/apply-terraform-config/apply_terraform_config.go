/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_terraform_config

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the ApplyTerraformConfigSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApplyTerraformConfigSpec{}

// ApplyTerraformConfigSpec struct for ApplyTerraformConfigSpec
type ApplyTerraformConfigSpec struct {
	// whether to delete resource
	DeleteResource *bool `json:"deleteResource"`
	ForceDelete    *bool `json:"forceDelete"`
	// the envs for job
	JobEnv      map[string]interface{} `json:"jobEnv,omitempty"`
	ProviderRef *ProviderRef           `json:"providerRef,omitempty"`
	// region is cloud provider's region. It will override the region in the region field of providerRef
	Region *string `json:"region,omitempty"`
	Source *Source `json:"source"`
	// the variable in the configuration
	Variable                   map[string]interface{}      `json:"variable"`
	WriteConnectionSecretToRef *WriteConnectionSecretToRef `json:"writeConnectionSecretToRef,omitempty"`
}

// NewApplyTerraformConfigSpecWith instantiates a new ApplyTerraformConfigSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewApplyTerraformConfigSpecWith(deleteResource bool, forceDelete bool, source Source, variable map[string]interface{}) *ApplyTerraformConfigSpec {
	this := ApplyTerraformConfigSpec{}
	this.DeleteResource = &deleteResource
	this.ForceDelete = &forceDelete
	this.Source = &source
	this.Variable = variable
	return &this
}

// NewApplyTerraformConfigSpecWithDefault instantiates a new ApplyTerraformConfigSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyTerraformConfigSpecWithDefault() *ApplyTerraformConfigSpec {
	this := ApplyTerraformConfigSpec{}
	var deleteResource bool = true
	this.DeleteResource = &deleteResource
	var forceDelete bool = false
	this.ForceDelete = &forceDelete
	return &this
}

// NewApplyTerraformConfigSpec is short for NewApplyTerraformConfigSpecWithDefault which instantiates a new ApplyTerraformConfigSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyTerraformConfigSpec() *ApplyTerraformConfigSpec {
	return NewApplyTerraformConfigSpecWithDefault()
}

// NewApplyTerraformConfigSpecEmpty instantiates a new ApplyTerraformConfigSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewApplyTerraformConfigSpecEmpty() *ApplyTerraformConfigSpec {
	this := ApplyTerraformConfigSpec{}
	return &this
}

// NewApplyTerraformConfigSpecs converts a list ApplyTerraformConfigSpec pointers to objects.
// This is helpful when the SetApplyTerraformConfigSpec requires a list of objects
func NewApplyTerraformConfigSpecList(ps ...*ApplyTerraformConfigSpec) []ApplyTerraformConfigSpec {
	objs := []ApplyTerraformConfigSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this ApplyTerraformConfigSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *ApplyTerraformConfigWorkflowStep) Validate() error {
	if o.Properties.DeleteResource == nil {
		return errors.New("DeleteResource in ApplyTerraformConfigSpec must be set")
	}
	if o.Properties.ForceDelete == nil {
		return errors.New("ForceDelete in ApplyTerraformConfigSpec must be set")
	}
	if o.Properties.Source == nil {
		return errors.New("Source in ApplyTerraformConfigSpec must be set")
	}
	if o.Properties.Variable == nil {
		return errors.New("Variable in ApplyTerraformConfigSpec must be set")
	}
	// validate all nested properties
	if o.Properties.ProviderRef != nil {
		if err := o.Properties.ProviderRef.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.Source != nil {
		if err := o.Properties.Source.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.WriteConnectionSecretToRef != nil {
		if err := o.Properties.WriteConnectionSecretToRef.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetDeleteResource returns the DeleteResource field value
func (o *ApplyTerraformConfigWorkflowStep) GetDeleteResource() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Properties.DeleteResource
}

// GetDeleteResourceOk returns a tuple with the DeleteResource field value
// and a boolean to check if the value has been set.
func (o *ApplyTerraformConfigWorkflowStep) GetDeleteResourceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.DeleteResource, true
}

// SetDeleteResource sets field value
func (o *ApplyTerraformConfigWorkflowStep) SetDeleteResource(v bool) *ApplyTerraformConfigWorkflowStep {
	o.Properties.DeleteResource = &v
	return o
}

// GetForceDelete returns the ForceDelete field value
func (o *ApplyTerraformConfigWorkflowStep) GetForceDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Properties.ForceDelete
}

// GetForceDeleteOk returns a tuple with the ForceDelete field value
// and a boolean to check if the value has been set.
func (o *ApplyTerraformConfigWorkflowStep) GetForceDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.ForceDelete, true
}

// SetForceDelete sets field value
func (o *ApplyTerraformConfigWorkflowStep) SetForceDelete(v bool) *ApplyTerraformConfigWorkflowStep {
	o.Properties.ForceDelete = &v
	return o
}

// GetJobEnv returns the JobEnv field value if set, zero value otherwise.
func (o *ApplyTerraformConfigWorkflowStep) GetJobEnv() map[string]interface{} {
	if o == nil || utils.IsNil(o.Properties.JobEnv) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties.JobEnv
}

// GetJobEnvOk returns a tuple with the JobEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTerraformConfigWorkflowStep) GetJobEnvOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Properties.JobEnv) {
		return map[string]interface{}{}, false
	}
	return o.Properties.JobEnv, true
}

// HasJobEnv returns a boolean if a field has been set.
func (o *ApplyTerraformConfigWorkflowStep) HasJobEnv() bool {
	if o != nil && !utils.IsNil(o.Properties.JobEnv) {
		return true
	}

	return false
}

// SetJobEnv gets a reference to the given map[string]interface{} and assigns it to the jobEnv field.
// JobEnv:  the envs for job
func (o *ApplyTerraformConfigWorkflowStep) SetJobEnv(v map[string]interface{}) *ApplyTerraformConfigWorkflowStep {
	o.Properties.JobEnv = v
	return o
}

// GetProviderRef returns the ProviderRef field value if set, zero value otherwise.
func (o *ApplyTerraformConfigWorkflowStep) GetProviderRef() ProviderRef {
	if o == nil || utils.IsNil(o.Properties.ProviderRef) {
		var ret ProviderRef
		return ret
	}
	return *o.Properties.ProviderRef
}

// GetProviderRefOk returns a tuple with the ProviderRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTerraformConfigWorkflowStep) GetProviderRefOk() (*ProviderRef, bool) {
	if o == nil || utils.IsNil(o.Properties.ProviderRef) {
		return nil, false
	}
	return o.Properties.ProviderRef, true
}

// HasProviderRef returns a boolean if a field has been set.
func (o *ApplyTerraformConfigWorkflowStep) HasProviderRef() bool {
	if o != nil && !utils.IsNil(o.Properties.ProviderRef) {
		return true
	}

	return false
}

// SetProviderRef gets a reference to the given ProviderRef and assigns it to the providerRef field.
// ProviderRef:
func (o *ApplyTerraformConfigWorkflowStep) SetProviderRef(v ProviderRef) *ApplyTerraformConfigWorkflowStep {
	o.Properties.ProviderRef = &v
	return o
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ApplyTerraformConfigWorkflowStep) GetRegion() string {
	if o == nil || utils.IsNil(o.Properties.Region) {
		var ret string
		return ret
	}
	return *o.Properties.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTerraformConfigWorkflowStep) GetRegionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Region) {
		return nil, false
	}
	return o.Properties.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ApplyTerraformConfigWorkflowStep) HasRegion() bool {
	if o != nil && !utils.IsNil(o.Properties.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the region field.
// Region:  region is cloud provider's region. It will override the region in the region field of providerRef
func (o *ApplyTerraformConfigWorkflowStep) SetRegion(v string) *ApplyTerraformConfigWorkflowStep {
	o.Properties.Region = &v
	return o
}

// GetSource returns the Source field value
func (o *ApplyTerraformConfigWorkflowStep) GetSource() Source {
	if o == nil {
		var ret Source
		return ret
	}

	return *o.Properties.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ApplyTerraformConfigWorkflowStep) GetSourceOk() (*Source, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Source, true
}

// SetSource sets field value
func (o *ApplyTerraformConfigWorkflowStep) SetSource(v Source) *ApplyTerraformConfigWorkflowStep {
	o.Properties.Source = &v
	return o
}

// GetVariable returns the Variable field value
func (o *ApplyTerraformConfigWorkflowStep) GetVariable() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties.Variable
}

// GetVariableOk returns a tuple with the Variable field value
// and a boolean to check if the value has been set.
func (o *ApplyTerraformConfigWorkflowStep) GetVariableOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Properties.Variable, true
}

// SetVariable sets field value
func (o *ApplyTerraformConfigWorkflowStep) SetVariable(v map[string]interface{}) *ApplyTerraformConfigWorkflowStep {
	o.Properties.Variable = v
	return o
}

// GetWriteConnectionSecretToRef returns the WriteConnectionSecretToRef field value if set, zero value otherwise.
func (o *ApplyTerraformConfigWorkflowStep) GetWriteConnectionSecretToRef() WriteConnectionSecretToRef {
	if o == nil || utils.IsNil(o.Properties.WriteConnectionSecretToRef) {
		var ret WriteConnectionSecretToRef
		return ret
	}
	return *o.Properties.WriteConnectionSecretToRef
}

// GetWriteConnectionSecretToRefOk returns a tuple with the WriteConnectionSecretToRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTerraformConfigWorkflowStep) GetWriteConnectionSecretToRefOk() (*WriteConnectionSecretToRef, bool) {
	if o == nil || utils.IsNil(o.Properties.WriteConnectionSecretToRef) {
		return nil, false
	}
	return o.Properties.WriteConnectionSecretToRef, true
}

// HasWriteConnectionSecretToRef returns a boolean if a field has been set.
func (o *ApplyTerraformConfigWorkflowStep) HasWriteConnectionSecretToRef() bool {
	if o != nil && !utils.IsNil(o.Properties.WriteConnectionSecretToRef) {
		return true
	}

	return false
}

// SetWriteConnectionSecretToRef gets a reference to the given WriteConnectionSecretToRef and assigns it to the writeConnectionSecretToRef field.
// WriteConnectionSecretToRef:
func (o *ApplyTerraformConfigWorkflowStep) SetWriteConnectionSecretToRef(v WriteConnectionSecretToRef) *ApplyTerraformConfigWorkflowStep {
	o.Properties.WriteConnectionSecretToRef = &v
	return o
}

func (o ApplyTerraformConfigSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyTerraformConfigSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deleteResource"] = o.DeleteResource
	toSerialize["forceDelete"] = o.ForceDelete
	if !utils.IsNil(o.JobEnv) {
		toSerialize["jobEnv"] = o.JobEnv
	}
	if !utils.IsNil(o.ProviderRef) {
		toSerialize["providerRef"] = o.ProviderRef
	}
	if !utils.IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	toSerialize["source"] = o.Source
	toSerialize["variable"] = o.Variable
	if !utils.IsNil(o.WriteConnectionSecretToRef) {
		toSerialize["writeConnectionSecretToRef"] = o.WriteConnectionSecretToRef
	}
	return toSerialize, nil
}

type NullableApplyTerraformConfigSpec struct {
	value *ApplyTerraformConfigSpec
	isSet bool
}

func (v *NullableApplyTerraformConfigSpec) Get() *ApplyTerraformConfigSpec {
	return v.value
}

func (v *NullableApplyTerraformConfigSpec) Set(val *ApplyTerraformConfigSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableApplyTerraformConfigSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyTerraformConfigSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyTerraformConfigSpec(val *ApplyTerraformConfigSpec) *NullableApplyTerraformConfigSpec {
	return &NullableApplyTerraformConfigSpec{value: val, isSet: true}
}

func (v NullableApplyTerraformConfigSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyTerraformConfigSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const ApplyTerraformConfigType = "apply-terraform-config"

func init() {
	sdkcommon.RegisterWorkflowStep(ApplyTerraformConfigType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(ApplyTerraformConfigType, FromWorkflowSubStep)
}

type ApplyTerraformConfigWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties ApplyTerraformConfigSpec
}

func ApplyTerraformConfig(name string) *ApplyTerraformConfigWorkflowStep {
	a := &ApplyTerraformConfigWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: ApplyTerraformConfigType,
	}}
	return a
}

func (a *ApplyTerraformConfigWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range a.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  a.Base.DependsOn,
		If:         a.Base.If,
		Inputs:     a.Base.Inputs,
		Meta:       a.Base.Meta,
		Name:       a.Base.Name,
		Outputs:    a.Base.Outputs,
		Properties: util.Object2RawExtension(a.Properties),
		SubSteps:   subSteps,
		Timeout:    a.Base.Timeout,
		Type:       ApplyTerraformConfigType,
	}
	return res
}

func (a *ApplyTerraformConfigWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*ApplyTerraformConfigWorkflowStep, error) {
	var properties ApplyTerraformConfigSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := a.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	a.Base.Name = from.Name
	a.Base.DependsOn = from.DependsOn
	a.Base.Inputs = from.Inputs
	a.Base.Outputs = from.Outputs
	a.Base.If = from.If
	a.Base.Timeout = from.Timeout
	a.Base.Meta = from.Meta
	a.Base.Type = ApplyTerraformConfigType
	a.Properties = properties
	a.Base.SubSteps = subSteps
	return a, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	a := &ApplyTerraformConfigWorkflowStep{}
	return a.FromWorkflowStep(from)
}

func (a *ApplyTerraformConfigWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*ApplyTerraformConfigWorkflowStep, error) {
	var properties ApplyTerraformConfigSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	a.Base.Name = from.Name
	a.Base.DependsOn = from.DependsOn
	a.Base.Inputs = from.Inputs
	a.Base.Outputs = from.Outputs
	a.Base.If = from.If
	a.Base.Timeout = from.Timeout
	a.Base.Meta = from.Meta
	a.Base.Type = ApplyTerraformConfigType
	a.Properties = properties
	return a, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	a := &ApplyTerraformConfigWorkflowStep{}
	return a.FromWorkflowSubStep(from)
}

func (a *ApplyTerraformConfigWorkflowStep) WorkflowStepName() string {
	return a.Base.Name
}

func (a *ApplyTerraformConfigWorkflowStep) DefType() string {
	return ApplyTerraformConfigType
}

func (a *ApplyTerraformConfigWorkflowStep) If(_if string) *ApplyTerraformConfigWorkflowStep {
	a.Base.If = _if
	return a
}

func (a *ApplyTerraformConfigWorkflowStep) Alias(alias string) *ApplyTerraformConfigWorkflowStep {
	a.Base.Meta.Alias = alias
	return a
}

func (a *ApplyTerraformConfigWorkflowStep) Timeout(timeout string) *ApplyTerraformConfigWorkflowStep {
	a.Base.Timeout = timeout
	return a
}

func (a *ApplyTerraformConfigWorkflowStep) DependsOn(dependsOn []string) *ApplyTerraformConfigWorkflowStep {
	a.Base.DependsOn = dependsOn
	return a
}

func (a *ApplyTerraformConfigWorkflowStep) Inputs(input common.StepInputs) *ApplyTerraformConfigWorkflowStep {
	a.Base.Inputs = input
	return a
}

func (a *ApplyTerraformConfigWorkflowStep) Outputs(output common.StepOutputs) *ApplyTerraformConfigWorkflowStep {
	a.Base.Outputs = output
	return a
}
