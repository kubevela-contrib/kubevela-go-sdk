/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_terraform_config

import (
	"encoding/json"

	"github.com/kubevela-contrib/vela-go-sdk/pkg/apis/utils"
)

// checks if the WriteConnectionSecretToRef type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &WriteConnectionSecretToRef{}

// WriteConnectionSecretToRef this specifies the namespace and name of a secret to which any connection details for this managed resource should be written.
type WriteConnectionSecretToRef struct {
	Name      *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

// NewWriteConnectionSecretToRefWith instantiates a new WriteConnectionSecretToRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWriteConnectionSecretToRefWith() *WriteConnectionSecretToRef {
	this := WriteConnectionSecretToRef{}
	return &this
}

// NewWriteConnectionSecretToRef instantiates a new WriteConnectionSecretToRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWriteConnectionSecretToRef() *WriteConnectionSecretToRef {
	this := WriteConnectionSecretToRef{}
	return &this
}

// NewWriteConnectionSecretToRefs converts a list WriteConnectionSecretToRef pointers to objects.
// This is helpful when the SetWriteConnectionSecretToRef requires a list of objects
func NewWriteConnectionSecretToRefList(ps ...*WriteConnectionSecretToRef) []WriteConnectionSecretToRef {
	objs := []WriteConnectionSecretToRef{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WriteConnectionSecretToRef) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteConnectionSecretToRef) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WriteConnectionSecretToRef) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the name field.
// Name:
func (o *WriteConnectionSecretToRef) SetName(v string) *WriteConnectionSecretToRef {
	o.Name = &v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *WriteConnectionSecretToRef) GetNamespace() string {
	if o == nil || utils.IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteConnectionSecretToRef) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *WriteConnectionSecretToRef) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// Namespace:
func (o *WriteConnectionSecretToRef) SetNamespace(v string) *WriteConnectionSecretToRef {
	o.Namespace = &v
	return o
}

func (o WriteConnectionSecretToRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WriteConnectionSecretToRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullableWriteConnectionSecretToRef struct {
	value *WriteConnectionSecretToRef
	isSet bool
}

func (v NullableWriteConnectionSecretToRef) Get() *WriteConnectionSecretToRef {
	return v.value
}

func (v *NullableWriteConnectionSecretToRef) Set(val *WriteConnectionSecretToRef) {
	v.value = val
	v.isSet = true
}

func (v NullableWriteConnectionSecretToRef) IsSet() bool {
	return v.isSet
}

func (v *NullableWriteConnectionSecretToRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWriteConnectionSecretToRef(val *WriteConnectionSecretToRef) *NullableWriteConnectionSecretToRef {
	return &NullableWriteConnectionSecretToRef{value: val, isSet: true}
}

func (v NullableWriteConnectionSecretToRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWriteConnectionSecretToRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
