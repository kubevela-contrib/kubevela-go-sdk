/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package list_config

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the ListConfigSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ListConfigSpec{}

// ListConfigSpec struct for ListConfigSpec
type ListConfigSpec struct {
	// Specify the namespace of the config.
	Namespace *string `json:"namespace,omitempty"`
	// Specify the template of the config.
	Template *string `json:"template"`
}

// NewListConfigSpecWith instantiates a new ListConfigSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewListConfigSpecWith(template string) *ListConfigSpec {
	this := ListConfigSpec{}
	this.Template = &template
	return &this
}

// NewListConfigSpecWithDefault instantiates a new ListConfigSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListConfigSpecWithDefault() *ListConfigSpec {
	this := ListConfigSpec{}
	return &this
}

// NewListConfigSpec is short for NewListConfigSpecWithDefault which instantiates a new ListConfigSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListConfigSpec() *ListConfigSpec {
	return NewListConfigSpecWithDefault()
}

// NewListConfigSpecEmpty instantiates a new ListConfigSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewListConfigSpecEmpty() *ListConfigSpec {
	this := ListConfigSpec{}
	return &this
}

// NewListConfigSpecs converts a list ListConfigSpec pointers to objects.
// This is helpful when the SetListConfigSpec requires a list of objects
func NewListConfigSpecList(ps ...*ListConfigSpec) []ListConfigSpec {
	objs := []ListConfigSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this ListConfigSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *ListConfigWorkflowStep) Validate() error {
	if o.Properties.Template == nil {
		return errors.New("Template in ListConfigSpec must be set")
	}
	// validate all nested properties
	return nil
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ListConfigWorkflowStep) GetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.Namespace) {
		var ret string
		return ret
	}
	return *o.Properties.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListConfigWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Namespace) {
		return nil, false
	}
	return o.Properties.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ListConfigWorkflowStep) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// Namespace:  Specify the namespace of the config.
func (o *ListConfigWorkflowStep) SetNamespace(v string) *ListConfigWorkflowStep {
	o.Properties.Namespace = &v
	return o
}

// GetTemplate returns the Template field value
func (o *ListConfigWorkflowStep) GetTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *ListConfigWorkflowStep) GetTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Template, true
}

// SetTemplate sets field value
func (o *ListConfigWorkflowStep) SetTemplate(v string) *ListConfigWorkflowStep {
	o.Properties.Template = &v
	return o
}

func (o ListConfigSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListConfigSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	toSerialize["template"] = o.Template
	return toSerialize, nil
}

type NullableListConfigSpec struct {
	value *ListConfigSpec
	isSet bool
}

func (v *NullableListConfigSpec) Get() *ListConfigSpec {
	return v.value
}

func (v *NullableListConfigSpec) Set(val *ListConfigSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableListConfigSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableListConfigSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListConfigSpec(val *ListConfigSpec) *NullableListConfigSpec {
	return &NullableListConfigSpec{value: val, isSet: true}
}

func (v NullableListConfigSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListConfigSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const ListConfigType = "list-config"

func init() {
	sdkcommon.RegisterWorkflowStep(ListConfigType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(ListConfigType, FromWorkflowSubStep)
}

type ListConfigWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties ListConfigSpec
}

func ListConfig(name string) *ListConfigWorkflowStep {
	l := &ListConfigWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: ListConfigType,
	}}
	return l
}

func (l *ListConfigWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range l.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  l.Base.DependsOn,
		If:         l.Base.If,
		Inputs:     l.Base.Inputs,
		Meta:       l.Base.Meta,
		Name:       l.Base.Name,
		Outputs:    l.Base.Outputs,
		Properties: util.Object2RawExtension(l.Properties),
		SubSteps:   subSteps,
		Timeout:    l.Base.Timeout,
		Type:       ListConfigType,
	}
	return res
}

func (l *ListConfigWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*ListConfigWorkflowStep, error) {
	var properties ListConfigSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := l.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	l.Base.Name = from.Name
	l.Base.DependsOn = from.DependsOn
	l.Base.Inputs = from.Inputs
	l.Base.Outputs = from.Outputs
	l.Base.If = from.If
	l.Base.Timeout = from.Timeout
	l.Base.Meta = from.Meta
	l.Base.Type = ListConfigType
	l.Properties = properties
	l.Base.SubSteps = subSteps
	return l, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	l := &ListConfigWorkflowStep{}
	return l.FromWorkflowStep(from)
}

func (l *ListConfigWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*ListConfigWorkflowStep, error) {
	var properties ListConfigSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	l.Base.Name = from.Name
	l.Base.DependsOn = from.DependsOn
	l.Base.Inputs = from.Inputs
	l.Base.Outputs = from.Outputs
	l.Base.If = from.If
	l.Base.Timeout = from.Timeout
	l.Base.Meta = from.Meta
	l.Base.Type = ListConfigType
	l.Properties = properties
	return l, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	l := &ListConfigWorkflowStep{}
	return l.FromWorkflowSubStep(from)
}

func (l *ListConfigWorkflowStep) WorkflowStepName() string {
	return l.Base.Name
}

func (l *ListConfigWorkflowStep) DefType() string {
	return ListConfigType
}

func (l *ListConfigWorkflowStep) If(_if string) *ListConfigWorkflowStep {
	l.Base.If = _if
	return l
}

func (l *ListConfigWorkflowStep) Alias(alias string) *ListConfigWorkflowStep {
	l.Base.Meta.Alias = alias
	return l
}

func (l *ListConfigWorkflowStep) Timeout(timeout string) *ListConfigWorkflowStep {
	l.Base.Timeout = timeout
	return l
}

func (l *ListConfigWorkflowStep) DependsOn(dependsOn []string) *ListConfigWorkflowStep {
	l.Base.DependsOn = dependsOn
	return l
}

func (l *ListConfigWorkflowStep) Inputs(input common.StepInputs) *ListConfigWorkflowStep {
	l.Base.Inputs = input
	return l
}

func (l *ListConfigWorkflowStep) Outputs(output common.StepOutputs) *ListConfigWorkflowStep {
	l.Base.Outputs = output
	return l
}
