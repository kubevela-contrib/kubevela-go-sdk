/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package build_push_image

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the BuildPushImageSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &BuildPushImageSpec{}

// BuildPushImageSpec struct for BuildPushImageSpec
type BuildPushImageSpec struct {
	// Specify the build args
	BuildArgs   []string     `json:"buildArgs,omitempty"`
	Context     *Context     `json:"context"`
	Credentials *Credentials `json:"credentials,omitempty"`
	// Specify the dockerfile
	Dockerfile *string `json:"dockerfile"`
	// Specify the image
	Image *string `json:"image"`
	// Specify the kaniko executor image, default to oamdev/kaniko-executor:v1.9.1
	KanikoExecutor *string `json:"kanikoExecutor"`
	// Specify the platform to build
	Platform *string `json:"platform,omitempty"`
	// Specify the verbosity level
	Verbosity *string `json:"verbosity"`
}

// NewBuildPushImageSpecWith instantiates a new BuildPushImageSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewBuildPushImageSpecWith(context Context, dockerfile string, image string, kanikoExecutor string, verbosity string) *BuildPushImageSpec {
	this := BuildPushImageSpec{}
	this.Context = &context
	this.Dockerfile = &dockerfile
	this.Image = &image
	this.KanikoExecutor = &kanikoExecutor
	this.Verbosity = &verbosity
	return &this
}

// NewBuildPushImageSpecWithDefault instantiates a new BuildPushImageSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildPushImageSpecWithDefault() *BuildPushImageSpec {
	this := BuildPushImageSpec{}
	var dockerfile string = "./Dockerfile"
	this.Dockerfile = &dockerfile
	var kanikoExecutor string = "oamdev/kaniko-executor:v1.9.1"
	this.KanikoExecutor = &kanikoExecutor
	var verbosity string = "info"
	this.Verbosity = &verbosity
	return &this
}

// NewBuildPushImageSpec is short for NewBuildPushImageSpecWithDefault which instantiates a new BuildPushImageSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildPushImageSpec() *BuildPushImageSpec {
	return NewBuildPushImageSpecWithDefault()
}

// NewBuildPushImageSpecEmpty instantiates a new BuildPushImageSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewBuildPushImageSpecEmpty() *BuildPushImageSpec {
	this := BuildPushImageSpec{}
	return &this
}

// NewBuildPushImageSpecs converts a list BuildPushImageSpec pointers to objects.
// This is helpful when the SetBuildPushImageSpec requires a list of objects
func NewBuildPushImageSpecList(ps ...*BuildPushImageSpec) []BuildPushImageSpec {
	objs := []BuildPushImageSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this BuildPushImageSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *BuildPushImageWorkflowStep) Validate() error {
	if o.Properties.Context == nil {
		return errors.New("Context in BuildPushImageSpec must be set")
	}
	if o.Properties.Dockerfile == nil {
		return errors.New("Dockerfile in BuildPushImageSpec must be set")
	}
	if o.Properties.Image == nil {
		return errors.New("Image in BuildPushImageSpec must be set")
	}
	if o.Properties.KanikoExecutor == nil {
		return errors.New("KanikoExecutor in BuildPushImageSpec must be set")
	}
	if o.Properties.Verbosity == nil {
		return errors.New("Verbosity in BuildPushImageSpec must be set")
	}
	// validate all nested properties
	if o.Properties.Context != nil {
		if err := o.Properties.Context.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.Credentials != nil {
		if err := o.Properties.Credentials.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetBuildArgs returns the BuildArgs field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetBuildArgs() []string {
	if o == nil || utils.IsNil(o.Properties.BuildArgs) {
		var ret []string
		return ret
	}
	return o.Properties.BuildArgs
}

// GetBuildArgsOk returns a tuple with the BuildArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetBuildArgsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Properties.BuildArgs) {
		return nil, false
	}
	return o.Properties.BuildArgs, true
}

// HasBuildArgs returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasBuildArgs() bool {
	if o != nil && !utils.IsNil(o.Properties.BuildArgs) {
		return true
	}

	return false
}

// SetBuildArgs gets a reference to the given []string and assigns it to the buildArgs field.
// BuildArgs:  Specify the build args
func (o *BuildPushImageWorkflowStep) SetBuildArgs(v []string) *BuildPushImageWorkflowStep {
	o.Properties.BuildArgs = v
	return o
}

// GetContext returns the Context field value
func (o *BuildPushImageWorkflowStep) GetContext() Context {
	if o == nil {
		var ret Context
		return ret
	}

	return *o.Properties.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetContextOk() (*Context, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Context, true
}

// SetContext sets field value
func (o *BuildPushImageWorkflowStep) SetContext(v Context) *BuildPushImageWorkflowStep {
	o.Properties.Context = &v
	return o
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetCredentials() Credentials {
	if o == nil || utils.IsNil(o.Properties.Credentials) {
		var ret Credentials
		return ret
	}
	return *o.Properties.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetCredentialsOk() (*Credentials, bool) {
	if o == nil || utils.IsNil(o.Properties.Credentials) {
		return nil, false
	}
	return o.Properties.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasCredentials() bool {
	if o != nil && !utils.IsNil(o.Properties.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given Credentials and assigns it to the credentials field.
// Credentials:
func (o *BuildPushImageWorkflowStep) SetCredentials(v Credentials) *BuildPushImageWorkflowStep {
	o.Properties.Credentials = &v
	return o
}

// GetDockerfile returns the Dockerfile field value
func (o *BuildPushImageWorkflowStep) GetDockerfile() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Dockerfile
}

// GetDockerfileOk returns a tuple with the Dockerfile field value
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetDockerfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Dockerfile, true
}

// SetDockerfile sets field value
func (o *BuildPushImageWorkflowStep) SetDockerfile(v string) *BuildPushImageWorkflowStep {
	o.Properties.Dockerfile = &v
	return o
}

// GetImage returns the Image field value
func (o *BuildPushImageWorkflowStep) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Image, true
}

// SetImage sets field value
func (o *BuildPushImageWorkflowStep) SetImage(v string) *BuildPushImageWorkflowStep {
	o.Properties.Image = &v
	return o
}

// GetKanikoExecutor returns the KanikoExecutor field value
func (o *BuildPushImageWorkflowStep) GetKanikoExecutor() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.KanikoExecutor
}

// GetKanikoExecutorOk returns a tuple with the KanikoExecutor field value
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetKanikoExecutorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.KanikoExecutor, true
}

// SetKanikoExecutor sets field value
func (o *BuildPushImageWorkflowStep) SetKanikoExecutor(v string) *BuildPushImageWorkflowStep {
	o.Properties.KanikoExecutor = &v
	return o
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *BuildPushImageWorkflowStep) GetPlatform() string {
	if o == nil || utils.IsNil(o.Properties.Platform) {
		var ret string
		return ret
	}
	return *o.Properties.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetPlatformOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Platform) {
		return nil, false
	}
	return o.Properties.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *BuildPushImageWorkflowStep) HasPlatform() bool {
	if o != nil && !utils.IsNil(o.Properties.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the platform field.
// Platform:  Specify the platform to build
func (o *BuildPushImageWorkflowStep) SetPlatform(v string) *BuildPushImageWorkflowStep {
	o.Properties.Platform = &v
	return o
}

// GetVerbosity returns the Verbosity field value
func (o *BuildPushImageWorkflowStep) GetVerbosity() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Verbosity
}

// GetVerbosityOk returns a tuple with the Verbosity field value
// and a boolean to check if the value has been set.
func (o *BuildPushImageWorkflowStep) GetVerbosityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Verbosity, true
}

// SetVerbosity sets field value
func (o *BuildPushImageWorkflowStep) SetVerbosity(v string) *BuildPushImageWorkflowStep {
	o.Properties.Verbosity = &v
	return o
}

func (o BuildPushImageSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildPushImageSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.BuildArgs) {
		toSerialize["buildArgs"] = o.BuildArgs
	}
	toSerialize["context"] = o.Context
	if !utils.IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	toSerialize["dockerfile"] = o.Dockerfile
	toSerialize["image"] = o.Image
	toSerialize["kanikoExecutor"] = o.KanikoExecutor
	if !utils.IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	toSerialize["verbosity"] = o.Verbosity
	return toSerialize, nil
}

type NullableBuildPushImageSpec struct {
	value *BuildPushImageSpec
	isSet bool
}

func (v *NullableBuildPushImageSpec) Get() *BuildPushImageSpec {
	return v.value
}

func (v *NullableBuildPushImageSpec) Set(val *BuildPushImageSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableBuildPushImageSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildPushImageSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildPushImageSpec(val *BuildPushImageSpec) *NullableBuildPushImageSpec {
	return &NullableBuildPushImageSpec{value: val, isSet: true}
}

func (v NullableBuildPushImageSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildPushImageSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const BuildPushImageType = "build-push-image"

func init() {
	sdkcommon.RegisterWorkflowStep(BuildPushImageType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(BuildPushImageType, FromWorkflowSubStep)
}

type BuildPushImageWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties BuildPushImageSpec
}

func BuildPushImage(name string) *BuildPushImageWorkflowStep {
	b := &BuildPushImageWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: BuildPushImageType,
	}}
	return b
}

func (b *BuildPushImageWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range b.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  b.Base.DependsOn,
		If:         b.Base.If,
		Inputs:     b.Base.Inputs,
		Meta:       b.Base.Meta,
		Name:       b.Base.Name,
		Outputs:    b.Base.Outputs,
		Properties: util.Object2RawExtension(b.Properties),
		SubSteps:   subSteps,
		Timeout:    b.Base.Timeout,
		Type:       BuildPushImageType,
	}
	return res
}

func (b *BuildPushImageWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*BuildPushImageWorkflowStep, error) {
	var properties BuildPushImageSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := b.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	b.Base.Name = from.Name
	b.Base.DependsOn = from.DependsOn
	b.Base.Inputs = from.Inputs
	b.Base.Outputs = from.Outputs
	b.Base.If = from.If
	b.Base.Timeout = from.Timeout
	b.Base.Meta = from.Meta
	b.Base.Type = BuildPushImageType
	b.Properties = properties
	b.Base.SubSteps = subSteps
	return b, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	b := &BuildPushImageWorkflowStep{}
	return b.FromWorkflowStep(from)
}

func (b *BuildPushImageWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*BuildPushImageWorkflowStep, error) {
	var properties BuildPushImageSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	b.Base.Name = from.Name
	b.Base.DependsOn = from.DependsOn
	b.Base.Inputs = from.Inputs
	b.Base.Outputs = from.Outputs
	b.Base.If = from.If
	b.Base.Timeout = from.Timeout
	b.Base.Meta = from.Meta
	b.Base.Type = BuildPushImageType
	b.Properties = properties
	return b, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	b := &BuildPushImageWorkflowStep{}
	return b.FromWorkflowSubStep(from)
}

func (b *BuildPushImageWorkflowStep) WorkflowStepName() string {
	return b.Base.Name
}

func (b *BuildPushImageWorkflowStep) DefType() string {
	return BuildPushImageType
}

func (b *BuildPushImageWorkflowStep) If(_if string) *BuildPushImageWorkflowStep {
	b.Base.If = _if
	return b
}

func (b *BuildPushImageWorkflowStep) Alias(alias string) *BuildPushImageWorkflowStep {
	b.Base.Meta.Alias = alias
	return b
}

func (b *BuildPushImageWorkflowStep) Timeout(timeout string) *BuildPushImageWorkflowStep {
	b.Base.Timeout = timeout
	return b
}

func (b *BuildPushImageWorkflowStep) DependsOn(dependsOn []string) *BuildPushImageWorkflowStep {
	b.Base.DependsOn = dependsOn
	return b
}

func (b *BuildPushImageWorkflowStep) Inputs(input common.StepInputs) *BuildPushImageWorkflowStep {
	b.Base.Inputs = input
	return b
}

func (b *BuildPushImageWorkflowStep) Outputs(output common.StepOutputs) *BuildPushImageWorkflowStep {
	b.Base.Outputs = output
	return b
}
