/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the ActionCard type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ActionCard{}

// ActionCard struct for ActionCard
type ActionCard struct {
	BtnOrientation *string `json:"btnOrientation"`
	Btns           []Btns  `json:"btns,omitempty"`
	HideAvatar     *string `json:"hideAvatar"`
	SingleTitle    *string `json:"singleTitle"`
	SingleURL      *string `json:"singleURL"`
	Text           *string `json:"text"`
	Title          *string `json:"title"`
}

// NewActionCardWith instantiates a new ActionCard object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewActionCardWith(btnOrientation string, hideAvatar string, singleTitle string, singleURL string, text string, title string) *ActionCard {
	this := ActionCard{}
	this.BtnOrientation = &btnOrientation
	this.HideAvatar = &hideAvatar
	this.SingleTitle = &singleTitle
	this.SingleURL = &singleURL
	this.Text = &text
	this.Title = &title
	return &this
}

// NewActionCardWithDefault instantiates a new ActionCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionCardWithDefault() *ActionCard {
	this := ActionCard{}
	return &this
}

// NewActionCard is short for NewActionCardWithDefault which instantiates a new ActionCard object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionCard() *ActionCard {
	return NewActionCardWithDefault()
}

// NewActionCardEmpty instantiates a new ActionCard object with no properties set.
// This constructor will not assign any default values to properties.
func NewActionCardEmpty() *ActionCard {
	this := ActionCard{}
	return &this
}

// NewActionCards converts a list ActionCard pointers to objects.
// This is helpful when the SetActionCard requires a list of objects
func NewActionCardList(ps ...*ActionCard) []ActionCard {
	objs := []ActionCard{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this ActionCard
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *ActionCard) Validate() error {
	if o.BtnOrientation == nil {
		return errors.New("BtnOrientation in ActionCard must be set")
	}
	if o.HideAvatar == nil {
		return errors.New("HideAvatar in ActionCard must be set")
	}
	if o.SingleTitle == nil {
		return errors.New("SingleTitle in ActionCard must be set")
	}
	if o.SingleURL == nil {
		return errors.New("SingleURL in ActionCard must be set")
	}
	if o.Text == nil {
		return errors.New("Text in ActionCard must be set")
	}
	if o.Title == nil {
		return errors.New("Title in ActionCard must be set")
	}
	// validate all nested properties
	return nil
}

// GetBtnOrientation returns the BtnOrientation field value
func (o *ActionCard) GetBtnOrientation() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.BtnOrientation
}

// GetBtnOrientationOk returns a tuple with the BtnOrientation field value
// and a boolean to check if the value has been set.
func (o *ActionCard) GetBtnOrientationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BtnOrientation, true
}

// SetBtnOrientation sets field value
func (o *ActionCard) SetBtnOrientation(v string) *ActionCard {
	o.BtnOrientation = &v
	return o
}

// GetBtns returns the Btns field value if set, zero value otherwise.
func (o *ActionCard) GetBtns() []Btns {
	if o == nil || utils.IsNil(o.Btns) {
		var ret []Btns
		return ret
	}
	return o.Btns
}

// GetBtnsOk returns a tuple with the Btns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionCard) GetBtnsOk() ([]Btns, bool) {
	if o == nil || utils.IsNil(o.Btns) {
		return nil, false
	}
	return o.Btns, true
}

// HasBtns returns a boolean if a field has been set.
func (o *ActionCard) HasBtns() bool {
	if o != nil && !utils.IsNil(o.Btns) {
		return true
	}

	return false
}

// SetBtns gets a reference to the given []Btns and assigns it to the btns field.
// Btns:
func (o *ActionCard) SetBtns(v []Btns) *ActionCard {
	o.Btns = v
	return o
}

// GetHideAvatar returns the HideAvatar field value
func (o *ActionCard) GetHideAvatar() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.HideAvatar
}

// GetHideAvatarOk returns a tuple with the HideAvatar field value
// and a boolean to check if the value has been set.
func (o *ActionCard) GetHideAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideAvatar, true
}

// SetHideAvatar sets field value
func (o *ActionCard) SetHideAvatar(v string) *ActionCard {
	o.HideAvatar = &v
	return o
}

// GetSingleTitle returns the SingleTitle field value
func (o *ActionCard) GetSingleTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.SingleTitle
}

// GetSingleTitleOk returns a tuple with the SingleTitle field value
// and a boolean to check if the value has been set.
func (o *ActionCard) GetSingleTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SingleTitle, true
}

// SetSingleTitle sets field value
func (o *ActionCard) SetSingleTitle(v string) *ActionCard {
	o.SingleTitle = &v
	return o
}

// GetSingleURL returns the SingleURL field value
func (o *ActionCard) GetSingleURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.SingleURL
}

// GetSingleURLOk returns a tuple with the SingleURL field value
// and a boolean to check if the value has been set.
func (o *ActionCard) GetSingleURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SingleURL, true
}

// SetSingleURL sets field value
func (o *ActionCard) SetSingleURL(v string) *ActionCard {
	o.SingleURL = &v
	return o
}

// GetText returns the Text field value
func (o *ActionCard) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *ActionCard) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text, true
}

// SetText sets field value
func (o *ActionCard) SetText(v string) *ActionCard {
	o.Text = &v
	return o
}

// GetTitle returns the Title field value
func (o *ActionCard) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ActionCard) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title, true
}

// SetTitle sets field value
func (o *ActionCard) SetTitle(v string) *ActionCard {
	o.Title = &v
	return o
}

func (o ActionCard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["btnOrientation"] = o.BtnOrientation
	if !utils.IsNil(o.Btns) {
		toSerialize["btns"] = o.Btns
	}
	toSerialize["hideAvatar"] = o.HideAvatar
	toSerialize["singleTitle"] = o.SingleTitle
	toSerialize["singleURL"] = o.SingleURL
	toSerialize["text"] = o.Text
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

type NullableActionCard struct {
	value *ActionCard
	isSet bool
}

func (v *NullableActionCard) Get() *ActionCard {
	return v.value
}

func (v *NullableActionCard) Set(val *ActionCard) {
	v.value = val
	v.isSet = true
}

func (v *NullableActionCard) IsSet() bool {
	return v.isSet
}

func (v *NullableActionCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionCard(val *ActionCard) *NullableActionCard {
	return &NullableActionCard{value: val, isSet: true}
}

func (v NullableActionCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
