/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Slack type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Slack{}

// Slack Please fulfill its url and message if you want to send Slack messages
type Slack struct {
	Message *Message2 `json:"message"`
	Url     *Url2     `json:"url"`
}

// NewSlackWith instantiates a new Slack object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewSlackWith(message Message2, url Url2) *Slack {
	this := Slack{}
	this.Message = &message
	this.Url = &url
	return &this
}

// NewSlackWithDefault instantiates a new Slack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlackWithDefault() *Slack {
	this := Slack{}
	return &this
}

// NewSlack is short for NewSlackWithDefault which instantiates a new Slack object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlack() *Slack {
	return NewSlackWithDefault()
}

// NewSlackEmpty instantiates a new Slack object with no properties set.
// This constructor will not assign any default values to properties.
func NewSlackEmpty() *Slack {
	this := Slack{}
	return &this
}

// NewSlacks converts a list Slack pointers to objects.
// This is helpful when the SetSlack requires a list of objects
func NewSlackList(ps ...*Slack) []Slack {
	objs := []Slack{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Slack
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Slack) Validate() error {
	if o.Message == nil {
		return errors.New("Message in Slack must be set")
	}
	if o.Url == nil {
		return errors.New("Url in Slack must be set")
	}
	// validate all nested properties
	if o.Message != nil {
		if err := o.Message.Validate(); err != nil {
			return err
		}
	}
	if o.Url != nil {
		if err := o.Url.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetMessage returns the Message field value
func (o *Slack) GetMessage() Message2 {
	if o == nil {
		var ret Message2
		return ret
	}

	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Slack) GetMessageOk() (*Message2, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message, true
}

// SetMessage sets field value
func (o *Slack) SetMessage(v Message2) *Slack {
	o.Message = &v
	return o
}

// GetUrl returns the Url field value
func (o *Slack) GetUrl() Url2 {
	if o == nil {
		var ret Url2
		return ret
	}

	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Slack) GetUrlOk() (*Url2, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url, true
}

// SetUrl sets field value
func (o *Slack) SetUrl(v Url2) *Slack {
	o.Url = &v
	return o
}

func (o Slack) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Slack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableSlack struct {
	value *Slack
	isSet bool
}

func (v *NullableSlack) Get() *Slack {
	return v.value
}

func (v *NullableSlack) Set(val *Slack) {
	v.value = val
	v.isSet = true
}

func (v *NullableSlack) IsSet() bool {
	return v.isSet
}

func (v *NullableSlack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlack(val *Slack) *NullableSlack {
	return &NullableSlack{value: val, isSet: true}
}

func (v NullableSlack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
