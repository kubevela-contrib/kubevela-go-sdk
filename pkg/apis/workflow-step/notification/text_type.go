/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"github.com/kubevela-contrib/vela-go-sdk/pkg/apis/utils"
)

// checks if the TextType type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TextType{}

// TextType struct for TextType
type TextType struct {
	Emoji    *bool   `json:"emoji,omitempty"`
	Text     *string `json:"text,omitempty"`
	Type     *string `json:"type,omitempty"`
	Verbatim *bool   `json:"verbatim,omitempty"`
}

// NewTextTypeWith instantiates a new TextType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextTypeWith() *TextType {
	this := TextType{}
	return &this
}

// NewTextType instantiates a new TextType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextType() *TextType {
	this := TextType{}
	return &this
}

// NewTextTypes converts a list TextType pointers to objects.
// This is helpful when the SetTextType requires a list of objects
func NewTextTypeList(ps ...*TextType) []TextType {
	objs := []TextType{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetEmoji returns the Emoji field value if set, zero value otherwise.
func (o *TextType) GetEmoji() bool {
	if o == nil || utils.IsNil(o.Emoji) {
		var ret bool
		return ret
	}
	return *o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextType) GetEmojiOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Emoji) {
		return nil, false
	}
	return o.Emoji, true
}

// HasEmoji returns a boolean if a field has been set.
func (o *TextType) HasEmoji() bool {
	if o != nil && !utils.IsNil(o.Emoji) {
		return true
	}

	return false
}

// SetEmoji gets a reference to the given bool and assigns it to the emoji field.
// Emoji:
func (o *TextType) SetEmoji(v bool) *TextType {
	o.Emoji = &v
	return o
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *TextType) GetText() string {
	if o == nil || utils.IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextType) GetTextOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *TextType) HasText() bool {
	if o != nil && !utils.IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the text field.
// Text:
func (o *TextType) SetText(v string) *TextType {
	o.Text = &v
	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TextType) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextType) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TextType) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the type_ field.
// Type:
func (o *TextType) SetType(v string) *TextType {
	o.Type = &v
	return o
}

// GetVerbatim returns the Verbatim field value if set, zero value otherwise.
func (o *TextType) GetVerbatim() bool {
	if o == nil || utils.IsNil(o.Verbatim) {
		var ret bool
		return ret
	}
	return *o.Verbatim
}

// GetVerbatimOk returns a tuple with the Verbatim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextType) GetVerbatimOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Verbatim) {
		return nil, false
	}
	return o.Verbatim, true
}

// HasVerbatim returns a boolean if a field has been set.
func (o *TextType) HasVerbatim() bool {
	if o != nil && !utils.IsNil(o.Verbatim) {
		return true
	}

	return false
}

// SetVerbatim gets a reference to the given bool and assigns it to the verbatim field.
// Verbatim:
func (o *TextType) SetVerbatim(v bool) *TextType {
	o.Verbatim = &v
	return o
}

func (o TextType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Emoji) {
		toSerialize["emoji"] = o.Emoji
	}
	if !utils.IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.Verbatim) {
		toSerialize["verbatim"] = o.Verbatim
	}
	return toSerialize, nil
}

type NullableTextType struct {
	value *TextType
	isSet bool
}

func (v NullableTextType) Get() *TextType {
	return v.value
}

func (v *NullableTextType) Set(val *TextType) {
	v.value = val
	v.isSet = true
}

func (v NullableTextType) IsSet() bool {
	return v.isSet
}

func (v *NullableTextType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextType(val *TextType) *NullableTextType {
	return &NullableTextType{value: val, isSet: true}
}

func (v NullableTextType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
