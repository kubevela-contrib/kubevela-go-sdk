/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Confirm type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Confirm{}

// Confirm struct for Confirm
type Confirm struct {
	Confirm *TextType `json:"confirm"`
	Deny    *TextType `json:"deny"`
	Style   *string   `json:"style,omitempty"`
	Text    *TextType `json:"text"`
	Title   *TextType `json:"title"`
}

// NewConfirmWith instantiates a new Confirm object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewConfirmWith(confirm TextType, deny TextType, text TextType, title TextType) *Confirm {
	this := Confirm{}
	this.Confirm = &confirm
	this.Deny = &deny
	this.Text = &text
	this.Title = &title
	return &this
}

// NewConfirmWithDefault instantiates a new Confirm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfirmWithDefault() *Confirm {
	this := Confirm{}
	return &this
}

// NewConfirm is short for NewConfirmWithDefault which instantiates a new Confirm object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfirm() *Confirm {
	return NewConfirmWithDefault()
}

// NewConfirmEmpty instantiates a new Confirm object with no properties set.
// This constructor will not assign any default values to properties.
func NewConfirmEmpty() *Confirm {
	this := Confirm{}
	return &this
}

// NewConfirms converts a list Confirm pointers to objects.
// This is helpful when the SetConfirm requires a list of objects
func NewConfirmList(ps ...*Confirm) []Confirm {
	objs := []Confirm{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Confirm
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Confirm) Validate() error {
	if o.Confirm == nil {
		return errors.New("Confirm in Confirm must be set")
	}
	if o.Deny == nil {
		return errors.New("Deny in Confirm must be set")
	}
	if o.Text == nil {
		return errors.New("Text in Confirm must be set")
	}
	if o.Title == nil {
		return errors.New("Title in Confirm must be set")
	}
	// validate all nested properties
	if o.Confirm != nil {
		if err := o.Confirm.Validate(); err != nil {
			return err
		}
	}
	if o.Deny != nil {
		if err := o.Deny.Validate(); err != nil {
			return err
		}
	}
	if o.Text != nil {
		if err := o.Text.Validate(); err != nil {
			return err
		}
	}
	if o.Title != nil {
		if err := o.Title.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetConfirm returns the Confirm field value
func (o *Confirm) GetConfirm() TextType {
	if o == nil {
		var ret TextType
		return ret
	}

	return *o.Confirm
}

// GetConfirmOk returns a tuple with the Confirm field value
// and a boolean to check if the value has been set.
func (o *Confirm) GetConfirmOk() (*TextType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Confirm, true
}

// SetConfirm sets field value
func (o *Confirm) SetConfirm(v TextType) *Confirm {
	o.Confirm = &v
	return o
}

// GetDeny returns the Deny field value
func (o *Confirm) GetDeny() TextType {
	if o == nil {
		var ret TextType
		return ret
	}

	return *o.Deny
}

// GetDenyOk returns a tuple with the Deny field value
// and a boolean to check if the value has been set.
func (o *Confirm) GetDenyOk() (*TextType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deny, true
}

// SetDeny sets field value
func (o *Confirm) SetDeny(v TextType) *Confirm {
	o.Deny = &v
	return o
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *Confirm) GetStyle() string {
	if o == nil || utils.IsNil(o.Style) {
		var ret string
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Confirm) GetStyleOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *Confirm) HasStyle() bool {
	if o != nil && !utils.IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given string and assigns it to the style field.
// Style:
func (o *Confirm) SetStyle(v string) *Confirm {
	o.Style = &v
	return o
}

// GetText returns the Text field value
func (o *Confirm) GetText() TextType {
	if o == nil {
		var ret TextType
		return ret
	}

	return *o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *Confirm) GetTextOk() (*TextType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text, true
}

// SetText sets field value
func (o *Confirm) SetText(v TextType) *Confirm {
	o.Text = &v
	return o
}

// GetTitle returns the Title field value
func (o *Confirm) GetTitle() TextType {
	if o == nil {
		var ret TextType
		return ret
	}

	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Confirm) GetTitleOk() (*TextType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title, true
}

// SetTitle sets field value
func (o *Confirm) SetTitle(v TextType) *Confirm {
	o.Title = &v
	return o
}

func (o Confirm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Confirm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["confirm"] = o.Confirm
	toSerialize["deny"] = o.Deny
	if !utils.IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	toSerialize["text"] = o.Text
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

type NullableConfirm struct {
	value *Confirm
	isSet bool
}

func (v *NullableConfirm) Get() *Confirm {
	return v.value
}

func (v *NullableConfirm) Set(val *Confirm) {
	v.value = val
	v.isSet = true
}

func (v *NullableConfirm) IsSet() bool {
	return v.isSet
}

func (v *NullableConfirm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfirm(val *Confirm) *NullableConfirm {
	return &NullableConfirm{value: val, isSet: true}
}

func (v NullableConfirm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfirm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
