/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Attachments type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Attachments{}

// Attachments struct for Attachments
type Attachments struct {
	Blocks []Block `json:"blocks,omitempty"`
	Color  *string `json:"color,omitempty"`
}

// NewAttachmentsWith instantiates a new Attachments object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewAttachmentsWith() *Attachments {
	this := Attachments{}
	return &this
}

// NewAttachmentsWithDefault instantiates a new Attachments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentsWithDefault() *Attachments {
	this := Attachments{}
	return &this
}

// NewAttachments is short for NewAttachmentsWithDefault which instantiates a new Attachments object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachments() *Attachments {
	return NewAttachmentsWithDefault()
}

// NewAttachmentsEmpty instantiates a new Attachments object with no properties set.
// This constructor will not assign any default values to properties.
func NewAttachmentsEmpty() *Attachments {
	this := Attachments{}
	return &this
}

// NewAttachmentss converts a list Attachments pointers to objects.
// This is helpful when the SetAttachments requires a list of objects
func NewAttachmentsList(ps ...*Attachments) []Attachments {
	objs := []Attachments{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Attachments
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Attachments) Validate() error {
	// validate all nested properties
	return nil
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *Attachments) GetBlocks() []Block {
	if o == nil || utils.IsNil(o.Blocks) {
		var ret []Block
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachments) GetBlocksOk() ([]Block, bool) {
	if o == nil || utils.IsNil(o.Blocks) {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *Attachments) HasBlocks() bool {
	if o != nil && !utils.IsNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []Block and assigns it to the blocks field.
// Blocks:
func (o *Attachments) SetBlocks(v []Block) *Attachments {
	o.Blocks = v
	return o
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *Attachments) GetColor() string {
	if o == nil || utils.IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachments) GetColorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Attachments) HasColor() bool {
	if o != nil && !utils.IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the color field.
// Color:
func (o *Attachments) SetColor(v string) *Attachments {
	o.Color = &v
	return o
}

func (o Attachments) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attachments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	if !utils.IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	return toSerialize, nil
}

type NullableAttachments struct {
	value *Attachments
	isSet bool
}

func (v *NullableAttachments) Get() *Attachments {
	return v.value
}

func (v *NullableAttachments) Set(val *Attachments) {
	v.value = val
	v.isSet = true
}

func (v *NullableAttachments) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachments(val *Attachments) *NullableAttachments {
	return &NullableAttachments{value: val, isSet: true}
}

func (v NullableAttachments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
