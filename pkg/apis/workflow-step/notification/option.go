/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Option type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Option{}

// Option struct for Option
type Option struct {
	Description *TextType `json:"description,omitempty"`
	Text        *TextType `json:"text"`
	Url         *string   `json:"url,omitempty"`
	Value       *string   `json:"value"`
}

// NewOptionWith instantiates a new Option object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewOptionWith(text TextType, value string) *Option {
	this := Option{}
	this.Text = &text
	this.Value = &value
	return &this
}

// NewOptionWithDefault instantiates a new Option object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionWithDefault() *Option {
	this := Option{}
	return &this
}

// NewOption is short for NewOptionWithDefault which instantiates a new Option object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOption() *Option {
	return NewOptionWithDefault()
}

// NewOptionEmpty instantiates a new Option object with no properties set.
// This constructor will not assign any default values to properties.
func NewOptionEmpty() *Option {
	this := Option{}
	return &this
}

// NewOptions converts a list Option pointers to objects.
// This is helpful when the SetOption requires a list of objects
func NewOptionList(ps ...*Option) []Option {
	objs := []Option{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Option
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Option) Validate() error {
	if o.Text == nil {
		return errors.New("Text in Option must be set")
	}
	if o.Value == nil {
		return errors.New("Value in Option must be set")
	}
	// validate all nested properties
	if o.Description != nil {
		if err := o.Description.Validate(); err != nil {
			return err
		}
	}
	if o.Text != nil {
		if err := o.Text.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Option) GetDescription() TextType {
	if o == nil || utils.IsNil(o.Description) {
		var ret TextType
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetDescriptionOk() (*TextType, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Option) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TextType and assigns it to the description field.
// Description:
func (o *Option) SetDescription(v TextType) *Option {
	o.Description = &v
	return o
}

// GetText returns the Text field value
func (o *Option) GetText() TextType {
	if o == nil {
		var ret TextType
		return ret
	}

	return *o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *Option) GetTextOk() (*TextType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text, true
}

// SetText sets field value
func (o *Option) SetText(v TextType) *Option {
	o.Text = &v
	return o
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Option) GetUrl() string {
	if o == nil || utils.IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Option) HasUrl() bool {
	if o != nil && !utils.IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the url field.
// Url:
func (o *Option) SetUrl(v string) *Option {
	o.Url = &v
	return o
}

// GetValue returns the Value field value
func (o *Option) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Option) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *Option) SetValue(v string) *Option {
	o.Value = &v
	return o
}

func (o Option) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Option) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["text"] = o.Text
	if !utils.IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableOption struct {
	value *Option
	isSet bool
}

func (v *NullableOption) Get() *Option {
	return v.value
}

func (v *NullableOption) Set(val *Option) {
	v.value = val
	v.isSet = true
}

func (v *NullableOption) IsSet() bool {
	return v.isSet
}

func (v *NullableOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOption(val *Option) *NullableOption {
	return &NullableOption{value: val, isSet: true}
}

func (v NullableOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
