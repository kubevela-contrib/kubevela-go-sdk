/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Btns type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Btns{}

// Btns struct for Btns
type Btns struct {
	ActionURL *string `json:"actionURL"`
	Title     *string `json:"title"`
}

// NewBtnsWith instantiates a new Btns object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewBtnsWith(actionURL string, title string) *Btns {
	this := Btns{}
	this.ActionURL = &actionURL
	this.Title = &title
	return &this
}

// NewBtnsWithDefault instantiates a new Btns object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBtnsWithDefault() *Btns {
	this := Btns{}
	return &this
}

// NewBtns is short for NewBtnsWithDefault which instantiates a new Btns object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBtns() *Btns {
	return NewBtnsWithDefault()
}

// NewBtnsEmpty instantiates a new Btns object with no properties set.
// This constructor will not assign any default values to properties.
func NewBtnsEmpty() *Btns {
	this := Btns{}
	return &this
}

// NewBtnss converts a list Btns pointers to objects.
// This is helpful when the SetBtns requires a list of objects
func NewBtnsList(ps ...*Btns) []Btns {
	objs := []Btns{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Btns
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Btns) Validate() error {
	if o.ActionURL == nil {
		return errors.New("ActionURL in Btns must be set")
	}
	if o.Title == nil {
		return errors.New("Title in Btns must be set")
	}
	// validate all nested properties
	return nil
}

// GetActionURL returns the ActionURL field value
func (o *Btns) GetActionURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.ActionURL
}

// GetActionURLOk returns a tuple with the ActionURL field value
// and a boolean to check if the value has been set.
func (o *Btns) GetActionURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionURL, true
}

// SetActionURL sets field value
func (o *Btns) SetActionURL(v string) *Btns {
	o.ActionURL = &v
	return o
}

// GetTitle returns the Title field value
func (o *Btns) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Btns) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title, true
}

// SetTitle sets field value
func (o *Btns) SetTitle(v string) *Btns {
	o.Title = &v
	return o
}

func (o Btns) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Btns) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["actionURL"] = o.ActionURL
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

type NullableBtns struct {
	value *Btns
	isSet bool
}

func (v *NullableBtns) Get() *Btns {
	return v.value
}

func (v *NullableBtns) Set(val *Btns) {
	v.value = val
	v.isSet = true
}

func (v *NullableBtns) IsSet() bool {
	return v.isSet
}

func (v *NullableBtns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBtns(val *Btns) *NullableBtns {
	return &NullableBtns{value: val, isSet: true}
}

func (v NullableBtns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBtns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
