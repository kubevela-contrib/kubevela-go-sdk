/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"

	"github.com/kubevela-contrib/vela-go-sdk/pkg/apis/utils"
)

// checks if the Link type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Link{}

// Link struct for Link
type Link struct {
	MessageUrl *string `json:"messageUrl,omitempty"`
	PicUrl     *string `json:"picUrl,omitempty"`
	Text       *string `json:"text,omitempty"`
	Title      *string `json:"title,omitempty"`
}

// NewLinkWith instantiates a new Link object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkWith() *Link {
	this := Link{}
	return &this
}

// NewLink instantiates a new Link object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLink() *Link {
	this := Link{}
	return &this
}

// NewLinks converts a list Link pointers to objects.
// This is helpful when the SetLink requires a list of objects
func NewLinkList(ps ...*Link) []Link {
	objs := []Link{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetMessageUrl returns the MessageUrl field value if set, zero value otherwise.
func (o *Link) GetMessageUrl() string {
	if o == nil || utils.IsNil(o.MessageUrl) {
		var ret string
		return ret
	}
	return *o.MessageUrl
}

// GetMessageUrlOk returns a tuple with the MessageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetMessageUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MessageUrl) {
		return nil, false
	}
	return o.MessageUrl, true
}

// HasMessageUrl returns a boolean if a field has been set.
func (o *Link) HasMessageUrl() bool {
	if o != nil && !utils.IsNil(o.MessageUrl) {
		return true
	}

	return false
}

// SetMessageUrl gets a reference to the given string and assigns it to the messageUrl field.
// MessageUrl:
func (o *Link) SetMessageUrl(v string) *Link {
	o.MessageUrl = &v
	return o
}

// GetPicUrl returns the PicUrl field value if set, zero value otherwise.
func (o *Link) GetPicUrl() string {
	if o == nil || utils.IsNil(o.PicUrl) {
		var ret string
		return ret
	}
	return *o.PicUrl
}

// GetPicUrlOk returns a tuple with the PicUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetPicUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PicUrl) {
		return nil, false
	}
	return o.PicUrl, true
}

// HasPicUrl returns a boolean if a field has been set.
func (o *Link) HasPicUrl() bool {
	if o != nil && !utils.IsNil(o.PicUrl) {
		return true
	}

	return false
}

// SetPicUrl gets a reference to the given string and assigns it to the picUrl field.
// PicUrl:
func (o *Link) SetPicUrl(v string) *Link {
	o.PicUrl = &v
	return o
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Link) GetText() string {
	if o == nil || utils.IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetTextOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Link) HasText() bool {
	if o != nil && !utils.IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the text field.
// Text:
func (o *Link) SetText(v string) *Link {
	o.Text = &v
	return o
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Link) GetTitle() string {
	if o == nil || utils.IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetTitleOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Link) HasTitle() bool {
	if o != nil && !utils.IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the title field.
// Title:
func (o *Link) SetTitle(v string) *Link {
	o.Title = &v
	return o
}

func (o Link) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Link) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.MessageUrl) {
		toSerialize["messageUrl"] = o.MessageUrl
	}
	if !utils.IsNil(o.PicUrl) {
		toSerialize["picUrl"] = o.PicUrl
	}
	if !utils.IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !utils.IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableLink struct {
	value *Link
	isSet bool
}

func (v NullableLink) Get() *Link {
	return v.value
}

func (v *NullableLink) Set(val *Link) {
	v.value = val
	v.isSet = true
}

func (v NullableLink) IsSet() bool {
	return v.isSet
}

func (v *NullableLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLink(val *Link) *NullableLink {
	return &NullableLink{value: val, isSet: true}
}

func (v NullableLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
