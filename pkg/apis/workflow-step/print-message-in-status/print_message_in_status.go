/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package print_message_in_status

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/vela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/vela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/vela-go-sdk/pkg/apis/utils"
)

// checks if the PrintMessageInStatusSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PrintMessageInStatusSpec{}

// PrintMessageInStatusSpec struct for PrintMessageInStatusSpec
type PrintMessageInStatusSpec struct {
	Message *string `json:"message,omitempty"`
}

// NewPrintMessageInStatusSpecWith instantiates a new PrintMessageInStatusSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrintMessageInStatusSpecWith() *PrintMessageInStatusSpec {
	this := PrintMessageInStatusSpec{}
	return &this
}

// NewPrintMessageInStatusSpec instantiates a new PrintMessageInStatusSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrintMessageInStatusSpec() *PrintMessageInStatusSpec {
	this := PrintMessageInStatusSpec{}
	return &this
}

// NewPrintMessageInStatusSpecs converts a list PrintMessageInStatusSpec pointers to objects.
// This is helpful when the SetPrintMessageInStatusSpec requires a list of objects
func NewPrintMessageInStatusSpecList(ps ...*PrintMessageInStatusSpec) []PrintMessageInStatusSpec {
	objs := []PrintMessageInStatusSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PrintMessageInStatusWorkflowStep) GetMessage() string {
	if o == nil || utils.IsNil(o.Properties.Message) {
		var ret string
		return ret
	}
	return *o.Properties.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrintMessageInStatusWorkflowStep) GetMessageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Message) {
		return nil, false
	}
	return o.Properties.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PrintMessageInStatusWorkflowStep) HasMessage() bool {
	if o != nil && !utils.IsNil(o.Properties.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the message field.
// Message:
func (o *PrintMessageInStatusWorkflowStep) SetMessage(v string) *PrintMessageInStatusWorkflowStep {
	o.Properties.Message = &v
	return o
}

func (o PrintMessageInStatusSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrintMessageInStatusSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullablePrintMessageInStatusSpec struct {
	value *PrintMessageInStatusSpec
	isSet bool
}

func (v NullablePrintMessageInStatusSpec) Get() *PrintMessageInStatusSpec {
	return v.value
}

func (v *NullablePrintMessageInStatusSpec) Set(val *PrintMessageInStatusSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePrintMessageInStatusSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePrintMessageInStatusSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrintMessageInStatusSpec(val *PrintMessageInStatusSpec) *NullablePrintMessageInStatusSpec {
	return &NullablePrintMessageInStatusSpec{value: val, isSet: true}
}

func (v NullablePrintMessageInStatusSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrintMessageInStatusSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const PrintMessageInStatusType = "print-message-in-status"

func init() {
	sdkcommon.RegisterWorkflowStep(PrintMessageInStatusType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(PrintMessageInStatusType, FromWorkflowSubStep)
}

type PrintMessageInStatusWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties PrintMessageInStatusSpec
}

func PrintMessageInStatus(name string) *PrintMessageInStatusWorkflowStep {
	p := &PrintMessageInStatusWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: PrintMessageInStatusType,
	}}
	return p
}

func (p *PrintMessageInStatusWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range p.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  p.Base.DependsOn,
		If:         p.Base.If,
		Inputs:     p.Base.Inputs,
		Meta:       p.Base.Meta,
		Name:       p.Base.Name,
		Outputs:    p.Base.Outputs,
		Properties: util.Object2RawExtension(p.Properties),
		SubSteps:   subSteps,
		Timeout:    p.Base.Timeout,
		Type:       PrintMessageInStatusType,
	}
	return res
}

func (p *PrintMessageInStatusWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*PrintMessageInStatusWorkflowStep, error) {
	var properties PrintMessageInStatusSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := p.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	p.Base.Name = from.Name
	p.Base.DependsOn = from.DependsOn
	p.Base.Inputs = from.Inputs
	p.Base.Outputs = from.Outputs
	p.Base.If = from.If
	p.Base.Timeout = from.Timeout
	p.Base.Meta = from.Meta
	p.Base.Type = PrintMessageInStatusType
	p.Properties = properties
	p.Base.SubSteps = subSteps
	return p, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	p := &PrintMessageInStatusWorkflowStep{}
	return p.FromWorkflowStep(from)
}

func (p *PrintMessageInStatusWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*PrintMessageInStatusWorkflowStep, error) {
	var properties PrintMessageInStatusSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	p.Base.Name = from.Name
	p.Base.DependsOn = from.DependsOn
	p.Base.Inputs = from.Inputs
	p.Base.Outputs = from.Outputs
	p.Base.If = from.If
	p.Base.Timeout = from.Timeout
	p.Base.Meta = from.Meta
	p.Base.Type = PrintMessageInStatusType
	p.Properties = properties
	return p, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	p := &PrintMessageInStatusWorkflowStep{}
	return p.FromWorkflowSubStep(from)
}

func (p *PrintMessageInStatusWorkflowStep) WorkflowStepName() string {
	return p.Base.Name
}

func (p *PrintMessageInStatusWorkflowStep) DefType() string {
	return PrintMessageInStatusType
}

func (p *PrintMessageInStatusWorkflowStep) If(_if string) *PrintMessageInStatusWorkflowStep {
	p.Base.If = _if
	return p
}

func (p *PrintMessageInStatusWorkflowStep) Alias(alias string) *PrintMessageInStatusWorkflowStep {
	p.Base.Meta.Alias = alias
	return p
}

func (p *PrintMessageInStatusWorkflowStep) Timeout(timeout string) *PrintMessageInStatusWorkflowStep {
	p.Base.Timeout = timeout
	return p
}

func (p *PrintMessageInStatusWorkflowStep) DependsOn(dependsOn []string) *PrintMessageInStatusWorkflowStep {
	p.Base.DependsOn = dependsOn
	return p
}

func (p *PrintMessageInStatusWorkflowStep) Inputs(input common.StepInputs) *PrintMessageInStatusWorkflowStep {
	p.Base.Inputs = input
	return p
}

func (p *PrintMessageInStatusWorkflowStep) Outputs(output common.StepOutputs) *PrintMessageInStatusWorkflowStep {
	p.Base.Outputs = output
	return p
}
