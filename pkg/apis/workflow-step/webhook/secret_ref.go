/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webhook

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the SecretRef type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &SecretRef{}

// SecretRef struct for SecretRef
type SecretRef struct {
	// key is the key in the secret
	Key *string `json:"key"`
	// name is the name of the secret
	Name *string `json:"name"`
}

// NewSecretRefWith instantiates a new SecretRef object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewSecretRefWith(key string, name string) *SecretRef {
	this := SecretRef{}
	this.Key = &key
	this.Name = &name
	return &this
}

// NewSecretRefWithDefault instantiates a new SecretRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretRefWithDefault() *SecretRef {
	this := SecretRef{}
	return &this
}

// NewSecretRef is short for NewSecretRefWithDefault which instantiates a new SecretRef object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretRef() *SecretRef {
	return NewSecretRefWithDefault()
}

// NewSecretRefEmpty instantiates a new SecretRef object with no properties set.
// This constructor will not assign any default values to properties.
func NewSecretRefEmpty() *SecretRef {
	this := SecretRef{}
	return &this
}

// NewSecretRefs converts a list SecretRef pointers to objects.
// This is helpful when the SetSecretRef requires a list of objects
func NewSecretRefList(ps ...*SecretRef) []SecretRef {
	objs := []SecretRef{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this SecretRef
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *SecretRef) Validate() error {
	if o.Key == nil {
		return errors.New("Key in SecretRef must be set")
	}
	if o.Name == nil {
		return errors.New("Name in SecretRef must be set")
	}
	// validate all nested properties
	return nil
}

// GetKey returns the Key field value
func (o *SecretRef) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *SecretRef) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key, true
}

// SetKey sets field value
func (o *SecretRef) SetKey(v string) *SecretRef {
	o.Key = &v
	return o
}

// GetName returns the Name field value
func (o *SecretRef) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SecretRef) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *SecretRef) SetName(v string) *SecretRef {
	o.Name = &v
	return o
}

func (o SecretRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableSecretRef struct {
	value *SecretRef
	isSet bool
}

func (v *NullableSecretRef) Get() *SecretRef {
	return v.value
}

func (v *NullableSecretRef) Set(val *SecretRef) {
	v.value = val
	v.isSet = true
}

func (v *NullableSecretRef) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretRef(val *SecretRef) *NullableSecretRef {
	return &NullableSecretRef{value: val, isSet: true}
}

func (v NullableSecretRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
