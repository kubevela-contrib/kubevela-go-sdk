/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clean_jobs

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the CleanJobsSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CleanJobsSpec{}

// CleanJobsSpec struct for CleanJobsSpec
type CleanJobsSpec struct {
	Labelselector map[string]interface{} `json:"labelselector,omitempty"`
	Namespace     *string                `json:"namespace"`
}

// NewCleanJobsSpecWith instantiates a new CleanJobsSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewCleanJobsSpecWith(namespace string) *CleanJobsSpec {
	this := CleanJobsSpec{}
	this.Namespace = &namespace
	return &this
}

// NewCleanJobsSpecWithDefault instantiates a new CleanJobsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCleanJobsSpecWithDefault() *CleanJobsSpec {
	this := CleanJobsSpec{}
	return &this
}

// NewCleanJobsSpec is short for NewCleanJobsSpecWithDefault which instantiates a new CleanJobsSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCleanJobsSpec() *CleanJobsSpec {
	return NewCleanJobsSpecWithDefault()
}

// NewCleanJobsSpecEmpty instantiates a new CleanJobsSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewCleanJobsSpecEmpty() *CleanJobsSpec {
	this := CleanJobsSpec{}
	return &this
}

// NewCleanJobsSpecs converts a list CleanJobsSpec pointers to objects.
// This is helpful when the SetCleanJobsSpec requires a list of objects
func NewCleanJobsSpecList(ps ...*CleanJobsSpec) []CleanJobsSpec {
	objs := []CleanJobsSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this CleanJobsSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *CleanJobsWorkflowStep) Validate() error {
	if o.Properties.Namespace == nil {
		return errors.New("Namespace in CleanJobsSpec must be set")
	}
	// validate all nested properties
	return nil
}

// GetLabelselector returns the Labelselector field value if set, zero value otherwise.
func (o *CleanJobsWorkflowStep) GetLabelselector() map[string]interface{} {
	if o == nil || utils.IsNil(o.Properties.Labelselector) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties.Labelselector
}

// GetLabelselectorOk returns a tuple with the Labelselector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CleanJobsWorkflowStep) GetLabelselectorOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Properties.Labelselector) {
		return map[string]interface{}{}, false
	}
	return o.Properties.Labelselector, true
}

// HasLabelselector returns a boolean if a field has been set.
func (o *CleanJobsWorkflowStep) HasLabelselector() bool {
	if o != nil && !utils.IsNil(o.Properties.Labelselector) {
		return true
	}

	return false
}

// SetLabelselector gets a reference to the given map[string]interface{} and assigns it to the labelselector field.
// Labelselector:
func (o *CleanJobsWorkflowStep) SetLabelselector(v map[string]interface{}) *CleanJobsWorkflowStep {
	o.Properties.Labelselector = v
	return o
}

// GetNamespace returns the Namespace field value
func (o *CleanJobsWorkflowStep) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *CleanJobsWorkflowStep) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Namespace, true
}

// SetNamespace sets field value
func (o *CleanJobsWorkflowStep) SetNamespace(v string) *CleanJobsWorkflowStep {
	o.Properties.Namespace = &v
	return o
}

func (o CleanJobsSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CleanJobsSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Labelselector) {
		toSerialize["labelselector"] = o.Labelselector
	}
	toSerialize["namespace"] = o.Namespace
	return toSerialize, nil
}

type NullableCleanJobsSpec struct {
	value *CleanJobsSpec
	isSet bool
}

func (v *NullableCleanJobsSpec) Get() *CleanJobsSpec {
	return v.value
}

func (v *NullableCleanJobsSpec) Set(val *CleanJobsSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableCleanJobsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCleanJobsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCleanJobsSpec(val *CleanJobsSpec) *NullableCleanJobsSpec {
	return &NullableCleanJobsSpec{value: val, isSet: true}
}

func (v NullableCleanJobsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCleanJobsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const CleanJobsType = "clean-jobs"

func init() {
	sdkcommon.RegisterWorkflowStep(CleanJobsType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(CleanJobsType, FromWorkflowSubStep)
}

type CleanJobsWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties CleanJobsSpec
}

func CleanJobs(name string) *CleanJobsWorkflowStep {
	c := &CleanJobsWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: CleanJobsType,
	}}
	return c
}

func (c *CleanJobsWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range c.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  c.Base.DependsOn,
		If:         c.Base.If,
		Inputs:     c.Base.Inputs,
		Meta:       c.Base.Meta,
		Name:       c.Base.Name,
		Outputs:    c.Base.Outputs,
		Properties: util.Object2RawExtension(c.Properties),
		SubSteps:   subSteps,
		Timeout:    c.Base.Timeout,
		Type:       CleanJobsType,
	}
	return res
}

func (c *CleanJobsWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*CleanJobsWorkflowStep, error) {
	var properties CleanJobsSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := c.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	c.Base.Name = from.Name
	c.Base.DependsOn = from.DependsOn
	c.Base.Inputs = from.Inputs
	c.Base.Outputs = from.Outputs
	c.Base.If = from.If
	c.Base.Timeout = from.Timeout
	c.Base.Meta = from.Meta
	c.Base.Type = CleanJobsType
	c.Properties = properties
	c.Base.SubSteps = subSteps
	return c, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	c := &CleanJobsWorkflowStep{}
	return c.FromWorkflowStep(from)
}

func (c *CleanJobsWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*CleanJobsWorkflowStep, error) {
	var properties CleanJobsSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	c.Base.Name = from.Name
	c.Base.DependsOn = from.DependsOn
	c.Base.Inputs = from.Inputs
	c.Base.Outputs = from.Outputs
	c.Base.If = from.If
	c.Base.Timeout = from.Timeout
	c.Base.Meta = from.Meta
	c.Base.Type = CleanJobsType
	c.Properties = properties
	return c, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	c := &CleanJobsWorkflowStep{}
	return c.FromWorkflowSubStep(from)
}

func (c *CleanJobsWorkflowStep) WorkflowStepName() string {
	return c.Base.Name
}

func (c *CleanJobsWorkflowStep) DefType() string {
	return CleanJobsType
}

func (c *CleanJobsWorkflowStep) If(_if string) *CleanJobsWorkflowStep {
	c.Base.If = _if
	return c
}

func (c *CleanJobsWorkflowStep) Alias(alias string) *CleanJobsWorkflowStep {
	c.Base.Meta.Alias = alias
	return c
}

func (c *CleanJobsWorkflowStep) Timeout(timeout string) *CleanJobsWorkflowStep {
	c.Base.Timeout = timeout
	return c
}

func (c *CleanJobsWorkflowStep) DependsOn(dependsOn []string) *CleanJobsWorkflowStep {
	c.Base.DependsOn = dependsOn
	return c
}

func (c *CleanJobsWorkflowStep) Inputs(input common.StepInputs) *CleanJobsWorkflowStep {
	c.Base.Inputs = input
	return c
}

func (c *CleanJobsWorkflowStep) Outputs(output common.StepOutputs) *CleanJobsWorkflowStep {
	c.Base.Outputs = output
	return c
}
