/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package share_cloud_resource

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Placements type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Placements{}

// Placements struct for Placements
type Placements struct {
	Cluster   *string `json:"cluster,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

// NewPlacementsWith instantiates a new Placements object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPlacementsWith() *Placements {
	this := Placements{}
	return &this
}

// NewPlacementsWithDefault instantiates a new Placements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlacementsWithDefault() *Placements {
	this := Placements{}
	return &this
}

// NewPlacements is short for NewPlacementsWithDefault which instantiates a new Placements object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlacements() *Placements {
	return NewPlacementsWithDefault()
}

// NewPlacementsEmpty instantiates a new Placements object with no properties set.
// This constructor will not assign any default values to properties.
func NewPlacementsEmpty() *Placements {
	this := Placements{}
	return &this
}

// NewPlacementss converts a list Placements pointers to objects.
// This is helpful when the SetPlacements requires a list of objects
func NewPlacementsList(ps ...*Placements) []Placements {
	objs := []Placements{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Placements
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Placements) Validate() error {
	// validate all nested properties
	return nil
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *Placements) GetCluster() string {
	if o == nil || utils.IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Placements) GetClusterOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *Placements) HasCluster() bool {
	if o != nil && !utils.IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the cluster field.
// Cluster:
func (o *Placements) SetCluster(v string) *Placements {
	o.Cluster = &v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Placements) GetNamespace() string {
	if o == nil || utils.IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Placements) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Placements) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// Namespace:
func (o *Placements) SetNamespace(v string) *Placements {
	o.Namespace = &v
	return o
}

func (o Placements) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Placements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !utils.IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullablePlacements struct {
	value *Placements
	isSet bool
}

func (v *NullablePlacements) Get() *Placements {
	return v.value
}

func (v *NullablePlacements) Set(val *Placements) {
	v.value = val
	v.isSet = true
}

func (v *NullablePlacements) IsSet() bool {
	return v.isSet
}

func (v *NullablePlacements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlacements(val *Placements) *NullablePlacements {
	return &NullablePlacements{value: val, isSet: true}
}

func (v NullablePlacements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlacements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
