/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package share_cloud_resource

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the ShareCloudResourceSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ShareCloudResourceSpec{}

// ShareCloudResourceSpec struct for ShareCloudResourceSpec
type ShareCloudResourceSpec struct {
	// Declare the name of the env in policy
	Env *string `json:"env,omitempty"`
	// Declare the location to bind
	Placements []Placements `json:"placements,omitempty"`
	// Declare the name of the env-binding policy, if empty, the first env-binding policy will be used
	Policy *string `json:"policy,omitempty"`
}

// NewShareCloudResourceSpecWith instantiates a new ShareCloudResourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareCloudResourceSpecWith() *ShareCloudResourceSpec {
	this := ShareCloudResourceSpec{}
	var policy string = ""
	this.Policy = &policy
	return &this
}

// NewShareCloudResourceSpec instantiates a new ShareCloudResourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareCloudResourceSpec() *ShareCloudResourceSpec {
	this := ShareCloudResourceSpec{}
	var policy string = ""
	this.Policy = &policy
	return &this
}

// NewShareCloudResourceSpecs converts a list ShareCloudResourceSpec pointers to objects.
// This is helpful when the SetShareCloudResourceSpec requires a list of objects
func NewShareCloudResourceSpecList(ps ...*ShareCloudResourceSpec) []ShareCloudResourceSpec {
	objs := []ShareCloudResourceSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *ShareCloudResourceWorkflowStep) GetEnv() string {
	if o == nil || utils.IsNil(o.Properties.Env) {
		var ret string
		return ret
	}
	return *o.Properties.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareCloudResourceWorkflowStep) GetEnvOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Env) {
		return nil, false
	}
	return o.Properties.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *ShareCloudResourceWorkflowStep) HasEnv() bool {
	if o != nil && !utils.IsNil(o.Properties.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given string and assigns it to the env field.
// Env:  Declare the name of the env in policy
func (o *ShareCloudResourceWorkflowStep) SetEnv(v string) *ShareCloudResourceWorkflowStep {
	o.Properties.Env = &v
	return o
}

// GetPlacements returns the Placements field value if set, zero value otherwise.
func (o *ShareCloudResourceWorkflowStep) GetPlacements() []Placements {
	if o == nil || utils.IsNil(o.Properties.Placements) {
		var ret []Placements
		return ret
	}
	return o.Properties.Placements
}

// GetPlacementsOk returns a tuple with the Placements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareCloudResourceWorkflowStep) GetPlacementsOk() ([]Placements, bool) {
	if o == nil || utils.IsNil(o.Properties.Placements) {
		return nil, false
	}
	return o.Properties.Placements, true
}

// HasPlacements returns a boolean if a field has been set.
func (o *ShareCloudResourceWorkflowStep) HasPlacements() bool {
	if o != nil && !utils.IsNil(o.Properties.Placements) {
		return true
	}

	return false
}

// SetPlacements gets a reference to the given []Placements and assigns it to the placements field.
// Placements:  Declare the location to bind
func (o *ShareCloudResourceWorkflowStep) SetPlacements(v []Placements) *ShareCloudResourceWorkflowStep {
	o.Properties.Placements = v
	return o
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *ShareCloudResourceWorkflowStep) GetPolicy() string {
	if o == nil || utils.IsNil(o.Properties.Policy) {
		var ret string
		return ret
	}
	return *o.Properties.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareCloudResourceWorkflowStep) GetPolicyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Policy) {
		return nil, false
	}
	return o.Properties.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *ShareCloudResourceWorkflowStep) HasPolicy() bool {
	if o != nil && !utils.IsNil(o.Properties.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given string and assigns it to the policy field.
// Policy:  Declare the name of the env-binding policy, if empty, the first env-binding policy will be used
func (o *ShareCloudResourceWorkflowStep) SetPolicy(v string) *ShareCloudResourceWorkflowStep {
	o.Properties.Policy = &v
	return o
}

func (o ShareCloudResourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShareCloudResourceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !utils.IsNil(o.Placements) {
		toSerialize["placements"] = o.Placements
	}
	if !utils.IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	return toSerialize, nil
}

type NullableShareCloudResourceSpec struct {
	value *ShareCloudResourceSpec
	isSet bool
}

func (v NullableShareCloudResourceSpec) Get() *ShareCloudResourceSpec {
	return v.value
}

func (v *NullableShareCloudResourceSpec) Set(val *ShareCloudResourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableShareCloudResourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableShareCloudResourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareCloudResourceSpec(val *ShareCloudResourceSpec) *NullableShareCloudResourceSpec {
	return &NullableShareCloudResourceSpec{value: val, isSet: true}
}

func (v NullableShareCloudResourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareCloudResourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const ShareCloudResourceType = "share-cloud-resource"

func init() {
	sdkcommon.RegisterWorkflowStep(ShareCloudResourceType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(ShareCloudResourceType, FromWorkflowSubStep)
}

type ShareCloudResourceWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties ShareCloudResourceSpec
}

func ShareCloudResource(name string) *ShareCloudResourceWorkflowStep {
	s := &ShareCloudResourceWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: ShareCloudResourceType,
	}}
	return s
}

func (s *ShareCloudResourceWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range s.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  s.Base.DependsOn,
		If:         s.Base.If,
		Inputs:     s.Base.Inputs,
		Meta:       s.Base.Meta,
		Name:       s.Base.Name,
		Outputs:    s.Base.Outputs,
		Properties: util.Object2RawExtension(s.Properties),
		SubSteps:   subSteps,
		Timeout:    s.Base.Timeout,
		Type:       ShareCloudResourceType,
	}
	return res
}

func (s *ShareCloudResourceWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*ShareCloudResourceWorkflowStep, error) {
	var properties ShareCloudResourceSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := s.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	s.Base.Name = from.Name
	s.Base.DependsOn = from.DependsOn
	s.Base.Inputs = from.Inputs
	s.Base.Outputs = from.Outputs
	s.Base.If = from.If
	s.Base.Timeout = from.Timeout
	s.Base.Meta = from.Meta
	s.Base.Type = ShareCloudResourceType
	s.Properties = properties
	s.Base.SubSteps = subSteps
	return s, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	s := &ShareCloudResourceWorkflowStep{}
	return s.FromWorkflowStep(from)
}

func (s *ShareCloudResourceWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*ShareCloudResourceWorkflowStep, error) {
	var properties ShareCloudResourceSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	s.Base.Name = from.Name
	s.Base.DependsOn = from.DependsOn
	s.Base.Inputs = from.Inputs
	s.Base.Outputs = from.Outputs
	s.Base.If = from.If
	s.Base.Timeout = from.Timeout
	s.Base.Meta = from.Meta
	s.Base.Type = ShareCloudResourceType
	s.Properties = properties
	return s, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	s := &ShareCloudResourceWorkflowStep{}
	return s.FromWorkflowSubStep(from)
}

func (s *ShareCloudResourceWorkflowStep) WorkflowStepName() string {
	return s.Base.Name
}

func (s *ShareCloudResourceWorkflowStep) DefType() string {
	return ShareCloudResourceType
}

func (s *ShareCloudResourceWorkflowStep) If(_if string) *ShareCloudResourceWorkflowStep {
	s.Base.If = _if
	return s
}

func (s *ShareCloudResourceWorkflowStep) Alias(alias string) *ShareCloudResourceWorkflowStep {
	s.Base.Meta.Alias = alias
	return s
}

func (s *ShareCloudResourceWorkflowStep) Timeout(timeout string) *ShareCloudResourceWorkflowStep {
	s.Base.Timeout = timeout
	return s
}

func (s *ShareCloudResourceWorkflowStep) DependsOn(dependsOn []string) *ShareCloudResourceWorkflowStep {
	s.Base.DependsOn = dependsOn
	return s
}

func (s *ShareCloudResourceWorkflowStep) Inputs(input common.StepInputs) *ShareCloudResourceWorkflowStep {
	s.Base.Inputs = input
	return s
}

func (s *ShareCloudResourceWorkflowStep) Outputs(output common.StepOutputs) *ShareCloudResourceWorkflowStep {
	s.Base.Outputs = output
	return s
}
