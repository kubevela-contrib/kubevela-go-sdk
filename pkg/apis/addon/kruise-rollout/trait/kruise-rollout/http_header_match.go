/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kruise_rollout

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the HTTPHeaderMatch type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &HTTPHeaderMatch{}

// HTTPHeaderMatch struct for HTTPHeaderMatch
type HTTPHeaderMatch struct {
	Name  *string `json:"Name"`
	Type  *string `json:"Type,omitempty"`
	Value *string `json:"Value"`
}

// NewHTTPHeaderMatchWith instantiates a new HTTPHeaderMatch object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewHTTPHeaderMatchWith(name string, value string) *HTTPHeaderMatch {
	this := HTTPHeaderMatch{}
	this.Name = &name
	var type_ string = "Exact"
	this.Type = &type_
	this.Value = &value
	return &this
}

// NewHTTPHeaderMatchWithDefault instantiates a new HTTPHeaderMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTTPHeaderMatchWithDefault() *HTTPHeaderMatch {
	this := HTTPHeaderMatch{}
	var type_ string = "Exact"
	this.Type = &type_
	return &this
}

// NewHTTPHeaderMatch is short for NewHTTPHeaderMatchWithDefault which instantiates a new HTTPHeaderMatch object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTTPHeaderMatch() *HTTPHeaderMatch {
	return NewHTTPHeaderMatchWithDefault()
}

// NewHTTPHeaderMatchEmpty instantiates a new HTTPHeaderMatch object with no properties set.
// This constructor will not assign any default values to properties.
func NewHTTPHeaderMatchEmpty() *HTTPHeaderMatch {
	this := HTTPHeaderMatch{}
	return &this
}

// NewHTTPHeaderMatchs converts a list HTTPHeaderMatch pointers to objects.
// This is helpful when the SetHTTPHeaderMatch requires a list of objects
func NewHTTPHeaderMatchList(ps ...*HTTPHeaderMatch) []HTTPHeaderMatch {
	objs := []HTTPHeaderMatch{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this HTTPHeaderMatch
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *HTTPHeaderMatch) Validate() error {
	if o.Name == nil {
		return errors.New("Name in HTTPHeaderMatch must be set")
	}
	if o.Value == nil {
		return errors.New("Value in HTTPHeaderMatch must be set")
	}
	// validate all nested properties
	return nil
}

// GetName returns the Name field value
func (o *HTTPHeaderMatch) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HTTPHeaderMatch) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *HTTPHeaderMatch) SetName(v string) *HTTPHeaderMatch {
	o.Name = &v
	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HTTPHeaderMatch) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPHeaderMatch) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HTTPHeaderMatch) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the type_ field.
// Type:
func (o *HTTPHeaderMatch) SetType(v string) *HTTPHeaderMatch {
	o.Type = &v
	return o
}

// GetValue returns the Value field value
func (o *HTTPHeaderMatch) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *HTTPHeaderMatch) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *HTTPHeaderMatch) SetValue(v string) *HTTPHeaderMatch {
	o.Value = &v
	return o
}

func (o HTTPHeaderMatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HTTPHeaderMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Name"] = o.Name
	if !utils.IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	toSerialize["Value"] = o.Value
	return toSerialize, nil
}

type NullableHTTPHeaderMatch struct {
	value *HTTPHeaderMatch
	isSet bool
}

func (v *NullableHTTPHeaderMatch) Get() *HTTPHeaderMatch {
	return v.value
}

func (v *NullableHTTPHeaderMatch) Set(val *HTTPHeaderMatch) {
	v.value = val
	v.isSet = true
}

func (v *NullableHTTPHeaderMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableHTTPHeaderMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPHeaderMatch(val *HTTPHeaderMatch) *NullableHTTPHeaderMatch {
	return &NullableHTTPHeaderMatch{value: val, isSet: true}
}

func (v NullableHTTPHeaderMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPHeaderMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
