/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kruise_rollout

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the KruiseRolloutSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &KruiseRolloutSpec{}

// KruiseRolloutSpec struct for KruiseRolloutSpec
type KruiseRolloutSpec struct {
	// If true, a streaming release will be performed, i.e., after the current step is released, subsequent steps will be released without interval
	Auto   *bool   `json:"auto"`
	Canary *Canary `json:"canary"`
	// Defines the rolling style of Deployment, cloud be \"canary\" or \"batch\"
	ReleaseMode   *string       `json:"releaseMode,omitempty"`
	StepPartition *int32        `json:"stepPartition,omitempty"`
	WorkloadType  *WorkloadType `json:"workloadType,omitempty"`
}

// NewKruiseRolloutSpecWith instantiates a new KruiseRolloutSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewKruiseRolloutSpecWith(auto bool, canary Canary) *KruiseRolloutSpec {
	this := KruiseRolloutSpec{}
	this.Auto = &auto
	this.Canary = &canary
	var releaseMode string = "canary"
	this.ReleaseMode = &releaseMode
	return &this
}

// NewKruiseRolloutSpecWithDefault instantiates a new KruiseRolloutSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKruiseRolloutSpecWithDefault() *KruiseRolloutSpec {
	this := KruiseRolloutSpec{}
	var auto bool = false
	this.Auto = &auto
	var releaseMode string = "canary"
	this.ReleaseMode = &releaseMode
	return &this
}

// NewKruiseRolloutSpec is short for NewKruiseRolloutSpecWithDefault which instantiates a new KruiseRolloutSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKruiseRolloutSpec() *KruiseRolloutSpec {
	return NewKruiseRolloutSpecWithDefault()
}

// NewKruiseRolloutSpecEmpty instantiates a new KruiseRolloutSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewKruiseRolloutSpecEmpty() *KruiseRolloutSpec {
	this := KruiseRolloutSpec{}
	return &this
}

// NewKruiseRolloutSpecs converts a list KruiseRolloutSpec pointers to objects.
// This is helpful when the SetKruiseRolloutSpec requires a list of objects
func NewKruiseRolloutSpecList(ps ...*KruiseRolloutSpec) []KruiseRolloutSpec {
	objs := []KruiseRolloutSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this KruiseRolloutSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *KruiseRolloutTrait) Validate() error {
	if o.Properties.Auto == nil {
		return errors.New("Auto in KruiseRolloutSpec must be set")
	}
	if o.Properties.Canary == nil {
		return errors.New("Canary in KruiseRolloutSpec must be set")
	}
	// validate all nested properties
	if o.Properties.Canary != nil {
		if err := o.Properties.Canary.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.WorkloadType != nil {
		if err := o.Properties.WorkloadType.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetAuto returns the Auto field value
func (o *KruiseRolloutTrait) GetAuto() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Properties.Auto
}

// GetAutoOk returns a tuple with the Auto field value
// and a boolean to check if the value has been set.
func (o *KruiseRolloutTrait) GetAutoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Auto, true
}

// SetAuto sets field value
func (o *KruiseRolloutTrait) SetAuto(v bool) *KruiseRolloutTrait {
	o.Properties.Auto = &v
	return o
}

// GetCanary returns the Canary field value
func (o *KruiseRolloutTrait) GetCanary() Canary {
	if o == nil {
		var ret Canary
		return ret
	}

	return *o.Properties.Canary
}

// GetCanaryOk returns a tuple with the Canary field value
// and a boolean to check if the value has been set.
func (o *KruiseRolloutTrait) GetCanaryOk() (*Canary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Canary, true
}

// SetCanary sets field value
func (o *KruiseRolloutTrait) SetCanary(v Canary) *KruiseRolloutTrait {
	o.Properties.Canary = &v
	return o
}

// GetReleaseMode returns the ReleaseMode field value if set, zero value otherwise.
func (o *KruiseRolloutTrait) GetReleaseMode() string {
	if o == nil || utils.IsNil(o.Properties.ReleaseMode) {
		var ret string
		return ret
	}
	return *o.Properties.ReleaseMode
}

// GetReleaseModeOk returns a tuple with the ReleaseMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KruiseRolloutTrait) GetReleaseModeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.ReleaseMode) {
		return nil, false
	}
	return o.Properties.ReleaseMode, true
}

// HasReleaseMode returns a boolean if a field has been set.
func (o *KruiseRolloutTrait) HasReleaseMode() bool {
	if o != nil && !utils.IsNil(o.Properties.ReleaseMode) {
		return true
	}

	return false
}

// SetReleaseMode gets a reference to the given string and assigns it to the releaseMode field.
// ReleaseMode:  Defines the rolling style of Deployment, cloud be \"canary\" or \"batch\"
func (o *KruiseRolloutTrait) SetReleaseMode(v string) *KruiseRolloutTrait {
	o.Properties.ReleaseMode = &v
	return o
}

// GetStepPartition returns the StepPartition field value if set, zero value otherwise.
func (o *KruiseRolloutTrait) GetStepPartition() int32 {
	if o == nil || utils.IsNil(o.Properties.StepPartition) {
		var ret int32
		return ret
	}
	return *o.Properties.StepPartition
}

// GetStepPartitionOk returns a tuple with the StepPartition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KruiseRolloutTrait) GetStepPartitionOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Properties.StepPartition) {
		return nil, false
	}
	return o.Properties.StepPartition, true
}

// HasStepPartition returns a boolean if a field has been set.
func (o *KruiseRolloutTrait) HasStepPartition() bool {
	if o != nil && !utils.IsNil(o.Properties.StepPartition) {
		return true
	}

	return false
}

// SetStepPartition gets a reference to the given int32 and assigns it to the stepPartition field.
// StepPartition:
func (o *KruiseRolloutTrait) SetStepPartition(v int32) *KruiseRolloutTrait {
	o.Properties.StepPartition = &v
	return o
}

// GetWorkloadType returns the WorkloadType field value if set, zero value otherwise.
func (o *KruiseRolloutTrait) GetWorkloadType() WorkloadType {
	if o == nil || utils.IsNil(o.Properties.WorkloadType) {
		var ret WorkloadType
		return ret
	}
	return *o.Properties.WorkloadType
}

// GetWorkloadTypeOk returns a tuple with the WorkloadType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KruiseRolloutTrait) GetWorkloadTypeOk() (*WorkloadType, bool) {
	if o == nil || utils.IsNil(o.Properties.WorkloadType) {
		return nil, false
	}
	return o.Properties.WorkloadType, true
}

// HasWorkloadType returns a boolean if a field has been set.
func (o *KruiseRolloutTrait) HasWorkloadType() bool {
	if o != nil && !utils.IsNil(o.Properties.WorkloadType) {
		return true
	}

	return false
}

// SetWorkloadType gets a reference to the given WorkloadType and assigns it to the workloadType field.
// WorkloadType:
func (o *KruiseRolloutTrait) SetWorkloadType(v WorkloadType) *KruiseRolloutTrait {
	o.Properties.WorkloadType = &v
	return o
}

func (o KruiseRolloutSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KruiseRolloutSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auto"] = o.Auto
	toSerialize["canary"] = o.Canary
	if !utils.IsNil(o.ReleaseMode) {
		toSerialize["releaseMode"] = o.ReleaseMode
	}
	if !utils.IsNil(o.StepPartition) {
		toSerialize["stepPartition"] = o.StepPartition
	}
	if !utils.IsNil(o.WorkloadType) {
		toSerialize["workloadType"] = o.WorkloadType
	}
	return toSerialize, nil
}

type NullableKruiseRolloutSpec struct {
	value *KruiseRolloutSpec
	isSet bool
}

func (v *NullableKruiseRolloutSpec) Get() *KruiseRolloutSpec {
	return v.value
}

func (v *NullableKruiseRolloutSpec) Set(val *KruiseRolloutSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableKruiseRolloutSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableKruiseRolloutSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKruiseRolloutSpec(val *KruiseRolloutSpec) *NullableKruiseRolloutSpec {
	return &NullableKruiseRolloutSpec{value: val, isSet: true}
}

func (v NullableKruiseRolloutSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKruiseRolloutSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const KruiseRolloutType = "kruise-rollout"

func init() {
	sdkcommon.RegisterTrait(KruiseRolloutType, FromTrait)
}

type KruiseRolloutTrait struct {
	Base       apis.TraitBase
	Properties KruiseRolloutSpec
}

func KruiseRollout() *KruiseRolloutTrait {
	k := &KruiseRolloutTrait{Base: apis.TraitBase{}}
	return k
}

func (k *KruiseRolloutTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(k.Properties),
		Type:       KruiseRolloutType,
	}
	return res
}

func (k *KruiseRolloutTrait) FromTrait(from common.ApplicationTrait) (*KruiseRolloutTrait, error) {
	var properties KruiseRolloutSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	k.Base.Type = KruiseRolloutType
	k.Properties = properties
	return k, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	k := &KruiseRolloutTrait{}
	return k.FromTrait(from)
}

func (k *KruiseRolloutTrait) DefType() string {
	return KruiseRolloutType
}
