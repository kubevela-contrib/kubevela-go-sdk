/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kruise_rollout

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the HttpRouteMatch type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &HttpRouteMatch{}

// HttpRouteMatch struct for HttpRouteMatch
type HttpRouteMatch struct {
	Headers []HTTPHeaderMatch `json:"headers"`
}

// NewHttpRouteMatchWith instantiates a new HttpRouteMatch object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewHttpRouteMatchWith(headers []HTTPHeaderMatch) *HttpRouteMatch {
	this := HttpRouteMatch{}
	this.Headers = headers
	return &this
}

// NewHttpRouteMatchWithDefault instantiates a new HttpRouteMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpRouteMatchWithDefault() *HttpRouteMatch {
	this := HttpRouteMatch{}
	return &this
}

// NewHttpRouteMatch is short for NewHttpRouteMatchWithDefault which instantiates a new HttpRouteMatch object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpRouteMatch() *HttpRouteMatch {
	return NewHttpRouteMatchWithDefault()
}

// NewHttpRouteMatchEmpty instantiates a new HttpRouteMatch object with no properties set.
// This constructor will not assign any default values to properties.
func NewHttpRouteMatchEmpty() *HttpRouteMatch {
	this := HttpRouteMatch{}
	return &this
}

// NewHttpRouteMatchs converts a list HttpRouteMatch pointers to objects.
// This is helpful when the SetHttpRouteMatch requires a list of objects
func NewHttpRouteMatchList(ps ...*HttpRouteMatch) []HttpRouteMatch {
	objs := []HttpRouteMatch{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this HttpRouteMatch
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *HttpRouteMatch) Validate() error {
	if o.Headers == nil {
		return errors.New("Headers in HttpRouteMatch must be set")
	}
	// validate all nested properties
	return nil
}

// GetHeaders returns the Headers field value
func (o *HttpRouteMatch) GetHeaders() []HTTPHeaderMatch {
	if o == nil {
		var ret []HTTPHeaderMatch
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *HttpRouteMatch) GetHeadersOk() ([]HTTPHeaderMatch, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headers, true
}

// SetHeaders sets field value
func (o *HttpRouteMatch) SetHeaders(v []HTTPHeaderMatch) *HttpRouteMatch {
	o.Headers = v
	return o
}

func (o HttpRouteMatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpRouteMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["headers"] = o.Headers
	return toSerialize, nil
}

type NullableHttpRouteMatch struct {
	value *HttpRouteMatch
	isSet bool
}

func (v *NullableHttpRouteMatch) Get() *HttpRouteMatch {
	return v.value
}

func (v *NullableHttpRouteMatch) Set(val *HttpRouteMatch) {
	v.value = val
	v.isSet = true
}

func (v *NullableHttpRouteMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpRouteMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpRouteMatch(val *HttpRouteMatch) *NullableHttpRouteMatch {
	return &NullableHttpRouteMatch{value: val, isSet: true}
}

func (v NullableHttpRouteMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpRouteMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
