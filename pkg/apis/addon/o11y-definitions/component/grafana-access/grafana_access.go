/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grafana_access

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the GrafanaAccessSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GrafanaAccessSpec{}

// GrafanaAccessSpec struct for GrafanaAccessSpec
type GrafanaAccessSpec struct {
	// The endpoint of the grafana instance.
	Endpoint *string `json:"endpoint"`
	// The name of the grafana instance.
	Name *string `json:"name"`
	// The password for access grafana
	Password *string `json:"password,omitempty"`
	// The usage for access grafana
	Token *string `json:"token,omitempty"`
	// The username for access grafana
	Username *string `json:"username,omitempty"`
}

// NewGrafanaAccessSpecWith instantiates a new GrafanaAccessSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewGrafanaAccessSpecWith(endpoint string, name string) *GrafanaAccessSpec {
	this := GrafanaAccessSpec{}
	this.Endpoint = &endpoint
	this.Name = &name
	return &this
}

// NewGrafanaAccessSpecWithDefault instantiates a new GrafanaAccessSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGrafanaAccessSpecWithDefault() *GrafanaAccessSpec {
	this := GrafanaAccessSpec{}
	return &this
}

// NewGrafanaAccessSpec is short for NewGrafanaAccessSpecWithDefault which instantiates a new GrafanaAccessSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGrafanaAccessSpec() *GrafanaAccessSpec {
	return NewGrafanaAccessSpecWithDefault()
}

// NewGrafanaAccessSpecEmpty instantiates a new GrafanaAccessSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewGrafanaAccessSpecEmpty() *GrafanaAccessSpec {
	this := GrafanaAccessSpec{}
	return &this
}

// NewGrafanaAccessSpecs converts a list GrafanaAccessSpec pointers to objects.
// This is helpful when the SetGrafanaAccessSpec requires a list of objects
func NewGrafanaAccessSpecList(ps ...*GrafanaAccessSpec) []GrafanaAccessSpec {
	objs := []GrafanaAccessSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this GrafanaAccessSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *GrafanaAccessComponent) Validate() error {
	if o.Properties.Endpoint == nil {
		return errors.New("Endpoint in GrafanaAccessSpec must be set")
	}
	if o.Properties.Name == nil {
		return errors.New("Name in GrafanaAccessSpec must be set")
	}
	// validate all nested properties

	for i, v := range o.Base.Traits {
		if err := v.Validate(); err != nil {
			return fmt.Errorf("traits[%d] %s in %s component is invalid: %w", i, v.DefType(), GrafanaAccessType, err)
		}
	}
	return nil
}

// GetEndpoint returns the Endpoint field value
func (o *GrafanaAccessComponent) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *GrafanaAccessComponent) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Endpoint, true
}

// SetEndpoint sets field value
func (o *GrafanaAccessComponent) SetEndpoint(v string) *GrafanaAccessComponent {
	o.Properties.Endpoint = &v
	return o
}

// GetName returns the Name field value
func (o *GrafanaAccessComponent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GrafanaAccessComponent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Name, true
}

// SetName sets field value
func (o *GrafanaAccessComponent) SetName(v string) *GrafanaAccessComponent {
	o.Properties.Name = &v
	return o
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *GrafanaAccessComponent) GetPassword() string {
	if o == nil || utils.IsNil(o.Properties.Password) {
		var ret string
		return ret
	}
	return *o.Properties.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaAccessComponent) GetPasswordOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Password) {
		return nil, false
	}
	return o.Properties.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *GrafanaAccessComponent) HasPassword() bool {
	if o != nil && !utils.IsNil(o.Properties.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the password field.
// Password:  The password for access grafana
func (o *GrafanaAccessComponent) SetPassword(v string) *GrafanaAccessComponent {
	o.Properties.Password = &v
	return o
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *GrafanaAccessComponent) GetToken() string {
	if o == nil || utils.IsNil(o.Properties.Token) {
		var ret string
		return ret
	}
	return *o.Properties.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaAccessComponent) GetTokenOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Token) {
		return nil, false
	}
	return o.Properties.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *GrafanaAccessComponent) HasToken() bool {
	if o != nil && !utils.IsNil(o.Properties.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the token field.
// Token:  The usage for access grafana
func (o *GrafanaAccessComponent) SetToken(v string) *GrafanaAccessComponent {
	o.Properties.Token = &v
	return o
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *GrafanaAccessComponent) GetUsername() string {
	if o == nil || utils.IsNil(o.Properties.Username) {
		var ret string
		return ret
	}
	return *o.Properties.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaAccessComponent) GetUsernameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Username) {
		return nil, false
	}
	return o.Properties.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *GrafanaAccessComponent) HasUsername() bool {
	if o != nil && !utils.IsNil(o.Properties.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the username field.
// Username:  The username for access grafana
func (o *GrafanaAccessComponent) SetUsername(v string) *GrafanaAccessComponent {
	o.Properties.Username = &v
	return o
}

func (o GrafanaAccessSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GrafanaAccessSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endpoint"] = o.Endpoint
	toSerialize["name"] = o.Name
	if !utils.IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !utils.IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !utils.IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableGrafanaAccessSpec struct {
	value *GrafanaAccessSpec
	isSet bool
}

func (v *NullableGrafanaAccessSpec) Get() *GrafanaAccessSpec {
	return v.value
}

func (v *NullableGrafanaAccessSpec) Set(val *GrafanaAccessSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableGrafanaAccessSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableGrafanaAccessSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrafanaAccessSpec(val *GrafanaAccessSpec) *NullableGrafanaAccessSpec {
	return &NullableGrafanaAccessSpec{value: val, isSet: true}
}

func (v NullableGrafanaAccessSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrafanaAccessSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const GrafanaAccessType = "grafana-access"

func init() {
	sdkcommon.RegisterComponent(GrafanaAccessType, FromComponent)
}

type GrafanaAccessComponent struct {
	Base       apis.ComponentBase
	Properties GrafanaAccessSpec
}

func GrafanaAccess(name string) *GrafanaAccessComponent {
	g := &GrafanaAccessComponent{Base: apis.ComponentBase{
		Name: name,
		Type: GrafanaAccessType,
	}}
	return g
}

func (g *GrafanaAccessComponent) Build() common.ApplicationComponent {
	traits := make([]common.ApplicationTrait, 0)
	for _, trait := range g.Base.Traits {
		traits = append(traits, trait.Build())
	}
	res := common.ApplicationComponent{
		DependsOn:  g.Base.DependsOn,
		Inputs:     g.Base.Inputs,
		Name:       g.Base.Name,
		Outputs:    g.Base.Outputs,
		Properties: util.Object2RawExtension(g.Properties),
		Traits:     traits,
		Type:       GrafanaAccessType,
	}
	return res
}

func (g *GrafanaAccessComponent) FromComponent(from common.ApplicationComponent) (*GrafanaAccessComponent, error) {
	for _, trait := range from.Traits {
		_t, err := sdkcommon.FromTrait(&trait)
		if err != nil {
			return nil, err
		}
		g.Base.Traits = append(g.Base.Traits, _t)
	}
	var properties GrafanaAccessSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	g.Base.Name = from.Name
	g.Base.DependsOn = from.DependsOn
	g.Base.Inputs = from.Inputs
	g.Base.Outputs = from.Outputs
	g.Base.Type = GrafanaAccessType
	g.Properties = properties
	return g, nil
}

func FromComponent(from common.ApplicationComponent) (apis.Component, error) {
	g := &GrafanaAccessComponent{}
	return g.FromComponent(from)
}

func (g *GrafanaAccessComponent) SetTraits(traits ...apis.Trait) *GrafanaAccessComponent {
	for _, addTrait := range traits {
		found := false
		for i, _t := range g.Base.Traits {
			if _t.DefType() == addTrait.DefType() {
				g.Base.Traits[i] = addTrait
				found = true
				break
			}
			if !found {
				g.Base.Traits = append(g.Base.Traits, addTrait)
			}
		}
	}
	return g
}

func (g *GrafanaAccessComponent) GetTrait(typ string) apis.Trait {
	for _, _t := range g.Base.Traits {
		if _t.DefType() == typ {
			return _t
		}
	}
	return nil
}

func (g *GrafanaAccessComponent) GetAllTraits() []apis.Trait {
	return g.Base.Traits
}

func (g *GrafanaAccessComponent) ComponentName() string {
	return g.Base.Name
}

func (g *GrafanaAccessComponent) DefType() string {
	return GrafanaAccessType
}

func (g *GrafanaAccessComponent) DependsOn(dependsOn []string) *GrafanaAccessComponent {
	g.Base.DependsOn = dependsOn
	return g
}

func (g *GrafanaAccessComponent) Inputs(input common.StepInputs) *GrafanaAccessComponent {
	g.Base.Inputs = input
	return g
}

func (g *GrafanaAccessComponent) Outputs(output common.StepOutputs) *GrafanaAccessComponent {
	g.Base.Outputs = output
	return g
}

func (g *GrafanaAccessComponent) AddDependsOn(dependsOn string) *GrafanaAccessComponent {
	g.Base.DependsOn = append(g.Base.DependsOn, dependsOn)
	return g
}
