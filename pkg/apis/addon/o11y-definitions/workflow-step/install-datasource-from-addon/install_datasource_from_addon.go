/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package install_datasource_from_addon

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the InstallDatasourceFromAddonSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &InstallDatasourceFromAddonSpec{}

// InstallDatasourceFromAddonSpec struct for InstallDatasourceFromAddonSpec
type InstallDatasourceFromAddonSpec struct {
	AddonName      *string `json:"addonName"`
	AddonNamespace *string `json:"addonNamespace"`
	Grafana        *string `json:"grafana"`
	PortName       *string `json:"portName"`
	Type           *string `json:"type"`
}

// NewInstallDatasourceFromAddonSpecWith instantiates a new InstallDatasourceFromAddonSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewInstallDatasourceFromAddonSpecWith(addonName string, addonNamespace string, grafana string, portName string, type_ string) *InstallDatasourceFromAddonSpec {
	this := InstallDatasourceFromAddonSpec{}
	this.AddonName = &addonName
	this.AddonNamespace = &addonNamespace
	this.Grafana = &grafana
	this.PortName = &portName
	this.Type = &type_
	return &this
}

// NewInstallDatasourceFromAddonSpecWithDefault instantiates a new InstallDatasourceFromAddonSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallDatasourceFromAddonSpecWithDefault() *InstallDatasourceFromAddonSpec {
	this := InstallDatasourceFromAddonSpec{}
	var addonName string = "addon-prometheus-server"
	this.AddonName = &addonName
	var addonNamespace string = "vela-system"
	this.AddonNamespace = &addonNamespace
	var grafana string = "default"
	this.Grafana = &grafana
	var portName string = "http"
	this.PortName = &portName
	var type_ string = "prometheus"
	this.Type = &type_
	return &this
}

// NewInstallDatasourceFromAddonSpec is short for NewInstallDatasourceFromAddonSpecWithDefault which instantiates a new InstallDatasourceFromAddonSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallDatasourceFromAddonSpec() *InstallDatasourceFromAddonSpec {
	return NewInstallDatasourceFromAddonSpecWithDefault()
}

// NewInstallDatasourceFromAddonSpecEmpty instantiates a new InstallDatasourceFromAddonSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewInstallDatasourceFromAddonSpecEmpty() *InstallDatasourceFromAddonSpec {
	this := InstallDatasourceFromAddonSpec{}
	return &this
}

// NewInstallDatasourceFromAddonSpecs converts a list InstallDatasourceFromAddonSpec pointers to objects.
// This is helpful when the SetInstallDatasourceFromAddonSpec requires a list of objects
func NewInstallDatasourceFromAddonSpecList(ps ...*InstallDatasourceFromAddonSpec) []InstallDatasourceFromAddonSpec {
	objs := []InstallDatasourceFromAddonSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this InstallDatasourceFromAddonSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *InstallDatasourceFromAddonWorkflowStep) Validate() error {
	if o.Properties.AddonName == nil {
		return errors.New("AddonName in InstallDatasourceFromAddonSpec must be set")
	}
	if o.Properties.AddonNamespace == nil {
		return errors.New("AddonNamespace in InstallDatasourceFromAddonSpec must be set")
	}
	if o.Properties.Grafana == nil {
		return errors.New("Grafana in InstallDatasourceFromAddonSpec must be set")
	}
	if o.Properties.PortName == nil {
		return errors.New("PortName in InstallDatasourceFromAddonSpec must be set")
	}
	if o.Properties.Type == nil {
		return errors.New("Type in InstallDatasourceFromAddonSpec must be set")
	}
	// validate all nested properties
	return nil
}

// GetAddonName returns the AddonName field value
func (o *InstallDatasourceFromAddonWorkflowStep) GetAddonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.AddonName
}

// GetAddonNameOk returns a tuple with the AddonName field value
// and a boolean to check if the value has been set.
func (o *InstallDatasourceFromAddonWorkflowStep) GetAddonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.AddonName, true
}

// SetAddonName sets field value
func (o *InstallDatasourceFromAddonWorkflowStep) SetAddonName(v string) *InstallDatasourceFromAddonWorkflowStep {
	o.Properties.AddonName = &v
	return o
}

// GetAddonNamespace returns the AddonNamespace field value
func (o *InstallDatasourceFromAddonWorkflowStep) GetAddonNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.AddonNamespace
}

// GetAddonNamespaceOk returns a tuple with the AddonNamespace field value
// and a boolean to check if the value has been set.
func (o *InstallDatasourceFromAddonWorkflowStep) GetAddonNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.AddonNamespace, true
}

// SetAddonNamespace sets field value
func (o *InstallDatasourceFromAddonWorkflowStep) SetAddonNamespace(v string) *InstallDatasourceFromAddonWorkflowStep {
	o.Properties.AddonNamespace = &v
	return o
}

// GetGrafana returns the Grafana field value
func (o *InstallDatasourceFromAddonWorkflowStep) GetGrafana() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Grafana
}

// GetGrafanaOk returns a tuple with the Grafana field value
// and a boolean to check if the value has been set.
func (o *InstallDatasourceFromAddonWorkflowStep) GetGrafanaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Grafana, true
}

// SetGrafana sets field value
func (o *InstallDatasourceFromAddonWorkflowStep) SetGrafana(v string) *InstallDatasourceFromAddonWorkflowStep {
	o.Properties.Grafana = &v
	return o
}

// GetPortName returns the PortName field value
func (o *InstallDatasourceFromAddonWorkflowStep) GetPortName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.PortName
}

// GetPortNameOk returns a tuple with the PortName field value
// and a boolean to check if the value has been set.
func (o *InstallDatasourceFromAddonWorkflowStep) GetPortNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.PortName, true
}

// SetPortName sets field value
func (o *InstallDatasourceFromAddonWorkflowStep) SetPortName(v string) *InstallDatasourceFromAddonWorkflowStep {
	o.Properties.PortName = &v
	return o
}

// GetType returns the Type field value
func (o *InstallDatasourceFromAddonWorkflowStep) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InstallDatasourceFromAddonWorkflowStep) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Type, true
}

// SetType sets field value
func (o *InstallDatasourceFromAddonWorkflowStep) SetType(v string) *InstallDatasourceFromAddonWorkflowStep {
	o.Properties.Type = &v
	return o
}

func (o InstallDatasourceFromAddonSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallDatasourceFromAddonSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addonName"] = o.AddonName
	toSerialize["addonNamespace"] = o.AddonNamespace
	toSerialize["grafana"] = o.Grafana
	toSerialize["portName"] = o.PortName
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableInstallDatasourceFromAddonSpec struct {
	value *InstallDatasourceFromAddonSpec
	isSet bool
}

func (v *NullableInstallDatasourceFromAddonSpec) Get() *InstallDatasourceFromAddonSpec {
	return v.value
}

func (v *NullableInstallDatasourceFromAddonSpec) Set(val *InstallDatasourceFromAddonSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableInstallDatasourceFromAddonSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallDatasourceFromAddonSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallDatasourceFromAddonSpec(val *InstallDatasourceFromAddonSpec) *NullableInstallDatasourceFromAddonSpec {
	return &NullableInstallDatasourceFromAddonSpec{value: val, isSet: true}
}

func (v NullableInstallDatasourceFromAddonSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallDatasourceFromAddonSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const InstallDatasourceFromAddonType = "install-datasource-from-addon"

func init() {
	sdkcommon.RegisterWorkflowStep(InstallDatasourceFromAddonType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(InstallDatasourceFromAddonType, FromWorkflowSubStep)
}

type InstallDatasourceFromAddonWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties InstallDatasourceFromAddonSpec
}

func InstallDatasourceFromAddon(name string) *InstallDatasourceFromAddonWorkflowStep {
	i := &InstallDatasourceFromAddonWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: InstallDatasourceFromAddonType,
	}}
	return i
}

func (i *InstallDatasourceFromAddonWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range i.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  i.Base.DependsOn,
		If:         i.Base.If,
		Inputs:     i.Base.Inputs,
		Meta:       i.Base.Meta,
		Name:       i.Base.Name,
		Outputs:    i.Base.Outputs,
		Properties: util.Object2RawExtension(i.Properties),
		SubSteps:   subSteps,
		Timeout:    i.Base.Timeout,
		Type:       InstallDatasourceFromAddonType,
	}
	return res
}

func (i *InstallDatasourceFromAddonWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*InstallDatasourceFromAddonWorkflowStep, error) {
	var properties InstallDatasourceFromAddonSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := i.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	i.Base.Name = from.Name
	i.Base.DependsOn = from.DependsOn
	i.Base.Inputs = from.Inputs
	i.Base.Outputs = from.Outputs
	i.Base.If = from.If
	i.Base.Timeout = from.Timeout
	i.Base.Meta = from.Meta
	i.Base.Type = InstallDatasourceFromAddonType
	i.Properties = properties
	i.Base.SubSteps = subSteps
	return i, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	i := &InstallDatasourceFromAddonWorkflowStep{}
	return i.FromWorkflowStep(from)
}

func (i *InstallDatasourceFromAddonWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*InstallDatasourceFromAddonWorkflowStep, error) {
	var properties InstallDatasourceFromAddonSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	i.Base.Name = from.Name
	i.Base.DependsOn = from.DependsOn
	i.Base.Inputs = from.Inputs
	i.Base.Outputs = from.Outputs
	i.Base.If = from.If
	i.Base.Timeout = from.Timeout
	i.Base.Meta = from.Meta
	i.Base.Type = InstallDatasourceFromAddonType
	i.Properties = properties
	return i, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	i := &InstallDatasourceFromAddonWorkflowStep{}
	return i.FromWorkflowSubStep(from)
}

func (i *InstallDatasourceFromAddonWorkflowStep) WorkflowStepName() string {
	return i.Base.Name
}

func (i *InstallDatasourceFromAddonWorkflowStep) DefType() string {
	return InstallDatasourceFromAddonType
}

func (i *InstallDatasourceFromAddonWorkflowStep) If(_if string) *InstallDatasourceFromAddonWorkflowStep {
	i.Base.If = _if
	return i
}

func (i *InstallDatasourceFromAddonWorkflowStep) Alias(alias string) *InstallDatasourceFromAddonWorkflowStep {
	i.Base.Meta.Alias = alias
	return i
}

func (i *InstallDatasourceFromAddonWorkflowStep) Timeout(timeout string) *InstallDatasourceFromAddonWorkflowStep {
	i.Base.Timeout = timeout
	return i
}

func (i *InstallDatasourceFromAddonWorkflowStep) DependsOn(dependsOn []string) *InstallDatasourceFromAddonWorkflowStep {
	i.Base.DependsOn = dependsOn
	return i
}

func (i *InstallDatasourceFromAddonWorkflowStep) Inputs(input common.StepInputs) *InstallDatasourceFromAddonWorkflowStep {
	i.Base.Inputs = input
	return i
}

func (i *InstallDatasourceFromAddonWorkflowStep) Outputs(output common.StepOutputs) *InstallDatasourceFromAddonWorkflowStep {
	i.Base.Outputs = output
	return i
}
