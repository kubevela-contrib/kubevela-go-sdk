/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package https_route

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Headers type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Headers{}

// Headers struct for Headers
type Headers struct {
	Name  *string `json:"name"`
	Type  *string `json:"type"`
	Value *string `json:"value"`
}

// NewHeadersWith instantiates a new Headers object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewHeadersWith(name string, type_ string, value string) *Headers {
	this := Headers{}
	this.Name = &name
	this.Type = &type_
	this.Value = &value
	return &this
}

// NewHeadersWithDefault instantiates a new Headers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadersWithDefault() *Headers {
	this := Headers{}
	return &this
}

// NewHeaders is short for NewHeadersWithDefault which instantiates a new Headers object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeaders() *Headers {
	return NewHeadersWithDefault()
}

// NewHeadersEmpty instantiates a new Headers object with no properties set.
// This constructor will not assign any default values to properties.
func NewHeadersEmpty() *Headers {
	this := Headers{}
	return &this
}

// NewHeaderss converts a list Headers pointers to objects.
// This is helpful when the SetHeaders requires a list of objects
func NewHeadersList(ps ...*Headers) []Headers {
	objs := []Headers{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Headers
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Headers) Validate() error {
	if o.Name == nil {
		return errors.New("Name in Headers must be set")
	}
	if o.Type == nil {
		return errors.New("Type in Headers must be set")
	}
	if o.Value == nil {
		return errors.New("Value in Headers must be set")
	}
	// validate all nested properties
	return nil
}

// GetName returns the Name field value
func (o *Headers) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Headers) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *Headers) SetName(v string) *Headers {
	o.Name = &v
	return o
}

// GetType returns the Type field value
func (o *Headers) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Headers) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Headers) SetType(v string) *Headers {
	o.Type = &v
	return o
}

// GetValue returns the Value field value
func (o *Headers) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Headers) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *Headers) SetValue(v string) *Headers {
	o.Value = &v
	return o
}

func (o Headers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Headers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableHeaders struct {
	value *Headers
	isSet bool
}

func (v *NullableHeaders) Get() *Headers {
	return v.value
}

func (v *NullableHeaders) Set(val *Headers) {
	v.value = val
	v.isSet = true
}

func (v *NullableHeaders) IsSet() bool {
	return v.isSet
}

func (v *NullableHeaders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeaders(val *Headers) *NullableHeaders {
	return &NullableHeaders{value: val, isSet: true}
}

func (v NullableHeaders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeaders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
