/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package https_route

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Secrets type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Secrets{}

// Secrets struct for Secrets
type Secrets struct {
	Name      *string `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

// NewSecretsWith instantiates a new Secrets object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewSecretsWith(name string) *Secrets {
	this := Secrets{}
	this.Name = &name
	return &this
}

// NewSecretsWithDefault instantiates a new Secrets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretsWithDefault() *Secrets {
	this := Secrets{}
	return &this
}

// NewSecrets is short for NewSecretsWithDefault which instantiates a new Secrets object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecrets() *Secrets {
	return NewSecretsWithDefault()
}

// NewSecretsEmpty instantiates a new Secrets object with no properties set.
// This constructor will not assign any default values to properties.
func NewSecretsEmpty() *Secrets {
	this := Secrets{}
	return &this
}

// NewSecretss converts a list Secrets pointers to objects.
// This is helpful when the SetSecrets requires a list of objects
func NewSecretsList(ps ...*Secrets) []Secrets {
	objs := []Secrets{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Secrets
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Secrets) Validate() error {
	if o.Name == nil {
		return errors.New("Name in Secrets must be set")
	}
	// validate all nested properties
	return nil
}

// GetName returns the Name field value
func (o *Secrets) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Secrets) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *Secrets) SetName(v string) *Secrets {
	o.Name = &v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Secrets) GetNamespace() string {
	if o == nil || utils.IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secrets) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Secrets) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// Namespace:
func (o *Secrets) SetNamespace(v string) *Secrets {
	o.Namespace = &v
	return o
}

func (o Secrets) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Secrets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !utils.IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullableSecrets struct {
	value *Secrets
	isSet bool
}

func (v *NullableSecrets) Get() *Secrets {
	return v.value
}

func (v *NullableSecrets) Set(val *Secrets) {
	v.value = val
	v.isSet = true
}

func (v *NullableSecrets) IsSet() bool {
	return v.isSet
}

func (v *NullableSecrets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecrets(val *Secrets) *NullableSecrets {
	return &NullableSecrets{value: val, isSet: true}
}

func (v NullableSecrets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecrets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
