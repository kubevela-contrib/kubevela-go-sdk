/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_app

import (
	"encoding/json"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the ApplyAppSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApplyAppSpec{}

// ApplyAppSpec struct for ApplyAppSpec
type ApplyAppSpec struct {
	Data map[string]interface{} `json:"data,omitempty"`
	Ref  *Ref                   `json:"ref,omitempty"`
}

// NewApplyAppSpecWith instantiates a new ApplyAppSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewApplyAppSpecWith() *ApplyAppSpec {
	this := ApplyAppSpec{}
	return &this
}

// NewApplyAppSpecWithDefault instantiates a new ApplyAppSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyAppSpecWithDefault() *ApplyAppSpec {
	this := ApplyAppSpec{}
	return &this
}

// NewApplyAppSpec is short for NewApplyAppSpecWithDefault which instantiates a new ApplyAppSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyAppSpec() *ApplyAppSpec {
	return NewApplyAppSpecWithDefault()
}

// NewApplyAppSpecEmpty instantiates a new ApplyAppSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewApplyAppSpecEmpty() *ApplyAppSpec {
	this := ApplyAppSpec{}
	return &this
}

// NewApplyAppSpecs converts a list ApplyAppSpec pointers to objects.
// This is helpful when the SetApplyAppSpec requires a list of objects
func NewApplyAppSpecList(ps ...*ApplyAppSpec) []ApplyAppSpec {
	objs := []ApplyAppSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this ApplyAppSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *ApplyAppWorkflowStep) Validate() error {
	// validate all nested properties
	if o.Properties.Ref != nil {
		if err := o.Properties.Ref.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ApplyAppWorkflowStep) GetData() map[string]interface{} {
	if o == nil || utils.IsNil(o.Properties.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyAppWorkflowStep) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Properties.Data) {
		return map[string]interface{}{}, false
	}
	return o.Properties.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ApplyAppWorkflowStep) HasData() bool {
	if o != nil && !utils.IsNil(o.Properties.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the data field.
// Data:
func (o *ApplyAppWorkflowStep) SetData(v map[string]interface{}) *ApplyAppWorkflowStep {
	o.Properties.Data = v
	return o
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ApplyAppWorkflowStep) GetRef() Ref {
	if o == nil || utils.IsNil(o.Properties.Ref) {
		var ret Ref
		return ret
	}
	return *o.Properties.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyAppWorkflowStep) GetRefOk() (*Ref, bool) {
	if o == nil || utils.IsNil(o.Properties.Ref) {
		return nil, false
	}
	return o.Properties.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ApplyAppWorkflowStep) HasRef() bool {
	if o != nil && !utils.IsNil(o.Properties.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given Ref and assigns it to the ref field.
// Ref:
func (o *ApplyAppWorkflowStep) SetRef(v Ref) *ApplyAppWorkflowStep {
	o.Properties.Ref = &v
	return o
}

func (o ApplyAppSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyAppSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !utils.IsNil(o.Ref) {
		toSerialize["ref"] = o.Ref
	}
	return toSerialize, nil
}

type NullableApplyAppSpec struct {
	value *ApplyAppSpec
	isSet bool
}

func (v *NullableApplyAppSpec) Get() *ApplyAppSpec {
	return v.value
}

func (v *NullableApplyAppSpec) Set(val *ApplyAppSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableApplyAppSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyAppSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyAppSpec(val *ApplyAppSpec) *NullableApplyAppSpec {
	return &NullableApplyAppSpec{value: val, isSet: true}
}

func (v NullableApplyAppSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyAppSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const ApplyAppType = "apply-app"

func init() {
	sdkcommon.RegisterWorkflowStep(ApplyAppType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(ApplyAppType, FromWorkflowSubStep)
}

type ApplyAppWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties ApplyAppSpec
}

func ApplyApp(name string) *ApplyAppWorkflowStep {
	a := &ApplyAppWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: ApplyAppType,
	}}
	return a
}

func (a *ApplyAppWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range a.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  a.Base.DependsOn,
		If:         a.Base.If,
		Inputs:     a.Base.Inputs,
		Meta:       a.Base.Meta,
		Name:       a.Base.Name,
		Outputs:    a.Base.Outputs,
		Properties: util.Object2RawExtension(a.Properties),
		SubSteps:   subSteps,
		Timeout:    a.Base.Timeout,
		Type:       ApplyAppType,
	}
	return res
}

func (a *ApplyAppWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*ApplyAppWorkflowStep, error) {
	var properties ApplyAppSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := a.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	a.Base.Name = from.Name
	a.Base.DependsOn = from.DependsOn
	a.Base.Inputs = from.Inputs
	a.Base.Outputs = from.Outputs
	a.Base.If = from.If
	a.Base.Timeout = from.Timeout
	a.Base.Meta = from.Meta
	a.Base.Type = ApplyAppType
	a.Properties = properties
	a.Base.SubSteps = subSteps
	return a, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	a := &ApplyAppWorkflowStep{}
	return a.FromWorkflowStep(from)
}

func (a *ApplyAppWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*ApplyAppWorkflowStep, error) {
	var properties ApplyAppSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	a.Base.Name = from.Name
	a.Base.DependsOn = from.DependsOn
	a.Base.Inputs = from.Inputs
	a.Base.Outputs = from.Outputs
	a.Base.If = from.If
	a.Base.Timeout = from.Timeout
	a.Base.Meta = from.Meta
	a.Base.Type = ApplyAppType
	a.Properties = properties
	return a, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	a := &ApplyAppWorkflowStep{}
	return a.FromWorkflowSubStep(from)
}

func (a *ApplyAppWorkflowStep) WorkflowStepName() string {
	return a.Base.Name
}

func (a *ApplyAppWorkflowStep) DefType() string {
	return ApplyAppType
}

func (a *ApplyAppWorkflowStep) If(_if string) *ApplyAppWorkflowStep {
	a.Base.If = _if
	return a
}

func (a *ApplyAppWorkflowStep) Alias(alias string) *ApplyAppWorkflowStep {
	a.Base.Meta.Alias = alias
	return a
}

func (a *ApplyAppWorkflowStep) Timeout(timeout string) *ApplyAppWorkflowStep {
	a.Base.Timeout = timeout
	return a
}

func (a *ApplyAppWorkflowStep) DependsOn(dependsOn []string) *ApplyAppWorkflowStep {
	a.Base.DependsOn = dependsOn
	return a
}

func (a *ApplyAppWorkflowStep) Inputs(input common.StepInputs) *ApplyAppWorkflowStep {
	a.Base.Inputs = input
	return a
}

func (a *ApplyAppWorkflowStep) Outputs(output common.StepOutputs) *ApplyAppWorkflowStep {
	a.Base.Outputs = output
	return a
}
