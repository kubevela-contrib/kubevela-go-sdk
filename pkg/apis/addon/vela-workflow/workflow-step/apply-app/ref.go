/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apply_app

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Ref type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Ref{}

// Ref struct for Ref
type Ref struct {
	Key       *string `json:"key"`
	Name      *string `json:"name"`
	Namespace *string `json:"namespace"`
	Type      *string `json:"type"`
}

// NewRefWith instantiates a new Ref object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewRefWith(key string, name string, namespace string, type_ string) *Ref {
	this := Ref{}
	this.Key = &key
	this.Name = &name
	this.Namespace = &namespace
	this.Type = &type_
	return &this
}

// NewRefWithDefault instantiates a new Ref object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefWithDefault() *Ref {
	this := Ref{}
	var key string = "application"
	this.Key = &key
	var type_ string = "configMap"
	this.Type = &type_
	return &this
}

// NewRef is short for NewRefWithDefault which instantiates a new Ref object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRef() *Ref {
	return NewRefWithDefault()
}

// NewRefEmpty instantiates a new Ref object with no properties set.
// This constructor will not assign any default values to properties.
func NewRefEmpty() *Ref {
	this := Ref{}
	return &this
}

// NewRefs converts a list Ref pointers to objects.
// This is helpful when the SetRef requires a list of objects
func NewRefList(ps ...*Ref) []Ref {
	objs := []Ref{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Ref
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Ref) Validate() error {
	if o.Key == nil {
		return errors.New("Key in Ref must be set")
	}
	if o.Name == nil {
		return errors.New("Name in Ref must be set")
	}
	if o.Namespace == nil {
		return errors.New("Namespace in Ref must be set")
	}
	if o.Type == nil {
		return errors.New("Type in Ref must be set")
	}
	// validate all nested properties
	return nil
}

// GetKey returns the Key field value
func (o *Ref) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *Ref) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key, true
}

// SetKey sets field value
func (o *Ref) SetKey(v string) *Ref {
	o.Key = &v
	return o
}

// GetName returns the Name field value
func (o *Ref) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Ref) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *Ref) SetName(v string) *Ref {
	o.Name = &v
	return o
}

// GetNamespace returns the Namespace field value
func (o *Ref) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *Ref) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace, true
}

// SetNamespace sets field value
func (o *Ref) SetNamespace(v string) *Ref {
	o.Namespace = &v
	return o
}

// GetType returns the Type field value
func (o *Ref) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Ref) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Ref) SetType(v string) *Ref {
	o.Type = &v
	return o
}

func (o Ref) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ref) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	toSerialize["namespace"] = o.Namespace
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableRef struct {
	value *Ref
	isSet bool
}

func (v *NullableRef) Get() *Ref {
	return v.value
}

func (v *NullableRef) Set(val *Ref) {
	v.value = val
	v.isSet = true
}

func (v *NullableRef) IsSet() bool {
	return v.isSet
}

func (v *NullableRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRef(val *Ref) *NullableRef {
	return &NullableRef{value: val, isSet: true}
}

func (v NullableRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
