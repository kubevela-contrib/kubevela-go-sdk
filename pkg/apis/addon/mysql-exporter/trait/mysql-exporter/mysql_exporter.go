/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mysql_exporter

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the MysqlExporterSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MysqlExporterSpec{}

// MysqlExporterSpec struct for MysqlExporterSpec
type MysqlExporterSpec struct {
	// Specify the CPU capacity of the Exporter collector.
	Cpu *string `json:"cpu,omitempty"`
	// Disable annotation means do not add the annotations for the exporter pod, and the Prometheus can not scrape it.
	DisableAnnotation *bool `json:"disableAnnotation"`
	// Specify the Memory capacity of the Exporter collector.
	Memory *string `json:"memory,omitempty"`
	// Specify the host of the target Mysql server, maybe you could set the mysql component name.
	MysqlHost *string `json:"mysqlHost"`
	// Specify the port of the target Mysql server.
	MysqlPort *int32 `json:"mysqlPort"`
	// Specify the name of the Exporter.
	Name *string `json:"name"`
	// Specify the password of the target Mysql server.
	Password *string `json:"password"`
	// Specify the username of the target Mysql server.
	Username *string `json:"username"`
	// Specify the version of the Exporter collector.
	Version *string `json:"version"`
}

// NewMysqlExporterSpecWith instantiates a new MysqlExporterSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewMysqlExporterSpecWith(disableAnnotation bool, mysqlHost string, mysqlPort int32, name string, password string, username string, version string) *MysqlExporterSpec {
	this := MysqlExporterSpec{}
	this.DisableAnnotation = &disableAnnotation
	this.MysqlHost = &mysqlHost
	this.MysqlPort = &mysqlPort
	this.Name = &name
	this.Password = &password
	this.Username = &username
	this.Version = &version
	return &this
}

// NewMysqlExporterSpecWithDefault instantiates a new MysqlExporterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlExporterSpecWithDefault() *MysqlExporterSpec {
	this := MysqlExporterSpec{}
	var disableAnnotation bool = false
	this.DisableAnnotation = &disableAnnotation
	var mysqlHost string = "mysql-server"
	this.MysqlHost = &mysqlHost
	var mysqlPort int32 = 3306
	this.MysqlPort = &mysqlPort
	var name string = "mysql-server-exporter"
	this.Name = &name
	var version string = "v0.14.0"
	this.Version = &version
	return &this
}

// NewMysqlExporterSpec is short for NewMysqlExporterSpecWithDefault which instantiates a new MysqlExporterSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlExporterSpec() *MysqlExporterSpec {
	return NewMysqlExporterSpecWithDefault()
}

// NewMysqlExporterSpecEmpty instantiates a new MysqlExporterSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewMysqlExporterSpecEmpty() *MysqlExporterSpec {
	this := MysqlExporterSpec{}
	return &this
}

// NewMysqlExporterSpecs converts a list MysqlExporterSpec pointers to objects.
// This is helpful when the SetMysqlExporterSpec requires a list of objects
func NewMysqlExporterSpecList(ps ...*MysqlExporterSpec) []MysqlExporterSpec {
	objs := []MysqlExporterSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this MysqlExporterSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *MysqlExporterTrait) Validate() error {
	if o.Properties.DisableAnnotation == nil {
		return errors.New("DisableAnnotation in MysqlExporterSpec must be set")
	}
	if o.Properties.MysqlHost == nil {
		return errors.New("MysqlHost in MysqlExporterSpec must be set")
	}
	if o.Properties.MysqlPort == nil {
		return errors.New("MysqlPort in MysqlExporterSpec must be set")
	}
	if o.Properties.Name == nil {
		return errors.New("Name in MysqlExporterSpec must be set")
	}
	if o.Properties.Password == nil {
		return errors.New("Password in MysqlExporterSpec must be set")
	}
	if o.Properties.Username == nil {
		return errors.New("Username in MysqlExporterSpec must be set")
	}
	if o.Properties.Version == nil {
		return errors.New("Version in MysqlExporterSpec must be set")
	}
	// validate all nested properties
	return nil
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *MysqlExporterTrait) GetCpu() string {
	if o == nil || utils.IsNil(o.Properties.Cpu) {
		var ret string
		return ret
	}
	return *o.Properties.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterTrait) GetCpuOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Cpu) {
		return nil, false
	}
	return o.Properties.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *MysqlExporterTrait) HasCpu() bool {
	if o != nil && !utils.IsNil(o.Properties.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given string and assigns it to the cpu field.
// Cpu:  Specify the CPU capacity of the Exporter collector.
func (o *MysqlExporterTrait) SetCpu(v string) *MysqlExporterTrait {
	o.Properties.Cpu = &v
	return o
}

// GetDisableAnnotation returns the DisableAnnotation field value
func (o *MysqlExporterTrait) GetDisableAnnotation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Properties.DisableAnnotation
}

// GetDisableAnnotationOk returns a tuple with the DisableAnnotation field value
// and a boolean to check if the value has been set.
func (o *MysqlExporterTrait) GetDisableAnnotationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.DisableAnnotation, true
}

// SetDisableAnnotation sets field value
func (o *MysqlExporterTrait) SetDisableAnnotation(v bool) *MysqlExporterTrait {
	o.Properties.DisableAnnotation = &v
	return o
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *MysqlExporterTrait) GetMemory() string {
	if o == nil || utils.IsNil(o.Properties.Memory) {
		var ret string
		return ret
	}
	return *o.Properties.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MysqlExporterTrait) GetMemoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Memory) {
		return nil, false
	}
	return o.Properties.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *MysqlExporterTrait) HasMemory() bool {
	if o != nil && !utils.IsNil(o.Properties.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given string and assigns it to the memory field.
// Memory:  Specify the Memory capacity of the Exporter collector.
func (o *MysqlExporterTrait) SetMemory(v string) *MysqlExporterTrait {
	o.Properties.Memory = &v
	return o
}

// GetMysqlHost returns the MysqlHost field value
func (o *MysqlExporterTrait) GetMysqlHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.MysqlHost
}

// GetMysqlHostOk returns a tuple with the MysqlHost field value
// and a boolean to check if the value has been set.
func (o *MysqlExporterTrait) GetMysqlHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.MysqlHost, true
}

// SetMysqlHost sets field value
func (o *MysqlExporterTrait) SetMysqlHost(v string) *MysqlExporterTrait {
	o.Properties.MysqlHost = &v
	return o
}

// GetMysqlPort returns the MysqlPort field value
func (o *MysqlExporterTrait) GetMysqlPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return *o.Properties.MysqlPort
}

// GetMysqlPortOk returns a tuple with the MysqlPort field value
// and a boolean to check if the value has been set.
func (o *MysqlExporterTrait) GetMysqlPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.MysqlPort, true
}

// SetMysqlPort sets field value
func (o *MysqlExporterTrait) SetMysqlPort(v int32) *MysqlExporterTrait {
	o.Properties.MysqlPort = &v
	return o
}

// GetName returns the Name field value
func (o *MysqlExporterTrait) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MysqlExporterTrait) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Name, true
}

// SetName sets field value
func (o *MysqlExporterTrait) SetName(v string) *MysqlExporterTrait {
	o.Properties.Name = &v
	return o
}

// GetPassword returns the Password field value
func (o *MysqlExporterTrait) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *MysqlExporterTrait) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Password, true
}

// SetPassword sets field value
func (o *MysqlExporterTrait) SetPassword(v string) *MysqlExporterTrait {
	o.Properties.Password = &v
	return o
}

// GetUsername returns the Username field value
func (o *MysqlExporterTrait) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *MysqlExporterTrait) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Username, true
}

// SetUsername sets field value
func (o *MysqlExporterTrait) SetUsername(v string) *MysqlExporterTrait {
	o.Properties.Username = &v
	return o
}

// GetVersion returns the Version field value
func (o *MysqlExporterTrait) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *MysqlExporterTrait) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Version, true
}

// SetVersion sets field value
func (o *MysqlExporterTrait) SetVersion(v string) *MysqlExporterTrait {
	o.Properties.Version = &v
	return o
}

func (o MysqlExporterSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MysqlExporterSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	toSerialize["disableAnnotation"] = o.DisableAnnotation
	if !utils.IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	toSerialize["mysqlHost"] = o.MysqlHost
	toSerialize["mysqlPort"] = o.MysqlPort
	toSerialize["name"] = o.Name
	toSerialize["password"] = o.Password
	toSerialize["username"] = o.Username
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableMysqlExporterSpec struct {
	value *MysqlExporterSpec
	isSet bool
}

func (v *NullableMysqlExporterSpec) Get() *MysqlExporterSpec {
	return v.value
}

func (v *NullableMysqlExporterSpec) Set(val *MysqlExporterSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableMysqlExporterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableMysqlExporterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMysqlExporterSpec(val *MysqlExporterSpec) *NullableMysqlExporterSpec {
	return &NullableMysqlExporterSpec{value: val, isSet: true}
}

func (v NullableMysqlExporterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMysqlExporterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const MysqlExporterType = "mysql-exporter"

func init() {
	sdkcommon.RegisterTrait(MysqlExporterType, FromTrait)
}

type MysqlExporterTrait struct {
	Base       apis.TraitBase
	Properties MysqlExporterSpec
}

func MysqlExporter() *MysqlExporterTrait {
	m := &MysqlExporterTrait{Base: apis.TraitBase{}}
	return m
}

func (m *MysqlExporterTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(m.Properties),
		Type:       MysqlExporterType,
	}
	return res
}

func (m *MysqlExporterTrait) FromTrait(from common.ApplicationTrait) (*MysqlExporterTrait, error) {
	var properties MysqlExporterSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	m.Base.Type = MysqlExporterType
	m.Properties = properties
	return m, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	m := &MysqlExporterTrait{}
	return m.FromTrait(from)
}

func (m *MysqlExporterTrait) DefType() string {
	return MysqlExporterType
}
