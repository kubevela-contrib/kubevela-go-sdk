/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kustomize

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the KustomizeSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &KustomizeSpec{}

// KustomizeSpec struct for KustomizeSpec
type KustomizeSpec struct {
	// Force instructs the controller to recreate resources when patching fails due to an immutable field change.
	Force           *bool            `json:"force"`
	Git             *Git             `json:"git,omitempty"`
	ImageRepository *ImageRepository `json:"imageRepository,omitempty"`
	Oci             *Oci             `json:"oci,omitempty"`
	Oss             *Oss             `json:"oss,omitempty"`
	// Path to the directory containing the kustomization.yaml file, or the set of plain YAMLs a kustomization.yaml should be generated for.
	Path *string `json:"path"`
	// Whether to delete objects that have already been applyed
	Prune *bool `json:"prune"`
	// The interval at which to check for repository/bucket and release updates, default to 5m
	PullInterval *string `json:"pullInterval"`
	RepoType     *string `json:"repoType"`
	// The name of the secret containing authentication credentials
	SecretRef *string `json:"secretRef,omitempty"`
	// The name of the source already existed
	SourceName *string `json:"sourceName,omitempty"`
	// This flag tells the controller to suspend subsequent kustomize executions, it does not apply to already started executions. Defaults to false.
	Suspend *bool `json:"suspend"`
	// TargetNamespace sets or overrides the namespace in the kustomization.yaml file, optional
	TargetNamespace *string `json:"targetNamespace,omitempty"`
	// The timeout for operations like download index/clone repository, optional
	Timeout *string `json:"timeout,omitempty"`
	// The Git or Helm repository URL, OSS endpoint or OCI repo, accept HTTP/S or SSH address as git url
	Url *string `json:"url"`
}

// NewKustomizeSpecWith instantiates a new KustomizeSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewKustomizeSpecWith(force bool, path string, prune bool, pullInterval string, repoType string, suspend bool, url string) *KustomizeSpec {
	this := KustomizeSpec{}
	this.Force = &force
	this.Path = &path
	this.Prune = &prune
	this.PullInterval = &pullInterval
	this.RepoType = &repoType
	this.Suspend = &suspend
	this.Url = &url
	return &this
}

// NewKustomizeSpecWithDefault instantiates a new KustomizeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKustomizeSpecWithDefault() *KustomizeSpec {
	this := KustomizeSpec{}
	var force bool = false
	this.Force = &force
	var prune bool = true
	this.Prune = &prune
	var pullInterval string = "5m"
	this.PullInterval = &pullInterval
	var repoType string = "git"
	this.RepoType = &repoType
	var suspend bool = false
	this.Suspend = &suspend
	return &this
}

// NewKustomizeSpec is short for NewKustomizeSpecWithDefault which instantiates a new KustomizeSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKustomizeSpec() *KustomizeSpec {
	return NewKustomizeSpecWithDefault()
}

// NewKustomizeSpecEmpty instantiates a new KustomizeSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewKustomizeSpecEmpty() *KustomizeSpec {
	this := KustomizeSpec{}
	return &this
}

// NewKustomizeSpecs converts a list KustomizeSpec pointers to objects.
// This is helpful when the SetKustomizeSpec requires a list of objects
func NewKustomizeSpecList(ps ...*KustomizeSpec) []KustomizeSpec {
	objs := []KustomizeSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this KustomizeSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *KustomizeComponent) Validate() error {
	if o.Properties.Force == nil {
		return errors.New("Force in KustomizeSpec must be set")
	}
	if o.Properties.Path == nil {
		return errors.New("Path in KustomizeSpec must be set")
	}
	if o.Properties.Prune == nil {
		return errors.New("Prune in KustomizeSpec must be set")
	}
	if o.Properties.PullInterval == nil {
		return errors.New("PullInterval in KustomizeSpec must be set")
	}
	if o.Properties.RepoType == nil {
		return errors.New("RepoType in KustomizeSpec must be set")
	}
	if o.Properties.Suspend == nil {
		return errors.New("Suspend in KustomizeSpec must be set")
	}
	if o.Properties.Url == nil {
		return errors.New("Url in KustomizeSpec must be set")
	}
	// validate all nested properties
	if o.Properties.Git != nil {
		if err := o.Properties.Git.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.ImageRepository != nil {
		if err := o.Properties.ImageRepository.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.Oci != nil {
		if err := o.Properties.Oci.Validate(); err != nil {
			return err
		}
	}
	if o.Properties.Oss != nil {
		if err := o.Properties.Oss.Validate(); err != nil {
			return err
		}
	}

	for i, v := range o.Base.Traits {
		if err := v.Validate(); err != nil {
			return fmt.Errorf("traits[%d] %s in %s component is invalid: %w", i, v.DefType(), KustomizeType, err)
		}
	}
	return nil
}

// GetForce returns the Force field value
func (o *KustomizeComponent) GetForce() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Properties.Force
}

// GetForceOk returns a tuple with the Force field value
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetForceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Force, true
}

// SetForce sets field value
func (o *KustomizeComponent) SetForce(v bool) *KustomizeComponent {
	o.Properties.Force = &v
	return o
}

// GetGit returns the Git field value if set, zero value otherwise.
func (o *KustomizeComponent) GetGit() Git {
	if o == nil || utils.IsNil(o.Properties.Git) {
		var ret Git
		return ret
	}
	return *o.Properties.Git
}

// GetGitOk returns a tuple with the Git field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetGitOk() (*Git, bool) {
	if o == nil || utils.IsNil(o.Properties.Git) {
		return nil, false
	}
	return o.Properties.Git, true
}

// HasGit returns a boolean if a field has been set.
func (o *KustomizeComponent) HasGit() bool {
	if o != nil && !utils.IsNil(o.Properties.Git) {
		return true
	}

	return false
}

// SetGit gets a reference to the given Git and assigns it to the git field.
// Git:
func (o *KustomizeComponent) SetGit(v Git) *KustomizeComponent {
	o.Properties.Git = &v
	return o
}

// GetImageRepository returns the ImageRepository field value if set, zero value otherwise.
func (o *KustomizeComponent) GetImageRepository() ImageRepository {
	if o == nil || utils.IsNil(o.Properties.ImageRepository) {
		var ret ImageRepository
		return ret
	}
	return *o.Properties.ImageRepository
}

// GetImageRepositoryOk returns a tuple with the ImageRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetImageRepositoryOk() (*ImageRepository, bool) {
	if o == nil || utils.IsNil(o.Properties.ImageRepository) {
		return nil, false
	}
	return o.Properties.ImageRepository, true
}

// HasImageRepository returns a boolean if a field has been set.
func (o *KustomizeComponent) HasImageRepository() bool {
	if o != nil && !utils.IsNil(o.Properties.ImageRepository) {
		return true
	}

	return false
}

// SetImageRepository gets a reference to the given ImageRepository and assigns it to the imageRepository field.
// ImageRepository:
func (o *KustomizeComponent) SetImageRepository(v ImageRepository) *KustomizeComponent {
	o.Properties.ImageRepository = &v
	return o
}

// GetOci returns the Oci field value if set, zero value otherwise.
func (o *KustomizeComponent) GetOci() Oci {
	if o == nil || utils.IsNil(o.Properties.Oci) {
		var ret Oci
		return ret
	}
	return *o.Properties.Oci
}

// GetOciOk returns a tuple with the Oci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetOciOk() (*Oci, bool) {
	if o == nil || utils.IsNil(o.Properties.Oci) {
		return nil, false
	}
	return o.Properties.Oci, true
}

// HasOci returns a boolean if a field has been set.
func (o *KustomizeComponent) HasOci() bool {
	if o != nil && !utils.IsNil(o.Properties.Oci) {
		return true
	}

	return false
}

// SetOci gets a reference to the given Oci and assigns it to the oci field.
// Oci:
func (o *KustomizeComponent) SetOci(v Oci) *KustomizeComponent {
	o.Properties.Oci = &v
	return o
}

// GetOss returns the Oss field value if set, zero value otherwise.
func (o *KustomizeComponent) GetOss() Oss {
	if o == nil || utils.IsNil(o.Properties.Oss) {
		var ret Oss
		return ret
	}
	return *o.Properties.Oss
}

// GetOssOk returns a tuple with the Oss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetOssOk() (*Oss, bool) {
	if o == nil || utils.IsNil(o.Properties.Oss) {
		return nil, false
	}
	return o.Properties.Oss, true
}

// HasOss returns a boolean if a field has been set.
func (o *KustomizeComponent) HasOss() bool {
	if o != nil && !utils.IsNil(o.Properties.Oss) {
		return true
	}

	return false
}

// SetOss gets a reference to the given Oss and assigns it to the oss field.
// Oss:
func (o *KustomizeComponent) SetOss(v Oss) *KustomizeComponent {
	o.Properties.Oss = &v
	return o
}

// GetPath returns the Path field value
func (o *KustomizeComponent) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Path, true
}

// SetPath sets field value
func (o *KustomizeComponent) SetPath(v string) *KustomizeComponent {
	o.Properties.Path = &v
	return o
}

// GetPrune returns the Prune field value
func (o *KustomizeComponent) GetPrune() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Properties.Prune
}

// GetPruneOk returns a tuple with the Prune field value
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetPruneOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Prune, true
}

// SetPrune sets field value
func (o *KustomizeComponent) SetPrune(v bool) *KustomizeComponent {
	o.Properties.Prune = &v
	return o
}

// GetPullInterval returns the PullInterval field value
func (o *KustomizeComponent) GetPullInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.PullInterval
}

// GetPullIntervalOk returns a tuple with the PullInterval field value
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetPullIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.PullInterval, true
}

// SetPullInterval sets field value
func (o *KustomizeComponent) SetPullInterval(v string) *KustomizeComponent {
	o.Properties.PullInterval = &v
	return o
}

// GetRepoType returns the RepoType field value
func (o *KustomizeComponent) GetRepoType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.RepoType
}

// GetRepoTypeOk returns a tuple with the RepoType field value
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetRepoTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.RepoType, true
}

// SetRepoType sets field value
func (o *KustomizeComponent) SetRepoType(v string) *KustomizeComponent {
	o.Properties.RepoType = &v
	return o
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *KustomizeComponent) GetSecretRef() string {
	if o == nil || utils.IsNil(o.Properties.SecretRef) {
		var ret string
		return ret
	}
	return *o.Properties.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetSecretRefOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.SecretRef) {
		return nil, false
	}
	return o.Properties.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *KustomizeComponent) HasSecretRef() bool {
	if o != nil && !utils.IsNil(o.Properties.SecretRef) {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given string and assigns it to the secretRef field.
// SecretRef:  The name of the secret containing authentication credentials
func (o *KustomizeComponent) SetSecretRef(v string) *KustomizeComponent {
	o.Properties.SecretRef = &v
	return o
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *KustomizeComponent) GetSourceName() string {
	if o == nil || utils.IsNil(o.Properties.SourceName) {
		var ret string
		return ret
	}
	return *o.Properties.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetSourceNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.SourceName) {
		return nil, false
	}
	return o.Properties.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *KustomizeComponent) HasSourceName() bool {
	if o != nil && !utils.IsNil(o.Properties.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the sourceName field.
// SourceName:  The name of the source already existed
func (o *KustomizeComponent) SetSourceName(v string) *KustomizeComponent {
	o.Properties.SourceName = &v
	return o
}

// GetSuspend returns the Suspend field value
func (o *KustomizeComponent) GetSuspend() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Properties.Suspend
}

// GetSuspendOk returns a tuple with the Suspend field value
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetSuspendOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Suspend, true
}

// SetSuspend sets field value
func (o *KustomizeComponent) SetSuspend(v bool) *KustomizeComponent {
	o.Properties.Suspend = &v
	return o
}

// GetTargetNamespace returns the TargetNamespace field value if set, zero value otherwise.
func (o *KustomizeComponent) GetTargetNamespace() string {
	if o == nil || utils.IsNil(o.Properties.TargetNamespace) {
		var ret string
		return ret
	}
	return *o.Properties.TargetNamespace
}

// GetTargetNamespaceOk returns a tuple with the TargetNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetTargetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.TargetNamespace) {
		return nil, false
	}
	return o.Properties.TargetNamespace, true
}

// HasTargetNamespace returns a boolean if a field has been set.
func (o *KustomizeComponent) HasTargetNamespace() bool {
	if o != nil && !utils.IsNil(o.Properties.TargetNamespace) {
		return true
	}

	return false
}

// SetTargetNamespace gets a reference to the given string and assigns it to the targetNamespace field.
// TargetNamespace:  TargetNamespace sets or overrides the namespace in the kustomization.yaml file, optional
func (o *KustomizeComponent) SetTargetNamespace(v string) *KustomizeComponent {
	o.Properties.TargetNamespace = &v
	return o
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *KustomizeComponent) GetTimeout() string {
	if o == nil || utils.IsNil(o.Properties.Timeout) {
		var ret string
		return ret
	}
	return *o.Properties.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetTimeoutOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Timeout) {
		return nil, false
	}
	return o.Properties.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *KustomizeComponent) HasTimeout() bool {
	if o != nil && !utils.IsNil(o.Properties.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given string and assigns it to the timeout field.
// Timeout:  The timeout for operations like download index/clone repository, optional
func (o *KustomizeComponent) SetTimeout(v string) *KustomizeComponent {
	o.Properties.Timeout = &v
	return o
}

// GetUrl returns the Url field value
func (o *KustomizeComponent) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *KustomizeComponent) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Url, true
}

// SetUrl sets field value
func (o *KustomizeComponent) SetUrl(v string) *KustomizeComponent {
	o.Properties.Url = &v
	return o
}

func (o KustomizeSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KustomizeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["force"] = o.Force
	if !utils.IsNil(o.Git) {
		toSerialize["git"] = o.Git
	}
	if !utils.IsNil(o.ImageRepository) {
		toSerialize["imageRepository"] = o.ImageRepository
	}
	if !utils.IsNil(o.Oci) {
		toSerialize["oci"] = o.Oci
	}
	if !utils.IsNil(o.Oss) {
		toSerialize["oss"] = o.Oss
	}
	toSerialize["path"] = o.Path
	toSerialize["prune"] = o.Prune
	toSerialize["pullInterval"] = o.PullInterval
	toSerialize["repoType"] = o.RepoType
	if !utils.IsNil(o.SecretRef) {
		toSerialize["secretRef"] = o.SecretRef
	}
	if !utils.IsNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}
	toSerialize["suspend"] = o.Suspend
	if !utils.IsNil(o.TargetNamespace) {
		toSerialize["targetNamespace"] = o.TargetNamespace
	}
	if !utils.IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableKustomizeSpec struct {
	value *KustomizeSpec
	isSet bool
}

func (v *NullableKustomizeSpec) Get() *KustomizeSpec {
	return v.value
}

func (v *NullableKustomizeSpec) Set(val *KustomizeSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableKustomizeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableKustomizeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKustomizeSpec(val *KustomizeSpec) *NullableKustomizeSpec {
	return &NullableKustomizeSpec{value: val, isSet: true}
}

func (v NullableKustomizeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKustomizeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const KustomizeType = "kustomize"

func init() {
	sdkcommon.RegisterComponent(KustomizeType, FromComponent)
}

type KustomizeComponent struct {
	Base       apis.ComponentBase
	Properties KustomizeSpec
}

func Kustomize(name string) *KustomizeComponent {
	k := &KustomizeComponent{Base: apis.ComponentBase{
		Name: name,
		Type: KustomizeType,
	}}
	return k
}

func (k *KustomizeComponent) Build() common.ApplicationComponent {
	traits := make([]common.ApplicationTrait, 0)
	for _, trait := range k.Base.Traits {
		traits = append(traits, trait.Build())
	}
	res := common.ApplicationComponent{
		DependsOn:  k.Base.DependsOn,
		Inputs:     k.Base.Inputs,
		Name:       k.Base.Name,
		Outputs:    k.Base.Outputs,
		Properties: util.Object2RawExtension(k.Properties),
		Traits:     traits,
		Type:       KustomizeType,
	}
	return res
}

func (k *KustomizeComponent) FromComponent(from common.ApplicationComponent) (*KustomizeComponent, error) {
	for _, trait := range from.Traits {
		_t, err := sdkcommon.FromTrait(&trait)
		if err != nil {
			return nil, err
		}
		k.Base.Traits = append(k.Base.Traits, _t)
	}
	var properties KustomizeSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	k.Base.Name = from.Name
	k.Base.DependsOn = from.DependsOn
	k.Base.Inputs = from.Inputs
	k.Base.Outputs = from.Outputs
	k.Base.Type = KustomizeType
	k.Properties = properties
	return k, nil
}

func FromComponent(from common.ApplicationComponent) (apis.Component, error) {
	k := &KustomizeComponent{}
	return k.FromComponent(from)
}

func (k *KustomizeComponent) SetTraits(traits ...apis.Trait) *KustomizeComponent {
	for _, addTrait := range traits {
		found := false
		for i, _t := range k.Base.Traits {
			if _t.DefType() == addTrait.DefType() {
				k.Base.Traits[i] = addTrait
				found = true
				break
			}
			if !found {
				k.Base.Traits = append(k.Base.Traits, addTrait)
			}
		}
	}
	return k
}

func (k *KustomizeComponent) GetTrait(typ string) apis.Trait {
	for _, _t := range k.Base.Traits {
		if _t.DefType() == typ {
			return _t
		}
	}
	return nil
}

func (k *KustomizeComponent) GetAllTraits() []apis.Trait {
	return k.Base.Traits
}

func (k *KustomizeComponent) ComponentName() string {
	return k.Base.Name
}

func (k *KustomizeComponent) DefType() string {
	return KustomizeType
}

func (k *KustomizeComponent) DependsOn(dependsOn []string) *KustomizeComponent {
	k.Base.DependsOn = dependsOn
	return k
}

func (k *KustomizeComponent) Inputs(input common.StepInputs) *KustomizeComponent {
	k.Base.Inputs = input
	return k
}

func (k *KustomizeComponent) Outputs(output common.StepOutputs) *KustomizeComponent {
	k.Base.Outputs = output
	return k
}

func (k *KustomizeComponent) AddDependsOn(dependsOn string) *KustomizeComponent {
	k.Base.DependsOn = append(k.Base.DependsOn, dependsOn)
	return k
}
