/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kustomize

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the ImageRepository type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ImageRepository{}

// ImageRepository The image repository for automatically update image to git
type ImageRepository struct {
	// The image url
	CommitMessage *string     `json:"commitMessage,omitempty"`
	FilterTags    *FilterTags `json:"filterTags,omitempty"`
	// The image url
	Image    *string `json:"image"`
	Interval *string `json:"interval"`
	Policy   *Policy `json:"policy"`
	// The name of the secret containing authentication credentials
	SecretRef *string `json:"secretRef,omitempty"`
}

// NewImageRepositoryWith instantiates a new ImageRepository object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewImageRepositoryWith(image string, interval string, policy Policy) *ImageRepository {
	this := ImageRepository{}
	this.Image = &image
	this.Interval = &interval
	this.Policy = &policy
	return &this
}

// NewImageRepositoryWithDefault instantiates a new ImageRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageRepositoryWithDefault() *ImageRepository {
	this := ImageRepository{}
	var interval string = "5m"
	this.Interval = &interval
	return &this
}

// NewImageRepository is short for NewImageRepositoryWithDefault which instantiates a new ImageRepository object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageRepository() *ImageRepository {
	return NewImageRepositoryWithDefault()
}

// NewImageRepositoryEmpty instantiates a new ImageRepository object with no properties set.
// This constructor will not assign any default values to properties.
func NewImageRepositoryEmpty() *ImageRepository {
	this := ImageRepository{}
	return &this
}

// NewImageRepositorys converts a list ImageRepository pointers to objects.
// This is helpful when the SetImageRepository requires a list of objects
func NewImageRepositoryList(ps ...*ImageRepository) []ImageRepository {
	objs := []ImageRepository{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this ImageRepository
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *ImageRepository) Validate() error {
	if o.Image == nil {
		return errors.New("Image in ImageRepository must be set")
	}
	if o.Interval == nil {
		return errors.New("Interval in ImageRepository must be set")
	}
	if o.Policy == nil {
		return errors.New("Policy in ImageRepository must be set")
	}
	// validate all nested properties
	if o.FilterTags != nil {
		if err := o.FilterTags.Validate(); err != nil {
			return err
		}
	}
	if o.Policy != nil {
		if err := o.Policy.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetCommitMessage returns the CommitMessage field value if set, zero value otherwise.
func (o *ImageRepository) GetCommitMessage() string {
	if o == nil || utils.IsNil(o.CommitMessage) {
		var ret string
		return ret
	}
	return *o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageRepository) GetCommitMessageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CommitMessage) {
		return nil, false
	}
	return o.CommitMessage, true
}

// HasCommitMessage returns a boolean if a field has been set.
func (o *ImageRepository) HasCommitMessage() bool {
	if o != nil && !utils.IsNil(o.CommitMessage) {
		return true
	}

	return false
}

// SetCommitMessage gets a reference to the given string and assigns it to the commitMessage field.
// CommitMessage:  The image url
func (o *ImageRepository) SetCommitMessage(v string) *ImageRepository {
	o.CommitMessage = &v
	return o
}

// GetFilterTags returns the FilterTags field value if set, zero value otherwise.
func (o *ImageRepository) GetFilterTags() FilterTags {
	if o == nil || utils.IsNil(o.FilterTags) {
		var ret FilterTags
		return ret
	}
	return *o.FilterTags
}

// GetFilterTagsOk returns a tuple with the FilterTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageRepository) GetFilterTagsOk() (*FilterTags, bool) {
	if o == nil || utils.IsNil(o.FilterTags) {
		return nil, false
	}
	return o.FilterTags, true
}

// HasFilterTags returns a boolean if a field has been set.
func (o *ImageRepository) HasFilterTags() bool {
	if o != nil && !utils.IsNil(o.FilterTags) {
		return true
	}

	return false
}

// SetFilterTags gets a reference to the given FilterTags and assigns it to the filterTags field.
// FilterTags:
func (o *ImageRepository) SetFilterTags(v FilterTags) *ImageRepository {
	o.FilterTags = &v
	return o
}

// GetImage returns the Image field value
func (o *ImageRepository) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *ImageRepository) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image, true
}

// SetImage sets field value
func (o *ImageRepository) SetImage(v string) *ImageRepository {
	o.Image = &v
	return o
}

// GetInterval returns the Interval field value
func (o *ImageRepository) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *ImageRepository) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interval, true
}

// SetInterval sets field value
func (o *ImageRepository) SetInterval(v string) *ImageRepository {
	o.Interval = &v
	return o
}

// GetPolicy returns the Policy field value
func (o *ImageRepository) GetPolicy() Policy {
	if o == nil {
		var ret Policy
		return ret
	}

	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *ImageRepository) GetPolicyOk() (*Policy, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policy, true
}

// SetPolicy sets field value
func (o *ImageRepository) SetPolicy(v Policy) *ImageRepository {
	o.Policy = &v
	return o
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *ImageRepository) GetSecretRef() string {
	if o == nil || utils.IsNil(o.SecretRef) {
		var ret string
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageRepository) GetSecretRefOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SecretRef) {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *ImageRepository) HasSecretRef() bool {
	if o != nil && !utils.IsNil(o.SecretRef) {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given string and assigns it to the secretRef field.
// SecretRef:  The name of the secret containing authentication credentials
func (o *ImageRepository) SetSecretRef(v string) *ImageRepository {
	o.SecretRef = &v
	return o
}

func (o ImageRepository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CommitMessage) {
		toSerialize["commitMessage"] = o.CommitMessage
	}
	if !utils.IsNil(o.FilterTags) {
		toSerialize["filterTags"] = o.FilterTags
	}
	toSerialize["image"] = o.Image
	toSerialize["interval"] = o.Interval
	toSerialize["policy"] = o.Policy
	if !utils.IsNil(o.SecretRef) {
		toSerialize["secretRef"] = o.SecretRef
	}
	return toSerialize, nil
}

type NullableImageRepository struct {
	value *ImageRepository
	isSet bool
}

func (v *NullableImageRepository) Get() *ImageRepository {
	return v.value
}

func (v *NullableImageRepository) Set(val *ImageRepository) {
	v.value = val
	v.isSet = true
}

func (v *NullableImageRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableImageRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageRepository(val *ImageRepository) *NullableImageRepository {
	return &NullableImageRepository{value: val, isSet: true}
}

func (v NullableImageRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
