/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kustomize

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the FilterTags type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &FilterTags{}

// FilterTags FilterTags enables filtering for only a subset of tags based on a set of rules. If no rules are provided, all the tags from the repository will be ordered and compared.
type FilterTags struct {
	// Extract allows a capture group to be extracted from the specified regular expression pattern, useful before tag evaluation.
	Extract *string `json:"extract,omitempty"`
	// Pattern specifies a regular expression pattern used to filter for image tags.
	Pattern *string `json:"pattern,omitempty"`
}

// NewFilterTagsWith instantiates a new FilterTags object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewFilterTagsWith() *FilterTags {
	this := FilterTags{}
	return &this
}

// NewFilterTagsWithDefault instantiates a new FilterTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterTagsWithDefault() *FilterTags {
	this := FilterTags{}
	return &this
}

// NewFilterTags is short for NewFilterTagsWithDefault which instantiates a new FilterTags object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterTags() *FilterTags {
	return NewFilterTagsWithDefault()
}

// NewFilterTagsEmpty instantiates a new FilterTags object with no properties set.
// This constructor will not assign any default values to properties.
func NewFilterTagsEmpty() *FilterTags {
	this := FilterTags{}
	return &this
}

// NewFilterTagss converts a list FilterTags pointers to objects.
// This is helpful when the SetFilterTags requires a list of objects
func NewFilterTagsList(ps ...*FilterTags) []FilterTags {
	objs := []FilterTags{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this FilterTags
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *FilterTags) Validate() error {
	// validate all nested properties
	return nil
}

// GetExtract returns the Extract field value if set, zero value otherwise.
func (o *FilterTags) GetExtract() string {
	if o == nil || utils.IsNil(o.Extract) {
		var ret string
		return ret
	}
	return *o.Extract
}

// GetExtractOk returns a tuple with the Extract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterTags) GetExtractOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Extract) {
		return nil, false
	}
	return o.Extract, true
}

// HasExtract returns a boolean if a field has been set.
func (o *FilterTags) HasExtract() bool {
	if o != nil && !utils.IsNil(o.Extract) {
		return true
	}

	return false
}

// SetExtract gets a reference to the given string and assigns it to the extract field.
// Extract:  Extract allows a capture group to be extracted from the specified regular expression pattern, useful before tag evaluation.
func (o *FilterTags) SetExtract(v string) *FilterTags {
	o.Extract = &v
	return o
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *FilterTags) GetPattern() string {
	if o == nil || utils.IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterTags) GetPatternOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *FilterTags) HasPattern() bool {
	if o != nil && !utils.IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the pattern field.
// Pattern:  Pattern specifies a regular expression pattern used to filter for image tags.
func (o *FilterTags) SetPattern(v string) *FilterTags {
	o.Pattern = &v
	return o
}

func (o FilterTags) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterTags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Extract) {
		toSerialize["extract"] = o.Extract
	}
	if !utils.IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	return toSerialize, nil
}

type NullableFilterTags struct {
	value *FilterTags
	isSet bool
}

func (v *NullableFilterTags) Get() *FilterTags {
	return v.value
}

func (v *NullableFilterTags) Set(val *FilterTags) {
	v.value = val
	v.isSet = true
}

func (v *NullableFilterTags) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterTags(val *FilterTags) *NullableFilterTags {
	return &NullableFilterTags{value: val, isSet: true}
}

func (v NullableFilterTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
