/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kustomize

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Oci type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Oci{}

// Oci struct for Oci
type Oci struct {
	// The OIDC provider used for authentication purposes.The generic provider can be used for public repositories or when static credentials are used for authentication, either with spec.secretRef or spec.serviceAccountName
	Provider *string `json:"provider"`
	// The image tag
	Tag *string `json:"tag"`
}

// NewOciWith instantiates a new Oci object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewOciWith(provider string, tag string) *Oci {
	this := Oci{}
	this.Provider = &provider
	this.Tag = &tag
	return &this
}

// NewOciWithDefault instantiates a new Oci object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOciWithDefault() *Oci {
	this := Oci{}
	var provider string = "generic"
	this.Provider = &provider
	var tag string = "latest"
	this.Tag = &tag
	return &this
}

// NewOci is short for NewOciWithDefault which instantiates a new Oci object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOci() *Oci {
	return NewOciWithDefault()
}

// NewOciEmpty instantiates a new Oci object with no properties set.
// This constructor will not assign any default values to properties.
func NewOciEmpty() *Oci {
	this := Oci{}
	return &this
}

// NewOcis converts a list Oci pointers to objects.
// This is helpful when the SetOci requires a list of objects
func NewOciList(ps ...*Oci) []Oci {
	objs := []Oci{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Oci
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Oci) Validate() error {
	if o.Provider == nil {
		return errors.New("Provider in Oci must be set")
	}
	if o.Tag == nil {
		return errors.New("Tag in Oci must be set")
	}
	// validate all nested properties
	return nil
}

// GetProvider returns the Provider field value
func (o *Oci) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *Oci) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Provider, true
}

// SetProvider sets field value
func (o *Oci) SetProvider(v string) *Oci {
	o.Provider = &v
	return o
}

// GetTag returns the Tag field value
func (o *Oci) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *Oci) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tag, true
}

// SetTag sets field value
func (o *Oci) SetTag(v string) *Oci {
	o.Tag = &v
	return o
}

func (o Oci) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Oci) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider"] = o.Provider
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

type NullableOci struct {
	value *Oci
	isSet bool
}

func (v *NullableOci) Get() *Oci {
	return v.value
}

func (v *NullableOci) Set(val *Oci) {
	v.value = val
	v.isSet = true
}

func (v *NullableOci) IsSet() bool {
	return v.isSet
}

func (v *NullableOci) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOci(val *Oci) *NullableOci {
	return &NullableOci{value: val, isSet: true}
}

func (v NullableOci) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOci) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
