/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kustomize

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Policy type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Policy{}

// Policy Policy gives the particulars of the policy to be followed in selecting the most recent image.
type Policy struct {
	Alphabetical *Alphabetical `json:"alphabetical,omitempty"`
	Numerical    *Numerical    `json:"numerical,omitempty"`
	Semver       *Semver       `json:"semver,omitempty"`
}

// NewPolicyWith instantiates a new Policy object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPolicyWith() *Policy {
	this := Policy{}
	return &this
}

// NewPolicyWithDefault instantiates a new Policy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyWithDefault() *Policy {
	this := Policy{}
	return &this
}

// NewPolicy is short for NewPolicyWithDefault which instantiates a new Policy object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicy() *Policy {
	return NewPolicyWithDefault()
}

// NewPolicyEmpty instantiates a new Policy object with no properties set.
// This constructor will not assign any default values to properties.
func NewPolicyEmpty() *Policy {
	this := Policy{}
	return &this
}

// NewPolicys converts a list Policy pointers to objects.
// This is helpful when the SetPolicy requires a list of objects
func NewPolicyList(ps ...*Policy) []Policy {
	objs := []Policy{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Policy
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Policy) Validate() error {
	// validate all nested properties
	if o.Alphabetical != nil {
		if err := o.Alphabetical.Validate(); err != nil {
			return err
		}
	}
	if o.Numerical != nil {
		if err := o.Numerical.Validate(); err != nil {
			return err
		}
	}
	if o.Semver != nil {
		if err := o.Semver.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetAlphabetical returns the Alphabetical field value if set, zero value otherwise.
func (o *Policy) GetAlphabetical() Alphabetical {
	if o == nil || utils.IsNil(o.Alphabetical) {
		var ret Alphabetical
		return ret
	}
	return *o.Alphabetical
}

// GetAlphabeticalOk returns a tuple with the Alphabetical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetAlphabeticalOk() (*Alphabetical, bool) {
	if o == nil || utils.IsNil(o.Alphabetical) {
		return nil, false
	}
	return o.Alphabetical, true
}

// HasAlphabetical returns a boolean if a field has been set.
func (o *Policy) HasAlphabetical() bool {
	if o != nil && !utils.IsNil(o.Alphabetical) {
		return true
	}

	return false
}

// SetAlphabetical gets a reference to the given Alphabetical and assigns it to the alphabetical field.
// Alphabetical:
func (o *Policy) SetAlphabetical(v Alphabetical) *Policy {
	o.Alphabetical = &v
	return o
}

// GetNumerical returns the Numerical field value if set, zero value otherwise.
func (o *Policy) GetNumerical() Numerical {
	if o == nil || utils.IsNil(o.Numerical) {
		var ret Numerical
		return ret
	}
	return *o.Numerical
}

// GetNumericalOk returns a tuple with the Numerical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetNumericalOk() (*Numerical, bool) {
	if o == nil || utils.IsNil(o.Numerical) {
		return nil, false
	}
	return o.Numerical, true
}

// HasNumerical returns a boolean if a field has been set.
func (o *Policy) HasNumerical() bool {
	if o != nil && !utils.IsNil(o.Numerical) {
		return true
	}

	return false
}

// SetNumerical gets a reference to the given Numerical and assigns it to the numerical field.
// Numerical:
func (o *Policy) SetNumerical(v Numerical) *Policy {
	o.Numerical = &v
	return o
}

// GetSemver returns the Semver field value if set, zero value otherwise.
func (o *Policy) GetSemver() Semver {
	if o == nil || utils.IsNil(o.Semver) {
		var ret Semver
		return ret
	}
	return *o.Semver
}

// GetSemverOk returns a tuple with the Semver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetSemverOk() (*Semver, bool) {
	if o == nil || utils.IsNil(o.Semver) {
		return nil, false
	}
	return o.Semver, true
}

// HasSemver returns a boolean if a field has been set.
func (o *Policy) HasSemver() bool {
	if o != nil && !utils.IsNil(o.Semver) {
		return true
	}

	return false
}

// SetSemver gets a reference to the given Semver and assigns it to the semver field.
// Semver:
func (o *Policy) SetSemver(v Semver) *Policy {
	o.Semver = &v
	return o
}

func (o Policy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Policy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Alphabetical) {
		toSerialize["alphabetical"] = o.Alphabetical
	}
	if !utils.IsNil(o.Numerical) {
		toSerialize["numerical"] = o.Numerical
	}
	if !utils.IsNil(o.Semver) {
		toSerialize["semver"] = o.Semver
	}
	return toSerialize, nil
}

type NullablePolicy struct {
	value *Policy
	isSet bool
}

func (v *NullablePolicy) Get() *Policy {
	return v.value
}

func (v *NullablePolicy) Set(val *Policy) {
	v.value = val
	v.isSet = true
}

func (v *NullablePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicy(val *Policy) *NullablePolicy {
	return &NullablePolicy{value: val, isSet: true}
}

func (v NullablePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
