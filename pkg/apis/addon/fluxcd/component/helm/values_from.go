/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package helm

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the ValuesFrom type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ValuesFrom{}

// ValuesFrom struct for ValuesFrom
type ValuesFrom struct {
	// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
	Kind *string `json:"kind"`
	// Name of the values referent. Should reside in the same namespace as the referring resource.
	Name *string `json:"name"`
	// Optional marks this ValuesReference as optional. When set, a not found error or the values reference is ignored, but any ValuesKey, TargetPath or transient error will still result in a reconciliation failure.
	Optional *bool `json:"optional,omitempty"`
	// TargetPath is the YAML dot notation path the value should be merged at. When set, the ValuesKey is expected to be a single flat value. Defaults to 'None', which results in the values getting merged at the root.
	TargetPath *string `json:"targetPath,omitempty"`
	// ValuesKey is the data key where the values.yaml or a specific value can be found at. Defaults to 'values.yaml'.
	ValuesKey *string `json:"valuesKey,omitempty"`
}

// NewValuesFromWith instantiates a new ValuesFrom object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewValuesFromWith(kind string, name string) *ValuesFrom {
	this := ValuesFrom{}
	this.Kind = &kind
	this.Name = &name
	return &this
}

// NewValuesFromWithDefault instantiates a new ValuesFrom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuesFromWithDefault() *ValuesFrom {
	this := ValuesFrom{}
	return &this
}

// NewValuesFrom is short for NewValuesFromWithDefault which instantiates a new ValuesFrom object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuesFrom() *ValuesFrom {
	return NewValuesFromWithDefault()
}

// NewValuesFromEmpty instantiates a new ValuesFrom object with no properties set.
// This constructor will not assign any default values to properties.
func NewValuesFromEmpty() *ValuesFrom {
	this := ValuesFrom{}
	return &this
}

// NewValuesFroms converts a list ValuesFrom pointers to objects.
// This is helpful when the SetValuesFrom requires a list of objects
func NewValuesFromList(ps ...*ValuesFrom) []ValuesFrom {
	objs := []ValuesFrom{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this ValuesFrom
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *ValuesFrom) Validate() error {
	if o.Kind == nil {
		return errors.New("Kind in ValuesFrom must be set")
	}
	if o.Name == nil {
		return errors.New("Name in ValuesFrom must be set")
	}
	// validate all nested properties
	return nil
}

// GetKind returns the Kind field value
func (o *ValuesFrom) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ValuesFrom) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kind, true
}

// SetKind sets field value
func (o *ValuesFrom) SetKind(v string) *ValuesFrom {
	o.Kind = &v
	return o
}

// GetName returns the Name field value
func (o *ValuesFrom) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ValuesFrom) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *ValuesFrom) SetName(v string) *ValuesFrom {
	o.Name = &v
	return o
}

// GetOptional returns the Optional field value if set, zero value otherwise.
func (o *ValuesFrom) GetOptional() bool {
	if o == nil || utils.IsNil(o.Optional) {
		var ret bool
		return ret
	}
	return *o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuesFrom) GetOptionalOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Optional) {
		return nil, false
	}
	return o.Optional, true
}

// HasOptional returns a boolean if a field has been set.
func (o *ValuesFrom) HasOptional() bool {
	if o != nil && !utils.IsNil(o.Optional) {
		return true
	}

	return false
}

// SetOptional gets a reference to the given bool and assigns it to the optional field.
// Optional:  Optional marks this ValuesReference as optional. When set, a not found error or the values reference is ignored, but any ValuesKey, TargetPath or transient error will still result in a reconciliation failure.
func (o *ValuesFrom) SetOptional(v bool) *ValuesFrom {
	o.Optional = &v
	return o
}

// GetTargetPath returns the TargetPath field value if set, zero value otherwise.
func (o *ValuesFrom) GetTargetPath() string {
	if o == nil || utils.IsNil(o.TargetPath) {
		var ret string
		return ret
	}
	return *o.TargetPath
}

// GetTargetPathOk returns a tuple with the TargetPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuesFrom) GetTargetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TargetPath) {
		return nil, false
	}
	return o.TargetPath, true
}

// HasTargetPath returns a boolean if a field has been set.
func (o *ValuesFrom) HasTargetPath() bool {
	if o != nil && !utils.IsNil(o.TargetPath) {
		return true
	}

	return false
}

// SetTargetPath gets a reference to the given string and assigns it to the targetPath field.
// TargetPath:  TargetPath is the YAML dot notation path the value should be merged at. When set, the ValuesKey is expected to be a single flat value. Defaults to 'None', which results in the values getting merged at the root.
func (o *ValuesFrom) SetTargetPath(v string) *ValuesFrom {
	o.TargetPath = &v
	return o
}

// GetValuesKey returns the ValuesKey field value if set, zero value otherwise.
func (o *ValuesFrom) GetValuesKey() string {
	if o == nil || utils.IsNil(o.ValuesKey) {
		var ret string
		return ret
	}
	return *o.ValuesKey
}

// GetValuesKeyOk returns a tuple with the ValuesKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuesFrom) GetValuesKeyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ValuesKey) {
		return nil, false
	}
	return o.ValuesKey, true
}

// HasValuesKey returns a boolean if a field has been set.
func (o *ValuesFrom) HasValuesKey() bool {
	if o != nil && !utils.IsNil(o.ValuesKey) {
		return true
	}

	return false
}

// SetValuesKey gets a reference to the given string and assigns it to the valuesKey field.
// ValuesKey:  ValuesKey is the data key where the values.yaml or a specific value can be found at. Defaults to 'values.yaml'.
func (o *ValuesFrom) SetValuesKey(v string) *ValuesFrom {
	o.ValuesKey = &v
	return o
}

func (o ValuesFrom) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValuesFrom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["name"] = o.Name
	if !utils.IsNil(o.Optional) {
		toSerialize["optional"] = o.Optional
	}
	if !utils.IsNil(o.TargetPath) {
		toSerialize["targetPath"] = o.TargetPath
	}
	if !utils.IsNil(o.ValuesKey) {
		toSerialize["valuesKey"] = o.ValuesKey
	}
	return toSerialize, nil
}

type NullableValuesFrom struct {
	value *ValuesFrom
	isSet bool
}

func (v *NullableValuesFrom) Get() *ValuesFrom {
	return v.value
}

func (v *NullableValuesFrom) Set(val *ValuesFrom) {
	v.value = val
	v.isSet = true
}

func (v *NullableValuesFrom) IsSet() bool {
	return v.isSet
}

func (v *NullableValuesFrom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValuesFrom(val *ValuesFrom) *NullableValuesFrom {
	return &NullableValuesFrom{value: val, isSet: true}
}

func (v NullableValuesFrom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValuesFrom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
