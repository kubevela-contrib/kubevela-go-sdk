/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kustomize_json_patch

import (
	"encoding/json"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Selector type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Selector{}

// Selector Selector specifies a set of resources
type Selector struct {
	AnnotationSelector *string `json:"annotationSelector,omitempty"`
	Group              *string `json:"group,omitempty"`
	Kind               *string `json:"kind,omitempty"`
	LabelSelector      *string `json:"labelSelector,omitempty"`
	Name               *string `json:"name,omitempty"`
	Namespace          *string `json:"namespace,omitempty"`
	Version            *string `json:"version,omitempty"`
}

// NewSelectorWith instantiates a new Selector object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewSelectorWith() *Selector {
	this := Selector{}
	return &this
}

// NewSelectorWithDefault instantiates a new Selector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorWithDefault() *Selector {
	this := Selector{}
	return &this
}

// NewSelector is short for NewSelectorWithDefault which instantiates a new Selector object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelector() *Selector {
	return NewSelectorWithDefault()
}

// NewSelectorEmpty instantiates a new Selector object with no properties set.
// This constructor will not assign any default values to properties.
func NewSelectorEmpty() *Selector {
	this := Selector{}
	return &this
}

// NewSelectors converts a list Selector pointers to objects.
// This is helpful when the SetSelector requires a list of objects
func NewSelectorList(ps ...*Selector) []Selector {
	objs := []Selector{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Selector
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Selector) Validate() error {
	// validate all nested properties
	return nil
}

// GetAnnotationSelector returns the AnnotationSelector field value if set, zero value otherwise.
func (o *Selector) GetAnnotationSelector() string {
	if o == nil || utils.IsNil(o.AnnotationSelector) {
		var ret string
		return ret
	}
	return *o.AnnotationSelector
}

// GetAnnotationSelectorOk returns a tuple with the AnnotationSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Selector) GetAnnotationSelectorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AnnotationSelector) {
		return nil, false
	}
	return o.AnnotationSelector, true
}

// HasAnnotationSelector returns a boolean if a field has been set.
func (o *Selector) HasAnnotationSelector() bool {
	if o != nil && !utils.IsNil(o.AnnotationSelector) {
		return true
	}

	return false
}

// SetAnnotationSelector gets a reference to the given string and assigns it to the annotationSelector field.
// AnnotationSelector:
func (o *Selector) SetAnnotationSelector(v string) *Selector {
	o.AnnotationSelector = &v
	return o
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *Selector) GetGroup() string {
	if o == nil || utils.IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Selector) GetGroupOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *Selector) HasGroup() bool {
	if o != nil && !utils.IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the group field.
// Group:
func (o *Selector) SetGroup(v string) *Selector {
	o.Group = &v
	return o
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *Selector) GetKind() string {
	if o == nil || utils.IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Selector) GetKindOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *Selector) HasKind() bool {
	if o != nil && !utils.IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the kind field.
// Kind:
func (o *Selector) SetKind(v string) *Selector {
	o.Kind = &v
	return o
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *Selector) GetLabelSelector() string {
	if o == nil || utils.IsNil(o.LabelSelector) {
		var ret string
		return ret
	}
	return *o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Selector) GetLabelSelectorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.LabelSelector) {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *Selector) HasLabelSelector() bool {
	if o != nil && !utils.IsNil(o.LabelSelector) {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given string and assigns it to the labelSelector field.
// LabelSelector:
func (o *Selector) SetLabelSelector(v string) *Selector {
	o.LabelSelector = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Selector) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Selector) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Selector) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the name field.
// Name:
func (o *Selector) SetName(v string) *Selector {
	o.Name = &v
	return o
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Selector) GetNamespace() string {
	if o == nil || utils.IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Selector) GetNamespaceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Selector) HasNamespace() bool {
	if o != nil && !utils.IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the namespace field.
// Namespace:
func (o *Selector) SetNamespace(v string) *Selector {
	o.Namespace = &v
	return o
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Selector) GetVersion() string {
	if o == nil || utils.IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Selector) GetVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Selector) HasVersion() bool {
	if o != nil && !utils.IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the version field.
// Version:
func (o *Selector) SetVersion(v string) *Selector {
	o.Version = &v
	return o
}

func (o Selector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Selector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AnnotationSelector) {
		toSerialize["annotationSelector"] = o.AnnotationSelector
	}
	if !utils.IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !utils.IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !utils.IsNil(o.LabelSelector) {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !utils.IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableSelector struct {
	value *Selector
	isSet bool
}

func (v *NullableSelector) Get() *Selector {
	return v.value
}

func (v *NullableSelector) Set(val *Selector) {
	v.value = val
	v.isSet = true
}

func (v *NullableSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelector(val *Selector) *NullableSelector {
	return &NullableSelector{value: val, isSet: true}
}

func (v NullableSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
