/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kustomize_json_patch

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Patch type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Patch{}

// Patch struct for Patch
type Patch struct {
	// specify source path when op is copy/move
	From *string `json:"from,omitempty"`
	Op   *Op     `json:"op"`
	// operate path e.g. /foo/bar
	Path *string `json:"path"`
	// specify opraation value when op is test/add/replace
	Value *string `json:"value,omitempty"`
}

// NewPatchWith instantiates a new Patch object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPatchWith(op Op, path string) *Patch {
	this := Patch{}
	this.Op = &op
	this.Path = &path
	return &this
}

// NewPatchWithDefault instantiates a new Patch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchWithDefault() *Patch {
	this := Patch{}
	return &this
}

// NewPatch is short for NewPatchWithDefault which instantiates a new Patch object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatch() *Patch {
	return NewPatchWithDefault()
}

// NewPatchEmpty instantiates a new Patch object with no properties set.
// This constructor will not assign any default values to properties.
func NewPatchEmpty() *Patch {
	this := Patch{}
	return &this
}

// NewPatchs converts a list Patch pointers to objects.
// This is helpful when the SetPatch requires a list of objects
func NewPatchList(ps ...*Patch) []Patch {
	objs := []Patch{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Patch
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Patch) Validate() error {
	if o.Op == nil {
		return errors.New("Op in Patch must be set")
	}
	if o.Path == nil {
		return errors.New("Path in Patch must be set")
	}
	// validate all nested properties
	if o.Op != nil {
		if err := o.Op.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *Patch) GetFrom() string {
	if o == nil || utils.IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patch) GetFromOk() (*string, bool) {
	if o == nil || utils.IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *Patch) HasFrom() bool {
	if o != nil && !utils.IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the from field.
// From:  specify source path when op is copy/move
func (o *Patch) SetFrom(v string) *Patch {
	o.From = &v
	return o
}

// GetOp returns the Op field value
func (o *Patch) GetOp() Op {
	if o == nil {
		var ret Op
		return ret
	}

	return *o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *Patch) GetOpOk() (*Op, bool) {
	if o == nil {
		return nil, false
	}
	return o.Op, true
}

// SetOp sets field value
func (o *Patch) SetOp(v Op) *Patch {
	o.Op = &v
	return o
}

// GetPath returns the Path field value
func (o *Patch) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *Patch) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path, true
}

// SetPath sets field value
func (o *Patch) SetPath(v string) *Patch {
	o.Path = &v
	return o
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Patch) GetValue() string {
	if o == nil || utils.IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patch) GetValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Patch) HasValue() bool {
	if o != nil && !utils.IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the value field.
// Value:  specify opraation value when op is test/add/replace
func (o *Patch) SetValue(v string) *Patch {
	o.Value = &v
	return o
}

func (o Patch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Patch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	toSerialize["op"] = o.Op
	toSerialize["path"] = o.Path
	if !utils.IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePatch struct {
	value *Patch
	isSet bool
}

func (v *NullablePatch) Get() *Patch {
	return v.value
}

func (v *NullablePatch) Set(val *Patch) {
	v.value = val
	v.isSet = true
}

func (v *NullablePatch) IsSet() bool {
	return v.isSet
}

func (v *NullablePatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatch(val *Patch) *NullablePatch {
	return &NullablePatch{value: val, isSet: true}
}

func (v NullablePatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
