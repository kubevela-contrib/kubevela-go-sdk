/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kustomize_json_patch

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the KustomizeJsonPatchSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &KustomizeJsonPatchSpec{}

// KustomizeJsonPatchSpec struct for KustomizeJsonPatchSpec
type KustomizeJsonPatchSpec struct {
	// A list of JSON6902 patch.
	PatchesJson []JsonPatchItem `json:"patchesJson"`
}

// NewKustomizeJsonPatchSpecWith instantiates a new KustomizeJsonPatchSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewKustomizeJsonPatchSpecWith(patchesJson []JsonPatchItem) *KustomizeJsonPatchSpec {
	this := KustomizeJsonPatchSpec{}
	this.PatchesJson = patchesJson
	return &this
}

// NewKustomizeJsonPatchSpecWithDefault instantiates a new KustomizeJsonPatchSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKustomizeJsonPatchSpecWithDefault() *KustomizeJsonPatchSpec {
	this := KustomizeJsonPatchSpec{}
	return &this
}

// NewKustomizeJsonPatchSpec is short for NewKustomizeJsonPatchSpecWithDefault which instantiates a new KustomizeJsonPatchSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKustomizeJsonPatchSpec() *KustomizeJsonPatchSpec {
	return NewKustomizeJsonPatchSpecWithDefault()
}

// NewKustomizeJsonPatchSpecEmpty instantiates a new KustomizeJsonPatchSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewKustomizeJsonPatchSpecEmpty() *KustomizeJsonPatchSpec {
	this := KustomizeJsonPatchSpec{}
	return &this
}

// NewKustomizeJsonPatchSpecs converts a list KustomizeJsonPatchSpec pointers to objects.
// This is helpful when the SetKustomizeJsonPatchSpec requires a list of objects
func NewKustomizeJsonPatchSpecList(ps ...*KustomizeJsonPatchSpec) []KustomizeJsonPatchSpec {
	objs := []KustomizeJsonPatchSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this KustomizeJsonPatchSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *KustomizeJSONPatchTrait) Validate() error {
	if o.Properties.PatchesJson == nil {
		return errors.New("PatchesJson in KustomizeJsonPatchSpec must be set")
	}
	// validate all nested properties
	return nil
}

// GetPatchesJson returns the PatchesJson field value
func (o *KustomizeJSONPatchTrait) GetPatchesJson() []JsonPatchItem {
	if o == nil {
		var ret []JsonPatchItem
		return ret
	}

	return o.Properties.PatchesJson
}

// GetPatchesJsonOk returns a tuple with the PatchesJson field value
// and a boolean to check if the value has been set.
func (o *KustomizeJSONPatchTrait) GetPatchesJsonOk() ([]JsonPatchItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.PatchesJson, true
}

// SetPatchesJson sets field value
func (o *KustomizeJSONPatchTrait) SetPatchesJson(v []JsonPatchItem) *KustomizeJSONPatchTrait {
	o.Properties.PatchesJson = v
	return o
}

func (o KustomizeJsonPatchSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KustomizeJsonPatchSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["patchesJson"] = o.PatchesJson
	return toSerialize, nil
}

type NullableKustomizeJsonPatchSpec struct {
	value *KustomizeJsonPatchSpec
	isSet bool
}

func (v *NullableKustomizeJsonPatchSpec) Get() *KustomizeJsonPatchSpec {
	return v.value
}

func (v *NullableKustomizeJsonPatchSpec) Set(val *KustomizeJsonPatchSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableKustomizeJsonPatchSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableKustomizeJsonPatchSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKustomizeJsonPatchSpec(val *KustomizeJsonPatchSpec) *NullableKustomizeJsonPatchSpec {
	return &NullableKustomizeJsonPatchSpec{value: val, isSet: true}
}

func (v NullableKustomizeJsonPatchSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKustomizeJsonPatchSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const KustomizeJsonPatchType = "kustomize-json-patch"

func init() {
	sdkcommon.RegisterTrait(KustomizeJsonPatchType, FromTrait)
}

type KustomizeJSONPatchTrait struct {
	Base       apis.TraitBase
	Properties KustomizeJsonPatchSpec
}

func KustomizeJsonPatch() *KustomizeJSONPatchTrait {
	k := &KustomizeJSONPatchTrait{Base: apis.TraitBase{}}
	return k
}

func (k *KustomizeJSONPatchTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(k.Properties),
		Type:       KustomizeJsonPatchType,
	}
	return res
}

func (k *KustomizeJSONPatchTrait) FromTrait(from common.ApplicationTrait) (*KustomizeJSONPatchTrait, error) {
	var properties KustomizeJsonPatchSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	k.Base.Type = KustomizeJsonPatchType
	k.Properties = properties
	return k, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	k := &KustomizeJSONPatchTrait{}
	return k.FromTrait(from)
}

func (k *KustomizeJSONPatchTrait) DefType() string {
	return KustomizeJsonPatchType
}
