/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kustomize_json_patch

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the JsonPatchItem type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &JsonPatchItem{}

// JsonPatchItem Contains a JSON6902 patch
type JsonPatchItem struct {
	Patch  []Patch   `json:"patch"`
	Target *Selector `json:"target"`
}

// NewJsonPatchItemWith instantiates a new JsonPatchItem object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewJsonPatchItemWith(patch []Patch, target Selector) *JsonPatchItem {
	this := JsonPatchItem{}
	this.Patch = patch
	this.Target = &target
	return &this
}

// NewJsonPatchItemWithDefault instantiates a new JsonPatchItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonPatchItemWithDefault() *JsonPatchItem {
	this := JsonPatchItem{}
	return &this
}

// NewJsonPatchItem is short for NewJsonPatchItemWithDefault which instantiates a new JsonPatchItem object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonPatchItem() *JsonPatchItem {
	return NewJsonPatchItemWithDefault()
}

// NewJsonPatchItemEmpty instantiates a new JsonPatchItem object with no properties set.
// This constructor will not assign any default values to properties.
func NewJsonPatchItemEmpty() *JsonPatchItem {
	this := JsonPatchItem{}
	return &this
}

// NewJsonPatchItems converts a list JsonPatchItem pointers to objects.
// This is helpful when the SetJsonPatchItem requires a list of objects
func NewJsonPatchItemList(ps ...*JsonPatchItem) []JsonPatchItem {
	objs := []JsonPatchItem{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this JsonPatchItem
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *JsonPatchItem) Validate() error {
	if o.Patch == nil {
		return errors.New("Patch in JsonPatchItem must be set")
	}
	if o.Target == nil {
		return errors.New("Target in JsonPatchItem must be set")
	}
	// validate all nested properties
	if o.Target != nil {
		if err := o.Target.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetPatch returns the Patch field value
func (o *JsonPatchItem) GetPatch() []Patch {
	if o == nil {
		var ret []Patch
		return ret
	}

	return o.Patch
}

// GetPatchOk returns a tuple with the Patch field value
// and a boolean to check if the value has been set.
func (o *JsonPatchItem) GetPatchOk() ([]Patch, bool) {
	if o == nil {
		return nil, false
	}
	return o.Patch, true
}

// SetPatch sets field value
func (o *JsonPatchItem) SetPatch(v []Patch) *JsonPatchItem {
	o.Patch = v
	return o
}

// GetTarget returns the Target field value
func (o *JsonPatchItem) GetTarget() Selector {
	if o == nil {
		var ret Selector
		return ret
	}

	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *JsonPatchItem) GetTargetOk() (*Selector, bool) {
	if o == nil {
		return nil, false
	}
	return o.Target, true
}

// SetTarget sets field value
func (o *JsonPatchItem) SetTarget(v Selector) *JsonPatchItem {
	o.Target = &v
	return o
}

func (o JsonPatchItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonPatchItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["patch"] = o.Patch
	toSerialize["target"] = o.Target
	return toSerialize, nil
}

type NullableJsonPatchItem struct {
	value *JsonPatchItem
	isSet bool
}

func (v *NullableJsonPatchItem) Get() *JsonPatchItem {
	return v.value
}

func (v *NullableJsonPatchItem) Set(val *JsonPatchItem) {
	v.value = val
	v.isSet = true
}

func (v *NullableJsonPatchItem) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonPatchItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonPatchItem(val *JsonPatchItem) *NullableJsonPatchItem {
	return &NullableJsonPatchItem{value: val, isSet: true}
}

func (v NullableJsonPatchItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonPatchItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
