/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kustomize_patch

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the PatchItem type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PatchItem{}

// PatchItem Contains a strategicMerge or JSON6902 patch
type PatchItem struct {
	// Inline patch string, in yaml style
	Patch  *string   `json:"patch"`
	Target *Selector `json:"target"`
}

// NewPatchItemWith instantiates a new PatchItem object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewPatchItemWith(patch string, target Selector) *PatchItem {
	this := PatchItem{}
	this.Patch = &patch
	this.Target = &target
	return &this
}

// NewPatchItemWithDefault instantiates a new PatchItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchItemWithDefault() *PatchItem {
	this := PatchItem{}
	return &this
}

// NewPatchItem is short for NewPatchItemWithDefault which instantiates a new PatchItem object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchItem() *PatchItem {
	return NewPatchItemWithDefault()
}

// NewPatchItemEmpty instantiates a new PatchItem object with no properties set.
// This constructor will not assign any default values to properties.
func NewPatchItemEmpty() *PatchItem {
	this := PatchItem{}
	return &this
}

// NewPatchItems converts a list PatchItem pointers to objects.
// This is helpful when the SetPatchItem requires a list of objects
func NewPatchItemList(ps ...*PatchItem) []PatchItem {
	objs := []PatchItem{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this PatchItem
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *PatchItem) Validate() error {
	if o.Patch == nil {
		return errors.New("Patch in PatchItem must be set")
	}
	if o.Target == nil {
		return errors.New("Target in PatchItem must be set")
	}
	// validate all nested properties
	if o.Target != nil {
		if err := o.Target.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetPatch returns the Patch field value
func (o *PatchItem) GetPatch() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value
// and a boolean to check if the value has been set.
func (o *PatchItem) GetPatchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Patch, true
}

// SetPatch sets field value
func (o *PatchItem) SetPatch(v string) *PatchItem {
	o.Patch = &v
	return o
}

// GetTarget returns the Target field value
func (o *PatchItem) GetTarget() Selector {
	if o == nil {
		var ret Selector
		return ret
	}

	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *PatchItem) GetTargetOk() (*Selector, bool) {
	if o == nil {
		return nil, false
	}
	return o.Target, true
}

// SetTarget sets field value
func (o *PatchItem) SetTarget(v Selector) *PatchItem {
	o.Target = &v
	return o
}

func (o PatchItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["patch"] = o.Patch
	toSerialize["target"] = o.Target
	return toSerialize, nil
}

type NullablePatchItem struct {
	value *PatchItem
	isSet bool
}

func (v *NullablePatchItem) Get() *PatchItem {
	return v.value
}

func (v *NullablePatchItem) Set(val *PatchItem) {
	v.value = val
	v.isSet = true
}

func (v *NullablePatchItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchItem(val *PatchItem) *NullablePatchItem {
	return &NullablePatchItem{value: val, isSet: true}
}

func (v NullablePatchItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
