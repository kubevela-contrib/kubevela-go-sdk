/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flink_cluster

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the FlinkClusterSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &FlinkClusterSpec{}

// FlinkClusterSpec struct for FlinkClusterSpec
type FlinkClusterSpec struct {
	// Specify the flink cluster version, e.g \"v1_14\"
	FlinkVersion *string `json:"flinkVersion"`
	// Specify the image for flink cluster to run, e.g \"flink:latest\"
	Image *string `json:"image"`
	// Specify the uri for the jar of the flink cluster job, e.g \"local:///opt/flink/examples/streaming/StateMachineExample.jar\"
	JarURI *string `json:"jarURI"`
	// Specify the cpu of the flink cluster jobManager, e.g 1
	Jmcpu *int32 `json:"jmcpu"`
	// Specify the memory of the flink cluster jobManager, e.g \"1024m\"
	Jmmem *string `json:"jmmem"`
	// Specify the flink cluster name
	Name *string `json:"name"`
	// Specify the namespace for flink cluster to install
	Namespace *string `json:"namespace"`
	// Specify the taskmanager.numberOfTaskSlots, e.g \"2\"
	Nots *string `json:"nots"`
	// Specify the parallelism of the flink cluster job, e.g 2
	Parallelism *int32 `json:"parallelism"`
	// Specify the replicas of the flink cluster jobManager, e.g 1
	Replicas *int32 `json:"replicas"`
	// Specify the cpu of the flink cluster taskManager, e.g 1
	Tmcpu *int32 `json:"tmcpu"`
	// Specify the memory of the flink cluster taskManager, e.g \"1024m\"
	Tmmem *string `json:"tmmem"`
	// Specify the upgradeMode of the flink cluster job, e.g \"stateless\"
	UpgradeMode *string `json:"upgradeMode"`
}

// NewFlinkClusterSpecWith instantiates a new FlinkClusterSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewFlinkClusterSpecWith(flinkVersion string, image string, jarURI string, jmcpu int32, jmmem string, name string, namespace string, nots string, parallelism int32, replicas int32, tmcpu int32, tmmem string, upgradeMode string) *FlinkClusterSpec {
	this := FlinkClusterSpec{}
	this.FlinkVersion = &flinkVersion
	this.Image = &image
	this.JarURI = &jarURI
	this.Jmcpu = &jmcpu
	this.Jmmem = &jmmem
	this.Name = &name
	this.Namespace = &namespace
	this.Nots = &nots
	this.Parallelism = &parallelism
	this.Replicas = &replicas
	this.Tmcpu = &tmcpu
	this.Tmmem = &tmmem
	this.UpgradeMode = &upgradeMode
	return &this
}

// NewFlinkClusterSpecWithDefault instantiates a new FlinkClusterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlinkClusterSpecWithDefault() *FlinkClusterSpec {
	this := FlinkClusterSpec{}
	return &this
}

// NewFlinkClusterSpec is short for NewFlinkClusterSpecWithDefault which instantiates a new FlinkClusterSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlinkClusterSpec() *FlinkClusterSpec {
	return NewFlinkClusterSpecWithDefault()
}

// NewFlinkClusterSpecEmpty instantiates a new FlinkClusterSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewFlinkClusterSpecEmpty() *FlinkClusterSpec {
	this := FlinkClusterSpec{}
	return &this
}

// NewFlinkClusterSpecs converts a list FlinkClusterSpec pointers to objects.
// This is helpful when the SetFlinkClusterSpec requires a list of objects
func NewFlinkClusterSpecList(ps ...*FlinkClusterSpec) []FlinkClusterSpec {
	objs := []FlinkClusterSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this FlinkClusterSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *FlinkClusterComponent) Validate() error {
	if o.Properties.FlinkVersion == nil {
		return errors.New("FlinkVersion in FlinkClusterSpec must be set")
	}
	if o.Properties.Image == nil {
		return errors.New("Image in FlinkClusterSpec must be set")
	}
	if o.Properties.JarURI == nil {
		return errors.New("JarURI in FlinkClusterSpec must be set")
	}
	if o.Properties.Jmcpu == nil {
		return errors.New("Jmcpu in FlinkClusterSpec must be set")
	}
	if o.Properties.Jmmem == nil {
		return errors.New("Jmmem in FlinkClusterSpec must be set")
	}
	if o.Properties.Name == nil {
		return errors.New("Name in FlinkClusterSpec must be set")
	}
	if o.Properties.Namespace == nil {
		return errors.New("Namespace in FlinkClusterSpec must be set")
	}
	if o.Properties.Nots == nil {
		return errors.New("Nots in FlinkClusterSpec must be set")
	}
	if o.Properties.Parallelism == nil {
		return errors.New("Parallelism in FlinkClusterSpec must be set")
	}
	if o.Properties.Replicas == nil {
		return errors.New("Replicas in FlinkClusterSpec must be set")
	}
	if o.Properties.Tmcpu == nil {
		return errors.New("Tmcpu in FlinkClusterSpec must be set")
	}
	if o.Properties.Tmmem == nil {
		return errors.New("Tmmem in FlinkClusterSpec must be set")
	}
	if o.Properties.UpgradeMode == nil {
		return errors.New("UpgradeMode in FlinkClusterSpec must be set")
	}
	// validate all nested properties

	for i, v := range o.Base.Traits {
		if err := v.Validate(); err != nil {
			return fmt.Errorf("traits[%d] %s in %s component is invalid: %w", i, v.DefType(), FlinkClusterType, err)
		}
	}
	return nil
}

// GetFlinkVersion returns the FlinkVersion field value
func (o *FlinkClusterComponent) GetFlinkVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.FlinkVersion
}

// GetFlinkVersionOk returns a tuple with the FlinkVersion field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetFlinkVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.FlinkVersion, true
}

// SetFlinkVersion sets field value
func (o *FlinkClusterComponent) SetFlinkVersion(v string) *FlinkClusterComponent {
	o.Properties.FlinkVersion = &v
	return o
}

// GetImage returns the Image field value
func (o *FlinkClusterComponent) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Image, true
}

// SetImage sets field value
func (o *FlinkClusterComponent) SetImage(v string) *FlinkClusterComponent {
	o.Properties.Image = &v
	return o
}

// GetJarURI returns the JarURI field value
func (o *FlinkClusterComponent) GetJarURI() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.JarURI
}

// GetJarURIOk returns a tuple with the JarURI field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetJarURIOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.JarURI, true
}

// SetJarURI sets field value
func (o *FlinkClusterComponent) SetJarURI(v string) *FlinkClusterComponent {
	o.Properties.JarURI = &v
	return o
}

// GetJmcpu returns the Jmcpu field value
func (o *FlinkClusterComponent) GetJmcpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return *o.Properties.Jmcpu
}

// GetJmcpuOk returns a tuple with the Jmcpu field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetJmcpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Jmcpu, true
}

// SetJmcpu sets field value
func (o *FlinkClusterComponent) SetJmcpu(v int32) *FlinkClusterComponent {
	o.Properties.Jmcpu = &v
	return o
}

// GetJmmem returns the Jmmem field value
func (o *FlinkClusterComponent) GetJmmem() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Jmmem
}

// GetJmmemOk returns a tuple with the Jmmem field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetJmmemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Jmmem, true
}

// SetJmmem sets field value
func (o *FlinkClusterComponent) SetJmmem(v string) *FlinkClusterComponent {
	o.Properties.Jmmem = &v
	return o
}

// GetName returns the Name field value
func (o *FlinkClusterComponent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Name, true
}

// SetName sets field value
func (o *FlinkClusterComponent) SetName(v string) *FlinkClusterComponent {
	o.Properties.Name = &v
	return o
}

// GetNamespace returns the Namespace field value
func (o *FlinkClusterComponent) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Namespace, true
}

// SetNamespace sets field value
func (o *FlinkClusterComponent) SetNamespace(v string) *FlinkClusterComponent {
	o.Properties.Namespace = &v
	return o
}

// GetNots returns the Nots field value
func (o *FlinkClusterComponent) GetNots() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Nots
}

// GetNotsOk returns a tuple with the Nots field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetNotsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Nots, true
}

// SetNots sets field value
func (o *FlinkClusterComponent) SetNots(v string) *FlinkClusterComponent {
	o.Properties.Nots = &v
	return o
}

// GetParallelism returns the Parallelism field value
func (o *FlinkClusterComponent) GetParallelism() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return *o.Properties.Parallelism
}

// GetParallelismOk returns a tuple with the Parallelism field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetParallelismOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Parallelism, true
}

// SetParallelism sets field value
func (o *FlinkClusterComponent) SetParallelism(v int32) *FlinkClusterComponent {
	o.Properties.Parallelism = &v
	return o
}

// GetReplicas returns the Replicas field value
func (o *FlinkClusterComponent) GetReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return *o.Properties.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Replicas, true
}

// SetReplicas sets field value
func (o *FlinkClusterComponent) SetReplicas(v int32) *FlinkClusterComponent {
	o.Properties.Replicas = &v
	return o
}

// GetTmcpu returns the Tmcpu field value
func (o *FlinkClusterComponent) GetTmcpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return *o.Properties.Tmcpu
}

// GetTmcpuOk returns a tuple with the Tmcpu field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetTmcpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Tmcpu, true
}

// SetTmcpu sets field value
func (o *FlinkClusterComponent) SetTmcpu(v int32) *FlinkClusterComponent {
	o.Properties.Tmcpu = &v
	return o
}

// GetTmmem returns the Tmmem field value
func (o *FlinkClusterComponent) GetTmmem() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Tmmem
}

// GetTmmemOk returns a tuple with the Tmmem field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetTmmemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Tmmem, true
}

// SetTmmem sets field value
func (o *FlinkClusterComponent) SetTmmem(v string) *FlinkClusterComponent {
	o.Properties.Tmmem = &v
	return o
}

// GetUpgradeMode returns the UpgradeMode field value
func (o *FlinkClusterComponent) GetUpgradeMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.UpgradeMode
}

// GetUpgradeModeOk returns a tuple with the UpgradeMode field value
// and a boolean to check if the value has been set.
func (o *FlinkClusterComponent) GetUpgradeModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.UpgradeMode, true
}

// SetUpgradeMode sets field value
func (o *FlinkClusterComponent) SetUpgradeMode(v string) *FlinkClusterComponent {
	o.Properties.UpgradeMode = &v
	return o
}

func (o FlinkClusterSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlinkClusterSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flinkVersion"] = o.FlinkVersion
	toSerialize["image"] = o.Image
	toSerialize["jarURI"] = o.JarURI
	toSerialize["jmcpu"] = o.Jmcpu
	toSerialize["jmmem"] = o.Jmmem
	toSerialize["name"] = o.Name
	toSerialize["namespace"] = o.Namespace
	toSerialize["nots"] = o.Nots
	toSerialize["parallelism"] = o.Parallelism
	toSerialize["replicas"] = o.Replicas
	toSerialize["tmcpu"] = o.Tmcpu
	toSerialize["tmmem"] = o.Tmmem
	toSerialize["upgradeMode"] = o.UpgradeMode
	return toSerialize, nil
}

type NullableFlinkClusterSpec struct {
	value *FlinkClusterSpec
	isSet bool
}

func (v *NullableFlinkClusterSpec) Get() *FlinkClusterSpec {
	return v.value
}

func (v *NullableFlinkClusterSpec) Set(val *FlinkClusterSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableFlinkClusterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableFlinkClusterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlinkClusterSpec(val *FlinkClusterSpec) *NullableFlinkClusterSpec {
	return &NullableFlinkClusterSpec{value: val, isSet: true}
}

func (v NullableFlinkClusterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlinkClusterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const FlinkClusterType = "flink-cluster"

func init() {
	sdkcommon.RegisterComponent(FlinkClusterType, FromComponent)
}

type FlinkClusterComponent struct {
	Base       apis.ComponentBase
	Properties FlinkClusterSpec
}

func FlinkCluster(name string) *FlinkClusterComponent {
	f := &FlinkClusterComponent{Base: apis.ComponentBase{
		Name: name,
		Type: FlinkClusterType,
	}}
	return f
}

func (f *FlinkClusterComponent) Build() common.ApplicationComponent {
	traits := make([]common.ApplicationTrait, 0)
	for _, trait := range f.Base.Traits {
		traits = append(traits, trait.Build())
	}
	res := common.ApplicationComponent{
		DependsOn:  f.Base.DependsOn,
		Inputs:     f.Base.Inputs,
		Name:       f.Base.Name,
		Outputs:    f.Base.Outputs,
		Properties: util.Object2RawExtension(f.Properties),
		Traits:     traits,
		Type:       FlinkClusterType,
	}
	return res
}

func (f *FlinkClusterComponent) FromComponent(from common.ApplicationComponent) (*FlinkClusterComponent, error) {
	for _, trait := range from.Traits {
		_t, err := sdkcommon.FromTrait(&trait)
		if err != nil {
			return nil, err
		}
		f.Base.Traits = append(f.Base.Traits, _t)
	}
	var properties FlinkClusterSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	f.Base.Name = from.Name
	f.Base.DependsOn = from.DependsOn
	f.Base.Inputs = from.Inputs
	f.Base.Outputs = from.Outputs
	f.Base.Type = FlinkClusterType
	f.Properties = properties
	return f, nil
}

func FromComponent(from common.ApplicationComponent) (apis.Component, error) {
	f := &FlinkClusterComponent{}
	return f.FromComponent(from)
}

func (f *FlinkClusterComponent) SetTraits(traits ...apis.Trait) *FlinkClusterComponent {
	for _, addTrait := range traits {
		found := false
		for i, _t := range f.Base.Traits {
			if _t.DefType() == addTrait.DefType() {
				f.Base.Traits[i] = addTrait
				found = true
				break
			}
			if !found {
				f.Base.Traits = append(f.Base.Traits, addTrait)
			}
		}
	}
	return f
}

func (f *FlinkClusterComponent) GetTrait(typ string) apis.Trait {
	for _, _t := range f.Base.Traits {
		if _t.DefType() == typ {
			return _t
		}
	}
	return nil
}

func (f *FlinkClusterComponent) GetAllTraits() []apis.Trait {
	return f.Base.Traits
}

func (f *FlinkClusterComponent) ComponentName() string {
	return f.Base.Name
}

func (f *FlinkClusterComponent) DefType() string {
	return FlinkClusterType
}

func (f *FlinkClusterComponent) DependsOn(dependsOn []string) *FlinkClusterComponent {
	f.Base.DependsOn = dependsOn
	return f
}

func (f *FlinkClusterComponent) Inputs(input common.StepInputs) *FlinkClusterComponent {
	f.Base.Inputs = input
	return f
}

func (f *FlinkClusterComponent) Outputs(output common.StepOutputs) *FlinkClusterComponent {
	f.Base.Outputs = output
	return f
}

func (f *FlinkClusterComponent) AddDependsOn(dependsOn string) *FlinkClusterComponent {
	f.Base.DependsOn = append(f.Base.DependsOn, dependsOn)
	return f
}
