/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vegeta

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the VegetaSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &VegetaSpec{}

// VegetaSpec struct for VegetaSpec
type VegetaSpec struct {
	Backofflimit  *int32  `json:"backofflimit"`
	Dorequest     *string `json:"dorequest"`
	Image         *string `json:"image"`
	Parallelism   *int32  `json:"parallelism"`
	RestartPolicy *string `json:"restartPolicy"`
	Vegetacli     *string `json:"vegetacli"`
}

// NewVegetaSpecWith instantiates a new VegetaSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewVegetaSpecWith(backofflimit int32, dorequest string, image string, parallelism int32, restartPolicy string, vegetacli string) *VegetaSpec {
	this := VegetaSpec{}
	this.Backofflimit = &backofflimit
	this.Dorequest = &dorequest
	this.Image = &image
	this.Parallelism = &parallelism
	this.RestartPolicy = &restartPolicy
	this.Vegetacli = &vegetacli
	return &this
}

// NewVegetaSpecWithDefault instantiates a new VegetaSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVegetaSpecWithDefault() *VegetaSpec {
	this := VegetaSpec{}
	var backofflimit int32 = 0
	this.Backofflimit = &backofflimit
	var image string = "quay.io/karansingh/vegeta-ubi"
	this.Image = &image
	var parallelism int32 = 1
	this.Parallelism = &parallelism
	var restartPolicy string = "OnFailure"
	this.RestartPolicy = &restartPolicy
	var vegetacli string = "vegeta attack -rate 5000 -duration 10000m | vegeta encode"
	this.Vegetacli = &vegetacli
	return &this
}

// NewVegetaSpec is short for NewVegetaSpecWithDefault which instantiates a new VegetaSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVegetaSpec() *VegetaSpec {
	return NewVegetaSpecWithDefault()
}

// NewVegetaSpecEmpty instantiates a new VegetaSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewVegetaSpecEmpty() *VegetaSpec {
	this := VegetaSpec{}
	return &this
}

// NewVegetaSpecs converts a list VegetaSpec pointers to objects.
// This is helpful when the SetVegetaSpec requires a list of objects
func NewVegetaSpecList(ps ...*VegetaSpec) []VegetaSpec {
	objs := []VegetaSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this VegetaSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *VegetaTrait) Validate() error {
	if o.Properties.Backofflimit == nil {
		return errors.New("Backofflimit in VegetaSpec must be set")
	}
	if o.Properties.Dorequest == nil {
		return errors.New("Dorequest in VegetaSpec must be set")
	}
	if o.Properties.Image == nil {
		return errors.New("Image in VegetaSpec must be set")
	}
	if o.Properties.Parallelism == nil {
		return errors.New("Parallelism in VegetaSpec must be set")
	}
	if o.Properties.RestartPolicy == nil {
		return errors.New("RestartPolicy in VegetaSpec must be set")
	}
	if o.Properties.Vegetacli == nil {
		return errors.New("Vegetacli in VegetaSpec must be set")
	}
	// validate all nested properties
	return nil
}

// GetBackofflimit returns the Backofflimit field value
func (o *VegetaTrait) GetBackofflimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return *o.Properties.Backofflimit
}

// GetBackofflimitOk returns a tuple with the Backofflimit field value
// and a boolean to check if the value has been set.
func (o *VegetaTrait) GetBackofflimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Backofflimit, true
}

// SetBackofflimit sets field value
func (o *VegetaTrait) SetBackofflimit(v int32) *VegetaTrait {
	o.Properties.Backofflimit = &v
	return o
}

// GetDorequest returns the Dorequest field value
func (o *VegetaTrait) GetDorequest() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Dorequest
}

// GetDorequestOk returns a tuple with the Dorequest field value
// and a boolean to check if the value has been set.
func (o *VegetaTrait) GetDorequestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Dorequest, true
}

// SetDorequest sets field value
func (o *VegetaTrait) SetDorequest(v string) *VegetaTrait {
	o.Properties.Dorequest = &v
	return o
}

// GetImage returns the Image field value
func (o *VegetaTrait) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *VegetaTrait) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Image, true
}

// SetImage sets field value
func (o *VegetaTrait) SetImage(v string) *VegetaTrait {
	o.Properties.Image = &v
	return o
}

// GetParallelism returns the Parallelism field value
func (o *VegetaTrait) GetParallelism() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return *o.Properties.Parallelism
}

// GetParallelismOk returns a tuple with the Parallelism field value
// and a boolean to check if the value has been set.
func (o *VegetaTrait) GetParallelismOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Parallelism, true
}

// SetParallelism sets field value
func (o *VegetaTrait) SetParallelism(v int32) *VegetaTrait {
	o.Properties.Parallelism = &v
	return o
}

// GetRestartPolicy returns the RestartPolicy field value
func (o *VegetaTrait) GetRestartPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.RestartPolicy
}

// GetRestartPolicyOk returns a tuple with the RestartPolicy field value
// and a boolean to check if the value has been set.
func (o *VegetaTrait) GetRestartPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.RestartPolicy, true
}

// SetRestartPolicy sets field value
func (o *VegetaTrait) SetRestartPolicy(v string) *VegetaTrait {
	o.Properties.RestartPolicy = &v
	return o
}

// GetVegetacli returns the Vegetacli field value
func (o *VegetaTrait) GetVegetacli() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Vegetacli
}

// GetVegetacliOk returns a tuple with the Vegetacli field value
// and a boolean to check if the value has been set.
func (o *VegetaTrait) GetVegetacliOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Vegetacli, true
}

// SetVegetacli sets field value
func (o *VegetaTrait) SetVegetacli(v string) *VegetaTrait {
	o.Properties.Vegetacli = &v
	return o
}

func (o VegetaSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VegetaSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backofflimit"] = o.Backofflimit
	toSerialize["dorequest"] = o.Dorequest
	toSerialize["image"] = o.Image
	toSerialize["parallelism"] = o.Parallelism
	toSerialize["restartPolicy"] = o.RestartPolicy
	toSerialize["vegetacli"] = o.Vegetacli
	return toSerialize, nil
}

type NullableVegetaSpec struct {
	value *VegetaSpec
	isSet bool
}

func (v *NullableVegetaSpec) Get() *VegetaSpec {
	return v.value
}

func (v *NullableVegetaSpec) Set(val *VegetaSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableVegetaSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVegetaSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVegetaSpec(val *VegetaSpec) *NullableVegetaSpec {
	return &NullableVegetaSpec{value: val, isSet: true}
}

func (v NullableVegetaSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVegetaSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const VegetaType = "vegeta"

func init() {
	sdkcommon.RegisterTrait(VegetaType, FromTrait)
}

type VegetaTrait struct {
	Base       apis.TraitBase
	Properties VegetaSpec
}

func Vegeta() *VegetaTrait {
	v := &VegetaTrait{Base: apis.TraitBase{}}
	return v
}

func (v *VegetaTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(v.Properties),
		Type:       VegetaType,
	}
	return res
}

func (v *VegetaTrait) FromTrait(from common.ApplicationTrait) (*VegetaTrait, error) {
	var properties VegetaSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	v.Base.Type = VegetaType
	v.Properties = properties
	return v, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	v := &VegetaTrait{}
	return v.FromTrait(from)
}

func (v *VegetaTrait) DefType() string {
	return VegetaType
}
