/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trivy_check

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the TrivyCheckSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TrivyCheckSpec{}

// TrivyCheckSpec struct for TrivyCheckSpec
type TrivyCheckSpec struct {
	Level      []string  `json:"level"`
	Resource   *Resource `json:"resource"`
	ShowDetail *bool     `json:"showDetail"`
}

// NewTrivyCheckSpecWith instantiates a new TrivyCheckSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewTrivyCheckSpecWith(level []string, resource Resource, showDetail bool) *TrivyCheckSpec {
	this := TrivyCheckSpec{}
	this.Level = level
	this.Resource = &resource
	this.ShowDetail = &showDetail
	return &this
}

// NewTrivyCheckSpecWithDefault instantiates a new TrivyCheckSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrivyCheckSpecWithDefault() *TrivyCheckSpec {
	this := TrivyCheckSpec{}
	var showDetail bool = true
	this.ShowDetail = &showDetail
	return &this
}

// NewTrivyCheckSpec is short for NewTrivyCheckSpecWithDefault which instantiates a new TrivyCheckSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrivyCheckSpec() *TrivyCheckSpec {
	return NewTrivyCheckSpecWithDefault()
}

// NewTrivyCheckSpecEmpty instantiates a new TrivyCheckSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewTrivyCheckSpecEmpty() *TrivyCheckSpec {
	this := TrivyCheckSpec{}
	return &this
}

// NewTrivyCheckSpecs converts a list TrivyCheckSpec pointers to objects.
// This is helpful when the SetTrivyCheckSpec requires a list of objects
func NewTrivyCheckSpecList(ps ...*TrivyCheckSpec) []TrivyCheckSpec {
	objs := []TrivyCheckSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this TrivyCheckSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *TrivyCheckWorkflowStep) Validate() error {
	if o.Properties.Level == nil {
		return errors.New("Level in TrivyCheckSpec must be set")
	}
	if o.Properties.Resource == nil {
		return errors.New("Resource in TrivyCheckSpec must be set")
	}
	if o.Properties.ShowDetail == nil {
		return errors.New("ShowDetail in TrivyCheckSpec must be set")
	}
	// validate all nested properties
	if o.Properties.Resource != nil {
		if err := o.Properties.Resource.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetLevel returns the Level field value
func (o *TrivyCheckWorkflowStep) GetLevel() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Properties.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *TrivyCheckWorkflowStep) GetLevelOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Level, true
}

// SetLevel sets field value
func (o *TrivyCheckWorkflowStep) SetLevel(v []string) *TrivyCheckWorkflowStep {
	o.Properties.Level = v
	return o
}

// GetResource returns the Resource field value
func (o *TrivyCheckWorkflowStep) GetResource() Resource {
	if o == nil {
		var ret Resource
		return ret
	}

	return *o.Properties.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *TrivyCheckWorkflowStep) GetResourceOk() (*Resource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Resource, true
}

// SetResource sets field value
func (o *TrivyCheckWorkflowStep) SetResource(v Resource) *TrivyCheckWorkflowStep {
	o.Properties.Resource = &v
	return o
}

// GetShowDetail returns the ShowDetail field value
func (o *TrivyCheckWorkflowStep) GetShowDetail() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return *o.Properties.ShowDetail
}

// GetShowDetailOk returns a tuple with the ShowDetail field value
// and a boolean to check if the value has been set.
func (o *TrivyCheckWorkflowStep) GetShowDetailOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.ShowDetail, true
}

// SetShowDetail sets field value
func (o *TrivyCheckWorkflowStep) SetShowDetail(v bool) *TrivyCheckWorkflowStep {
	o.Properties.ShowDetail = &v
	return o
}

func (o TrivyCheckSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrivyCheckSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["level"] = o.Level
	toSerialize["resource"] = o.Resource
	toSerialize["showDetail"] = o.ShowDetail
	return toSerialize, nil
}

type NullableTrivyCheckSpec struct {
	value *TrivyCheckSpec
	isSet bool
}

func (v *NullableTrivyCheckSpec) Get() *TrivyCheckSpec {
	return v.value
}

func (v *NullableTrivyCheckSpec) Set(val *TrivyCheckSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableTrivyCheckSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTrivyCheckSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrivyCheckSpec(val *TrivyCheckSpec) *NullableTrivyCheckSpec {
	return &NullableTrivyCheckSpec{value: val, isSet: true}
}

func (v NullableTrivyCheckSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrivyCheckSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const TrivyCheckType = "trivy-check"

func init() {
	sdkcommon.RegisterWorkflowStep(TrivyCheckType, FromWorkflowStep)
	sdkcommon.RegisterWorkflowSubStep(TrivyCheckType, FromWorkflowSubStep)
}

type TrivyCheckWorkflowStep struct {
	Base       apis.WorkflowStepBase
	Properties TrivyCheckSpec
}

func TrivyCheck(name string) *TrivyCheckWorkflowStep {
	t := &TrivyCheckWorkflowStep{Base: apis.WorkflowStepBase{
		Name: name,
		Type: TrivyCheckType,
	}}
	return t
}

func (t *TrivyCheckWorkflowStep) Build() v1beta1.WorkflowStep {
	_subSteps := make([]v1beta1.WorkflowStep, 0)
	for _, subStep := range t.Base.SubSteps {
		_subSteps = append(_subSteps, subStep.Build())
	}
	subSteps := make([]common.WorkflowSubStep, 0)
	for _, _s := range _subSteps {
		subSteps = append(subSteps, common.WorkflowSubStep{Name: _s.Name, DependsOn: _s.DependsOn, Inputs: _s.Inputs, Outputs: _s.Outputs, If: _s.If, Timeout: _s.Timeout, Meta: _s.Meta, Properties: _s.Properties, Type: _s.Type})
	}
	res := v1beta1.WorkflowStep{
		DependsOn:  t.Base.DependsOn,
		If:         t.Base.If,
		Inputs:     t.Base.Inputs,
		Meta:       t.Base.Meta,
		Name:       t.Base.Name,
		Outputs:    t.Base.Outputs,
		Properties: util.Object2RawExtension(t.Properties),
		SubSteps:   subSteps,
		Timeout:    t.Base.Timeout,
		Type:       TrivyCheckType,
	}
	return res
}

func (t *TrivyCheckWorkflowStep) FromWorkflowStep(from v1beta1.WorkflowStep) (*TrivyCheckWorkflowStep, error) {
	var properties TrivyCheckSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	subSteps := make([]apis.WorkflowStep, 0)
	for _, _s := range from.SubSteps {
		subStep, err := t.FromWorkflowSubStep(_s)
		if err != nil {
			return nil, err
		}
		subSteps = append(subSteps, subStep)
	}
	t.Base.Name = from.Name
	t.Base.DependsOn = from.DependsOn
	t.Base.Inputs = from.Inputs
	t.Base.Outputs = from.Outputs
	t.Base.If = from.If
	t.Base.Timeout = from.Timeout
	t.Base.Meta = from.Meta
	t.Base.Type = TrivyCheckType
	t.Properties = properties
	t.Base.SubSteps = subSteps
	return t, nil
}

func FromWorkflowStep(from v1beta1.WorkflowStep) (apis.WorkflowStep, error) {
	t := &TrivyCheckWorkflowStep{}
	return t.FromWorkflowStep(from)
}

func (t *TrivyCheckWorkflowStep) FromWorkflowSubStep(from common.WorkflowSubStep) (*TrivyCheckWorkflowStep, error) {
	var properties TrivyCheckSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	t.Base.Name = from.Name
	t.Base.DependsOn = from.DependsOn
	t.Base.Inputs = from.Inputs
	t.Base.Outputs = from.Outputs
	t.Base.If = from.If
	t.Base.Timeout = from.Timeout
	t.Base.Meta = from.Meta
	t.Base.Type = TrivyCheckType
	t.Properties = properties
	return t, nil
}

func FromWorkflowSubStep(from common.WorkflowSubStep) (apis.WorkflowStep, error) {
	t := &TrivyCheckWorkflowStep{}
	return t.FromWorkflowSubStep(from)
}

func (t *TrivyCheckWorkflowStep) WorkflowStepName() string {
	return t.Base.Name
}

func (t *TrivyCheckWorkflowStep) DefType() string {
	return TrivyCheckType
}

func (t *TrivyCheckWorkflowStep) If(_if string) *TrivyCheckWorkflowStep {
	t.Base.If = _if
	return t
}

func (t *TrivyCheckWorkflowStep) Alias(alias string) *TrivyCheckWorkflowStep {
	t.Base.Meta.Alias = alias
	return t
}

func (t *TrivyCheckWorkflowStep) Timeout(timeout string) *TrivyCheckWorkflowStep {
	t.Base.Timeout = timeout
	return t
}

func (t *TrivyCheckWorkflowStep) DependsOn(dependsOn []string) *TrivyCheckWorkflowStep {
	t.Base.DependsOn = dependsOn
	return t
}

func (t *TrivyCheckWorkflowStep) Inputs(input common.StepInputs) *TrivyCheckWorkflowStep {
	t.Base.Inputs = input
	return t
}

func (t *TrivyCheckWorkflowStep) Outputs(output common.StepOutputs) *TrivyCheckWorkflowStep {
	t.Base.Outputs = output
	return t
}
