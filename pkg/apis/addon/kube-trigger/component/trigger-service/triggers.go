/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trigger_service

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Triggers type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Triggers{}

// Triggers struct for Triggers
type Triggers struct {
	Action *Action `json:"action"`
	Filter *string `json:"filter"`
	Source *Source `json:"source"`
}

// NewTriggersWith instantiates a new Triggers object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewTriggersWith(action Action, filter string, source Source) *Triggers {
	this := Triggers{}
	this.Action = &action
	this.Filter = &filter
	this.Source = &source
	return &this
}

// NewTriggersWithDefault instantiates a new Triggers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggersWithDefault() *Triggers {
	this := Triggers{}
	return &this
}

// NewTriggers is short for NewTriggersWithDefault which instantiates a new Triggers object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggers() *Triggers {
	return NewTriggersWithDefault()
}

// NewTriggersEmpty instantiates a new Triggers object with no properties set.
// This constructor will not assign any default values to properties.
func NewTriggersEmpty() *Triggers {
	this := Triggers{}
	return &this
}

// NewTriggerss converts a list Triggers pointers to objects.
// This is helpful when the SetTriggers requires a list of objects
func NewTriggersList(ps ...*Triggers) []Triggers {
	objs := []Triggers{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Triggers
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Triggers) Validate() error {
	if o.Action == nil {
		return errors.New("Action in Triggers must be set")
	}
	if o.Filter == nil {
		return errors.New("Filter in Triggers must be set")
	}
	if o.Source == nil {
		return errors.New("Source in Triggers must be set")
	}
	// validate all nested properties
	if o.Action != nil {
		if err := o.Action.Validate(); err != nil {
			return err
		}
	}
	if o.Source != nil {
		if err := o.Source.Validate(); err != nil {
			return err
		}
	}
	return nil
}

// GetAction returns the Action field value
func (o *Triggers) GetAction() Action {
	if o == nil {
		var ret Action
		return ret
	}

	return *o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *Triggers) GetActionOk() (*Action, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action, true
}

// SetAction sets field value
func (o *Triggers) SetAction(v Action) *Triggers {
	o.Action = &v
	return o
}

// GetFilter returns the Filter field value
func (o *Triggers) GetFilter() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *Triggers) GetFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filter, true
}

// SetFilter sets field value
func (o *Triggers) SetFilter(v string) *Triggers {
	o.Filter = &v
	return o
}

// GetSource returns the Source field value
func (o *Triggers) GetSource() Source {
	if o == nil {
		var ret Source
		return ret
	}

	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *Triggers) GetSourceOk() (*Source, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source, true
}

// SetSource sets field value
func (o *Triggers) SetSource(v Source) *Triggers {
	o.Source = &v
	return o
}

func (o Triggers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Triggers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["filter"] = o.Filter
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

type NullableTriggers struct {
	value *Triggers
	isSet bool
}

func (v *NullableTriggers) Get() *Triggers {
	return v.value
}

func (v *NullableTriggers) Set(val *Triggers) {
	v.value = val
	v.isSet = true
}

func (v *NullableTriggers) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggers(val *Triggers) *NullableTriggers {
	return &NullableTriggers{value: val, isSet: true}
}

func (v NullableTriggers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
