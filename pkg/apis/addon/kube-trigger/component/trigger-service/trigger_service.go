/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trigger_service

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the TriggerServiceSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TriggerServiceSpec{}

// TriggerServiceSpec struct for TriggerServiceSpec
type TriggerServiceSpec struct {
	// The name of the trigger service
	Name *string `json:"name"`
	// The namespace of the trigger service to configure
	Namespace *string `json:"namespace"`
	// Trigger configurations. Refer to https://github.com/kubevela/kube-trigger for details.
	Triggers []Triggers `json:"triggers"`
}

// NewTriggerServiceSpecWith instantiates a new TriggerServiceSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewTriggerServiceSpecWith(name string, namespace string, triggers []Triggers) *TriggerServiceSpec {
	this := TriggerServiceSpec{}
	this.Name = &name
	this.Namespace = &namespace
	this.Triggers = triggers
	return &this
}

// NewTriggerServiceSpecWithDefault instantiates a new TriggerServiceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerServiceSpecWithDefault() *TriggerServiceSpec {
	this := TriggerServiceSpec{}
	var namespace string = "vela-system"
	this.Namespace = &namespace
	return &this
}

// NewTriggerServiceSpec is short for NewTriggerServiceSpecWithDefault which instantiates a new TriggerServiceSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerServiceSpec() *TriggerServiceSpec {
	return NewTriggerServiceSpecWithDefault()
}

// NewTriggerServiceSpecEmpty instantiates a new TriggerServiceSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewTriggerServiceSpecEmpty() *TriggerServiceSpec {
	this := TriggerServiceSpec{}
	return &this
}

// NewTriggerServiceSpecs converts a list TriggerServiceSpec pointers to objects.
// This is helpful when the SetTriggerServiceSpec requires a list of objects
func NewTriggerServiceSpecList(ps ...*TriggerServiceSpec) []TriggerServiceSpec {
	objs := []TriggerServiceSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this TriggerServiceSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *TriggerServiceComponent) Validate() error {
	if o.Properties.Name == nil {
		return errors.New("Name in TriggerServiceSpec must be set")
	}
	if o.Properties.Namespace == nil {
		return errors.New("Namespace in TriggerServiceSpec must be set")
	}
	if o.Properties.Triggers == nil {
		return errors.New("Triggers in TriggerServiceSpec must be set")
	}
	// validate all nested properties

	for i, v := range o.Base.Traits {
		if err := v.Validate(); err != nil {
			return fmt.Errorf("traits[%d] %s in %s component is invalid: %w", i, v.DefType(), TriggerServiceType, err)
		}
	}
	return nil
}

// GetName returns the Name field value
func (o *TriggerServiceComponent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TriggerServiceComponent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Name, true
}

// SetName sets field value
func (o *TriggerServiceComponent) SetName(v string) *TriggerServiceComponent {
	o.Properties.Name = &v
	return o
}

// GetNamespace returns the Namespace field value
func (o *TriggerServiceComponent) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *TriggerServiceComponent) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Namespace, true
}

// SetNamespace sets field value
func (o *TriggerServiceComponent) SetNamespace(v string) *TriggerServiceComponent {
	o.Properties.Namespace = &v
	return o
}

// GetTriggers returns the Triggers field value
func (o *TriggerServiceComponent) GetTriggers() []Triggers {
	if o == nil {
		var ret []Triggers
		return ret
	}

	return o.Properties.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value
// and a boolean to check if the value has been set.
func (o *TriggerServiceComponent) GetTriggersOk() ([]Triggers, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Triggers, true
}

// SetTriggers sets field value
func (o *TriggerServiceComponent) SetTriggers(v []Triggers) *TriggerServiceComponent {
	o.Properties.Triggers = v
	return o
}

func (o TriggerServiceSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerServiceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["namespace"] = o.Namespace
	toSerialize["triggers"] = o.Triggers
	return toSerialize, nil
}

type NullableTriggerServiceSpec struct {
	value *TriggerServiceSpec
	isSet bool
}

func (v *NullableTriggerServiceSpec) Get() *TriggerServiceSpec {
	return v.value
}

func (v *NullableTriggerServiceSpec) Set(val *TriggerServiceSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableTriggerServiceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerServiceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerServiceSpec(val *TriggerServiceSpec) *NullableTriggerServiceSpec {
	return &NullableTriggerServiceSpec{value: val, isSet: true}
}

func (v NullableTriggerServiceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerServiceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const TriggerServiceType = "trigger-service"

func init() {
	sdkcommon.RegisterComponent(TriggerServiceType, FromComponent)
}

type TriggerServiceComponent struct {
	Base       apis.ComponentBase
	Properties TriggerServiceSpec
}

func TriggerService(name string) *TriggerServiceComponent {
	t := &TriggerServiceComponent{Base: apis.ComponentBase{
		Name: name,
		Type: TriggerServiceType,
	}}
	return t
}

func (t *TriggerServiceComponent) Build() common.ApplicationComponent {
	traits := make([]common.ApplicationTrait, 0)
	for _, trait := range t.Base.Traits {
		traits = append(traits, trait.Build())
	}
	res := common.ApplicationComponent{
		DependsOn:  t.Base.DependsOn,
		Inputs:     t.Base.Inputs,
		Name:       t.Base.Name,
		Outputs:    t.Base.Outputs,
		Properties: util.Object2RawExtension(t.Properties),
		Traits:     traits,
		Type:       TriggerServiceType,
	}
	return res
}

func (t *TriggerServiceComponent) FromComponent(from common.ApplicationComponent) (*TriggerServiceComponent, error) {
	for _, trait := range from.Traits {
		_t, err := sdkcommon.FromTrait(&trait)
		if err != nil {
			return nil, err
		}
		t.Base.Traits = append(t.Base.Traits, _t)
	}
	var properties TriggerServiceSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	t.Base.Name = from.Name
	t.Base.DependsOn = from.DependsOn
	t.Base.Inputs = from.Inputs
	t.Base.Outputs = from.Outputs
	t.Base.Type = TriggerServiceType
	t.Properties = properties
	return t, nil
}

func FromComponent(from common.ApplicationComponent) (apis.Component, error) {
	t := &TriggerServiceComponent{}
	return t.FromComponent(from)
}

func (t *TriggerServiceComponent) SetTraits(traits ...apis.Trait) *TriggerServiceComponent {
	for _, addTrait := range traits {
		found := false
		for i, _t := range t.Base.Traits {
			if _t.DefType() == addTrait.DefType() {
				t.Base.Traits[i] = addTrait
				found = true
				break
			}
			if !found {
				t.Base.Traits = append(t.Base.Traits, addTrait)
			}
		}
	}
	return t
}

func (t *TriggerServiceComponent) GetTrait(typ string) apis.Trait {
	for _, _t := range t.Base.Traits {
		if _t.DefType() == typ {
			return _t
		}
	}
	return nil
}

func (t *TriggerServiceComponent) GetAllTraits() []apis.Trait {
	return t.Base.Traits
}

func (t *TriggerServiceComponent) ComponentName() string {
	return t.Base.Name
}

func (t *TriggerServiceComponent) DefType() string {
	return TriggerServiceType
}

func (t *TriggerServiceComponent) DependsOn(dependsOn []string) *TriggerServiceComponent {
	t.Base.DependsOn = dependsOn
	return t
}

func (t *TriggerServiceComponent) Inputs(input common.StepInputs) *TriggerServiceComponent {
	t.Base.Inputs = input
	return t
}

func (t *TriggerServiceComponent) Outputs(output common.StepOutputs) *TriggerServiceComponent {
	t.Base.Outputs = output
	return t
}

func (t *TriggerServiceComponent) AddDependsOn(dependsOn string) *TriggerServiceComponent {
	t.Base.DependsOn = append(t.Base.DependsOn, dependsOn)
	return t
}
