/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stdout_logs

import (
	"encoding/json"
	"errors"

	"github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	"github.com/oam-dev/kubevela-core-api/pkg/oam/util"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis"
	sdkcommon "github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/common"
	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the StdoutLogsSpec type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &StdoutLogsSpec{}

// StdoutLogsSpec struct for StdoutLogsSpec
type StdoutLogsSpec struct {
	VRL          *string `json:"VRL,omitempty"`
	Grafana      *string `json:"grafana"`
	LokiEndpoint *string `json:"lokiEndpoint"`
	Parser       *string `json:"parser,omitempty"`
}

// NewStdoutLogsSpecWith instantiates a new StdoutLogsSpec object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewStdoutLogsSpecWith(grafana string, lokiEndpoint string) *StdoutLogsSpec {
	this := StdoutLogsSpec{}
	this.Grafana = &grafana
	this.LokiEndpoint = &lokiEndpoint
	return &this
}

// NewStdoutLogsSpecWithDefault instantiates a new StdoutLogsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStdoutLogsSpecWithDefault() *StdoutLogsSpec {
	this := StdoutLogsSpec{}
	var grafana string = "default"
	this.Grafana = &grafana
	var lokiEndpoint string = "http://loki:3100/"
	this.LokiEndpoint = &lokiEndpoint
	return &this
}

// NewStdoutLogsSpec is short for NewStdoutLogsSpecWithDefault which instantiates a new StdoutLogsSpec object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStdoutLogsSpec() *StdoutLogsSpec {
	return NewStdoutLogsSpecWithDefault()
}

// NewStdoutLogsSpecEmpty instantiates a new StdoutLogsSpec object with no properties set.
// This constructor will not assign any default values to properties.
func NewStdoutLogsSpecEmpty() *StdoutLogsSpec {
	this := StdoutLogsSpec{}
	return &this
}

// NewStdoutLogsSpecs converts a list StdoutLogsSpec pointers to objects.
// This is helpful when the SetStdoutLogsSpec requires a list of objects
func NewStdoutLogsSpecList(ps ...*StdoutLogsSpec) []StdoutLogsSpec {
	objs := []StdoutLogsSpec{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this StdoutLogsSpec
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *StdoutLogsTrait) Validate() error {
	if o.Properties.Grafana == nil {
		return errors.New("Grafana in StdoutLogsSpec must be set")
	}
	if o.Properties.LokiEndpoint == nil {
		return errors.New("LokiEndpoint in StdoutLogsSpec must be set")
	}
	// validate all nested properties
	return nil
}

// GetVRL returns the VRL field value if set, zero value otherwise.
func (o *StdoutLogsTrait) GetVRL() string {
	if o == nil || utils.IsNil(o.Properties.VRL) {
		var ret string
		return ret
	}
	return *o.Properties.VRL
}

// GetVRLOk returns a tuple with the VRL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StdoutLogsTrait) GetVRLOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.VRL) {
		return nil, false
	}
	return o.Properties.VRL, true
}

// HasVRL returns a boolean if a field has been set.
func (o *StdoutLogsTrait) HasVRL() bool {
	if o != nil && !utils.IsNil(o.Properties.VRL) {
		return true
	}

	return false
}

// SetVRL gets a reference to the given string and assigns it to the vRL field.
// VRL:
func (o *StdoutLogsTrait) SetVRL(v string) *StdoutLogsTrait {
	o.Properties.VRL = &v
	return o
}

// GetGrafana returns the Grafana field value
func (o *StdoutLogsTrait) GetGrafana() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.Grafana
}

// GetGrafanaOk returns a tuple with the Grafana field value
// and a boolean to check if the value has been set.
func (o *StdoutLogsTrait) GetGrafanaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Grafana, true
}

// SetGrafana sets field value
func (o *StdoutLogsTrait) SetGrafana(v string) *StdoutLogsTrait {
	o.Properties.Grafana = &v
	return o
}

// GetLokiEndpoint returns the LokiEndpoint field value
func (o *StdoutLogsTrait) GetLokiEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Properties.LokiEndpoint
}

// GetLokiEndpointOk returns a tuple with the LokiEndpoint field value
// and a boolean to check if the value has been set.
func (o *StdoutLogsTrait) GetLokiEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.LokiEndpoint, true
}

// SetLokiEndpoint sets field value
func (o *StdoutLogsTrait) SetLokiEndpoint(v string) *StdoutLogsTrait {
	o.Properties.LokiEndpoint = &v
	return o
}

// GetParser returns the Parser field value if set, zero value otherwise.
func (o *StdoutLogsTrait) GetParser() string {
	if o == nil || utils.IsNil(o.Properties.Parser) {
		var ret string
		return ret
	}
	return *o.Properties.Parser
}

// GetParserOk returns a tuple with the Parser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StdoutLogsTrait) GetParserOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Properties.Parser) {
		return nil, false
	}
	return o.Properties.Parser, true
}

// HasParser returns a boolean if a field has been set.
func (o *StdoutLogsTrait) HasParser() bool {
	if o != nil && !utils.IsNil(o.Properties.Parser) {
		return true
	}

	return false
}

// SetParser gets a reference to the given string and assigns it to the parser field.
// Parser:
func (o *StdoutLogsTrait) SetParser(v string) *StdoutLogsTrait {
	o.Properties.Parser = &v
	return o
}

func (o StdoutLogsSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StdoutLogsSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.VRL) {
		toSerialize["VRL"] = o.VRL
	}
	toSerialize["grafana"] = o.Grafana
	toSerialize["lokiEndpoint"] = o.LokiEndpoint
	if !utils.IsNil(o.Parser) {
		toSerialize["parser"] = o.Parser
	}
	return toSerialize, nil
}

type NullableStdoutLogsSpec struct {
	value *StdoutLogsSpec
	isSet bool
}

func (v *NullableStdoutLogsSpec) Get() *StdoutLogsSpec {
	return v.value
}

func (v *NullableStdoutLogsSpec) Set(val *StdoutLogsSpec) {
	v.value = val
	v.isSet = true
}

func (v *NullableStdoutLogsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableStdoutLogsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStdoutLogsSpec(val *StdoutLogsSpec) *NullableStdoutLogsSpec {
	return &NullableStdoutLogsSpec{value: val, isSet: true}
}

func (v NullableStdoutLogsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStdoutLogsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

const StdoutLogsType = "stdout-logs"

func init() {
	sdkcommon.RegisterTrait(StdoutLogsType, FromTrait)
}

type StdoutLogsTrait struct {
	Base       apis.TraitBase
	Properties StdoutLogsSpec
}

func StdoutLogs() *StdoutLogsTrait {
	s := &StdoutLogsTrait{Base: apis.TraitBase{}}
	return s
}

func (s *StdoutLogsTrait) Build() common.ApplicationTrait {
	res := common.ApplicationTrait{
		Properties: util.Object2RawExtension(s.Properties),
		Type:       StdoutLogsType,
	}
	return res
}

func (s *StdoutLogsTrait) FromTrait(from common.ApplicationTrait) (*StdoutLogsTrait, error) {
	var properties StdoutLogsSpec
	if from.Properties != nil {
		err := json.Unmarshal(from.Properties.Raw, &properties)
		if err != nil {
			return nil, err
		}
	}
	s.Base.Type = StdoutLogsType
	s.Properties = properties
	return s, nil
}

func FromTrait(from common.ApplicationTrait) (apis.Trait, error) {
	s := &StdoutLogsTrait{}
	return s.FromTrait(from)
}

func (s *StdoutLogsTrait) DefType() string {
	return StdoutLogsType
}
