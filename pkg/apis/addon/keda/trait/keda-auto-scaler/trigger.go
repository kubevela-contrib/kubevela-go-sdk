/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keda_auto_scaler

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the Trigger type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Trigger{}

// Trigger struct for Trigger
type Trigger struct {
	// specify the metadata of trigger, the spec aligns with the spec of KEDA https://keda.sh/docs/2.8/scalers/
	Metadata map[string]interface{} `json:"metadata"`
	// specify the type of trigger, the rest spec here aligns with KEDA spec
	Type *string `json:"type"`
}

// NewTriggerWith instantiates a new Trigger object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewTriggerWith(metadata map[string]interface{}, type_ string) *Trigger {
	this := Trigger{}
	this.Metadata = metadata
	this.Type = &type_
	return &this
}

// NewTriggerWithDefault instantiates a new Trigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerWithDefault() *Trigger {
	this := Trigger{}
	return &this
}

// NewTrigger is short for NewTriggerWithDefault which instantiates a new Trigger object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrigger() *Trigger {
	return NewTriggerWithDefault()
}

// NewTriggerEmpty instantiates a new Trigger object with no properties set.
// This constructor will not assign any default values to properties.
func NewTriggerEmpty() *Trigger {
	this := Trigger{}
	return &this
}

// NewTriggers converts a list Trigger pointers to objects.
// This is helpful when the SetTrigger requires a list of objects
func NewTriggerList(ps ...*Trigger) []Trigger {
	objs := []Trigger{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this Trigger
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *Trigger) Validate() error {
	if o.Metadata == nil {
		return errors.New("Metadata in Trigger must be set")
	}
	if o.Type == nil {
		return errors.New("Type in Trigger must be set")
	}
	// validate all nested properties
	return nil
}

// GetMetadata returns the Metadata field value
func (o *Trigger) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *Trigger) SetMetadata(v map[string]interface{}) *Trigger {
	o.Metadata = v
	return o
}

// GetType returns the Type field value
func (o *Trigger) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Trigger) SetType(v string) *Trigger {
	o.Type = &v
	return o
}

func (o Trigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata"] = o.Metadata
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableTrigger struct {
	value *Trigger
	isSet bool
}

func (v *NullableTrigger) Get() *Trigger {
	return v.value
}

func (v *NullableTrigger) Set(val *Trigger) {
	v.value = val
	v.isSet = true
}

func (v *NullableTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrigger(val *Trigger) *NullableTrigger {
	return &NullableTrigger{value: val, isSet: true}
}

func (v NullableTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
