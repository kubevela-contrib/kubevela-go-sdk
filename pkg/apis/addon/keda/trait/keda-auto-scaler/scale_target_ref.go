/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keda_auto_scaler

import (
	"encoding/json"
	"errors"

	"github.com/kubevela-contrib/kubevela-go-sdk/pkg/apis/utils"
)

// checks if the ScaleTargetRef type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ScaleTargetRef{}

// ScaleTargetRef struct for ScaleTargetRef
type ScaleTargetRef struct {
	// Specify apiVersion for target workload
	ApiVersion *string `json:"apiVersion"`
	// Specify containerName, default to find this path \".spec.template.spec.containers[0]\"
	EnvSourceContainerName *string `json:"envSourceContainerName"`
	// Specify kind for target workload
	Kind *string `json:"kind"`
	// Specify the instance name for target workload
	Name *string `json:"name"`
}

// NewScaleTargetRefWith instantiates a new ScaleTargetRef object
// This constructor will make sure properties required by API are set.
// For optional properties, it will set default values if they have been defined.
// The set of arguments will change when the set of required properties is changed
func NewScaleTargetRefWith(apiVersion string, envSourceContainerName string, kind string, name string) *ScaleTargetRef {
	this := ScaleTargetRef{}
	this.ApiVersion = &apiVersion
	this.EnvSourceContainerName = &envSourceContainerName
	this.Kind = &kind
	this.Name = &name
	return &this
}

// NewScaleTargetRefWithDefault instantiates a new ScaleTargetRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScaleTargetRefWithDefault() *ScaleTargetRef {
	this := ScaleTargetRef{}
	var apiVersion string = "apps/v1"
	this.ApiVersion = &apiVersion
	var envSourceContainerName string = ""
	this.EnvSourceContainerName = &envSourceContainerName
	var kind string = "Deployment"
	this.Kind = &kind
	return &this
}

// NewScaleTargetRef is short for NewScaleTargetRefWithDefault which instantiates a new ScaleTargetRef object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScaleTargetRef() *ScaleTargetRef {
	return NewScaleTargetRefWithDefault()
}

// NewScaleTargetRefEmpty instantiates a new ScaleTargetRef object with no properties set.
// This constructor will not assign any default values to properties.
func NewScaleTargetRefEmpty() *ScaleTargetRef {
	this := ScaleTargetRef{}
	return &this
}

// NewScaleTargetRefs converts a list ScaleTargetRef pointers to objects.
// This is helpful when the SetScaleTargetRef requires a list of objects
func NewScaleTargetRefList(ps ...*ScaleTargetRef) []ScaleTargetRef {
	objs := []ScaleTargetRef{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// Validate validates this ScaleTargetRef
// 1. If the required properties are not set, this will return an error
// 2. If properties are set, will check if nested required properties are set
func (o *ScaleTargetRef) Validate() error {
	if o.ApiVersion == nil {
		return errors.New("ApiVersion in ScaleTargetRef must be set")
	}
	if o.EnvSourceContainerName == nil {
		return errors.New("EnvSourceContainerName in ScaleTargetRef must be set")
	}
	if o.Kind == nil {
		return errors.New("Kind in ScaleTargetRef must be set")
	}
	if o.Name == nil {
		return errors.New("Name in ScaleTargetRef must be set")
	}
	// validate all nested properties
	return nil
}

// GetApiVersion returns the ApiVersion field value
func (o *ScaleTargetRef) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *ScaleTargetRef) GetApiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *ScaleTargetRef) SetApiVersion(v string) *ScaleTargetRef {
	o.ApiVersion = &v
	return o
}

// GetEnvSourceContainerName returns the EnvSourceContainerName field value
func (o *ScaleTargetRef) GetEnvSourceContainerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.EnvSourceContainerName
}

// GetEnvSourceContainerNameOk returns a tuple with the EnvSourceContainerName field value
// and a boolean to check if the value has been set.
func (o *ScaleTargetRef) GetEnvSourceContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvSourceContainerName, true
}

// SetEnvSourceContainerName sets field value
func (o *ScaleTargetRef) SetEnvSourceContainerName(v string) *ScaleTargetRef {
	o.EnvSourceContainerName = &v
	return o
}

// GetKind returns the Kind field value
func (o *ScaleTargetRef) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ScaleTargetRef) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kind, true
}

// SetKind sets field value
func (o *ScaleTargetRef) SetKind(v string) *ScaleTargetRef {
	o.Kind = &v
	return o
}

// GetName returns the Name field value
func (o *ScaleTargetRef) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return *o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ScaleTargetRef) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *ScaleTargetRef) SetName(v string) *ScaleTargetRef {
	o.Name = &v
	return o
}

func (o ScaleTargetRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScaleTargetRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiVersion"] = o.ApiVersion
	toSerialize["envSourceContainerName"] = o.EnvSourceContainerName
	toSerialize["kind"] = o.Kind
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableScaleTargetRef struct {
	value *ScaleTargetRef
	isSet bool
}

func (v *NullableScaleTargetRef) Get() *ScaleTargetRef {
	return v.value
}

func (v *NullableScaleTargetRef) Set(val *ScaleTargetRef) {
	v.value = val
	v.isSet = true
}

func (v *NullableScaleTargetRef) IsSet() bool {
	return v.isSet
}

func (v *NullableScaleTargetRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScaleTargetRef(val *ScaleTargetRef) *NullableScaleTargetRef {
	return &NullableScaleTargetRef{value: val, isSet: true}
}

func (v NullableScaleTargetRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScaleTargetRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
